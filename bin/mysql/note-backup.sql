-- MySQL dump 10.13  Distrib 5.7.27, for Linux (x86_64)
--
-- Host: localhost    Database: cknote
-- ------------------------------------------------------
-- Server version	5.7.27-0ubuntu0.16.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `notes`
--

DROP TABLE IF EXISTS `notes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `notes` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `category` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `sub_cat` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `title` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `content` text COLLATE utf8_unicode_ci NOT NULL,
  `datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `visits` int(10) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `unique_note` (`category`,`sub_cat`,`title`),
  KEY `cat_sub_cats` (`category`,`sub_cat`)
) ENGINE=InnoDB AUTO_INCREMENT=391 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `notes`
--

LOCK TABLES `notes` WRITE;
/*!40000 ALTER TABLE `notes` DISABLE KEYS */;
INSERT INTO `notes` VALUES (1,'Linux','Folder And Files','TAR Usage','<p><span style=\"color:rgb(178, 34, 34)\"><strong>Group files into .tar archive</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">#archive folder\ntar cvf twitter_api.tar twitter_api/\n#archive files\ntar cvf syntax_try.tar syntax_try.php newtext.txt move.sh master.css\n#extract tar archive into a new folder having the same name of the archive\ntar xvf twitter_api.tar\n#extract tar archive into list of files which are included in the tar archive\ntar xvf syntax_try.tar\n#extract tar archive into a folder with specified name\ntar xvf syntax_try.tar -C ./new_folder\n</code></pre>\n\n<ul>\n	<li>tar is the main command, which means tape archive, it was created when saving data into magnetic disk in old time</li>\n	<li>&#39;c&#39; means create an archive files</li>\n	<li>&#39;v&#39; means to show progress&nbsp;verbosely</li>\n	<li>&#39;f&#39; means filename of archive</li>\n	<li>then the specfied archive name and folder or file to compress</li>\n	<li>&#39;x&#39; means extract</li>\n	<li>&#39;-C&#39; means to extract to the following specified dir but not the current path</li>\n</ul>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>To archive and compress into .tar.gz, .tgz&nbsp;or .gz formats (use gzip to compress)</strong></span></p>\n\n<pre>\n<code class=\"language-bash\"># .tar.gz\ntar czvfps twitter_api.tar.gz twitter_api/\n# .tgz\ntar czvfps twitter_api.tgz twitter_api/\n# .gz\ntar czvfps twitter_api.gz twitter_api/\n# extract\ntar zxvfps twitter_api.gz -C ./twitter_api\n</code></pre>\n\n<ul>\n	<li>&#39;z&#39; means to compress with gzip or extract with gunzip</li>\n	<li>&#39;p&#39; means &#39;preserve permissions&#39;</li>\n	<li>&#39;s&#39; means &nbsp;&#39;preserve order&#39;</li>\n</ul>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>To list files inside an archive</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">tar tvf twitter_api.tar.gz\ntar tvf twitter_api.tar\n</code></pre>\n\n<ul>\n	<li>&#39;t&#39; means list the inside files</li>\n</ul>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>To untar selected files from an archive</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">#extract single file\ntar xvf syntax_try.tar syntax_try.php\n#extract multiple files\ntar xvf syntax_try.tar &quot;syntax_try.php&quot; &quot;newtext.txt&quot;\n#extract multiple files into specified folder\ntar xvf syntax_try.tar -C ./new_folder &quot;syntax_try.php&quot; &quot;newtext.txt&quot;\n#extract files with chosen format\ntar xvf syntax_try.tar -C ./new_folder &quot;*.php&quot;</code></pre>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>To add more files or folders into an existing archive</strong></span></p>\n\n<pre>\n<code class=\"language-bash\"># add new files into archive\ntar rvf syntax_try.tar main.js index.php\n# add new folder into archive\ntar rvf syntax_try.tar ./new_folder</code></pre>\n\n<ul>\n	<li>&#39;r&#39; means to update or append new files or folders</li>\n</ul>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>To check the size of an archive</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">#give size in KB\ncounterall$ tar cf - syntax_try.tar | wc -c\n   30720\ncounterall$ tar czf - twitter_api.tgz | wc -c\n   30720</code></pre>','2016-11-28 17:02:14',26),(2,'Linux','Folder And Files','General Commands','<p><strong>Check size of a directory including all its child folders and files</strong></p>\n\n<pre>\n<code class=\"language-bash\">counterall$ du -csh ./cknote ./curl ./try_grunt\n 25M	./cknote\n 27M	./curl\n 28K	./try_grunt\n 53M	total</code></pre>\n\n<ul>\n	<li>&#39;du&#39; means disk usage</li>\n	<li>&#39;s&#39; shows the total space occupied by each folder</li>\n	<li>&#39;h&#39; shows usage in human readible format, i.e. KB, MB, GB, etc</li>\n	<li>&#39;c&#39; means to show total size of all folders</li>\n</ul>\n\n<hr />','2015-11-09 22:37:41',16),(3,'PHP','Regex','Preg_filter & Preg_replace','<p>Difference between preg_filter and preg_replace:</p>\n\n<pre>\n<code class=\"language-php\">$s = &#39;Hello&#39;;\necho preg_filter(&#39;/wow/&#39;, &#39;ror&#39;, $s);  //return nothing\necho preg_replace(&#39;/wow/&#39;, &#39;ror&#39;, $s); //return &#39;Hello&#39;\n\n$s = &#39;Hello wow&#39;;\necho preg_filter(&#39;/wow/&#39;, &#39;ror&#39;, $s);  //return &#39;Hello ror&#39;\necho preg_replace(&#39;/wow/&#39;, &#39;ror&#39;, $s); //return &#39;Hello ror&#39;</code></pre>\n\n<p>So preg_filter will return nothing if no matches found, while preg_replace will return the original subject even if no matches found.&nbsp;Otherwise, they are identical.</p>','2016-02-18 21:21:15',4),(4,'Linux','Scripts','Cron','<p><span style=\"color:rgb(255, 0, 0)\"><strong>Cron</strong></span> is the name of program that enables unix users to execute commands or scripts (groups of commands) automatically at a specified time/date.</p>\n\n<p><strong><span style=\"color:rgb(255, 0, 0)\">Cron</span></strong> is a daemon, which means that it only needs to be started once, and will lay dormant until it is required. A Web server is a daemon, it stays dormant until it gets asked for a web page. The cron daemon, or crond, stays dormant until a time specified in one of the config files, or <span style=\"color:rgb(255, 0, 0)\"><strong>crontabs</strong></span>.</p>\n\n<p>Basic commands of using cron include</p>\n\n<pre>\n<code class=\"language-bash\">#list existing jobs of current user\ncounterall$ crontab -l \n#edit crontab of current user\ncounterall$ crontab -e \n#remove crontab of current user\ncounterall$ crontab -r\n#work at crontab of specified user(must have superuser privilege to do so)\nroot$ crontab -u counterall -l</code></pre>\n\n<p>A normal crontab will look like as follows</p>\n\n<pre>\n<code class=\"language-bash\">#clarify PATH to be used\nPATH=/Library/Frameworks/Python.framework/Versions/3.4/bin:/Applications/XAMPP/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nMAILTO=\'\'\n# create job to backup notes database and move it to OneDrive for sync\n* * * * * /bin/bash /Users/counterall/bash/notes_backup.sh | mail -Es \'Notes backup errors\' kcongmj23@gmail.com &gt;/dev/null 2&gt;&amp;1</code></pre>\n\n<p><span style=\"color:rgb(255, 0, 0)\"><strong>PATH</strong></span> contains the directories which will be in the search path for cron e.g if you&#39;ve got a program &#39;foo&#39; in the directory /usr/cog/bin, it might be worth adding /usr/cog/bin to the path, as it will stop you having to use the full path to &#39;foo&#39; every time you want to call it.</p>\n\n<p><span style=\"color:rgb(255, 0, 0)\"><strong>MAILTO</strong></span> is who gets mailed the output of each command. If a command cron is running has output (e.g. status reports, or errors), cron will email the output to whoever is specified in this variable. If no one if specified, then the output will be mailed to the owner of the process that produced the output.</p>\n\n<p>Then is the jobs part of crontab, each line defines a job which indicate when and what to do. The first 5 stars define when and how frequent a job is executed and the following part is the cmd to run:</p>\n\n<pre>\n<code class=\"language-bash\">#minute hour dom month dow user cmd\n*       *    *   *     *   /bin/bash /Users/counterall/bash/notes_backup.sh</code></pre>\n\n<p><span style=\"color:rgb(255, 0, 0)\"><strong>minute:</strong></span> This controls what minute of the hour the command will run on, and is between &#39;0&#39; and &#39;59&#39;</p>\n\n<p><span style=\"color:rgb(255, 0, 0)\"><strong>hour</strong></span> This controls what hour the command will run on, and is specified in the 24 hour clock, values must be between 0 and 23 (0 is midnight)</p>\n\n<p><span style=\"color:rgb(255, 0, 0)\"><strong>dom</strong></span> This is the Day of Month, that you want the command run on, e.g. to run a command on the 19th of each month, the dom would be 19. <span style=\"color:rgb(255, 0, 0)\"><strong>month</strong></span> This is the month a specified command will run on, it may be specified numerically (0-12), or as the name of the month (e.g. May)</p>\n\n<p><span style=\"color:rgb(255, 0, 0)\"><strong>dow</strong></span> This is the Day of Week that you want a command to be run on, it can also be numeric (0-7) or as the name of the day (e.g. sun). user This is the user who runs the command.</p>\n\n<p><span style=\"color:rgb(255, 0, 0)\"><strong>cmd</strong></span> This is the command that you want run. This field may contain multiple words or spaces.</p>\n\n<pre>\n<code class=\"language-bash\">#examples\n01 * * * * root echo \"This command is run at one min past every hour\"\n17 8 * * * root echo \"This command is run daily at 8:17 am\"\n17 20 * * * root echo \"This command is run daily at 8:17 pm\"\n#Under dow 0 and 7 are both Sunday\n00 4 * * 0 root echo \"This command is run at 4 am every Sunday\" \n* 4 * * Sun root echo \"So is this\"\n42 4 1 * * root echo \"This command is run 4:42 am every 1st of the month\"\n01 * 19 07 * root echo \"This command is run hourly on the 19th of July\"</code></pre>\n\n<p>If both the dom and dow are specified, the command will be executed when either of the events happen, e.g.</p>\n\n<pre>\n<code class=\"language-bash\">* 12 16 * Mon root cmd\n#Will run cmd at midday every Monday and every 16th, and will produce the \n#same result as both of these entries put together would:\n* 12 16 * * root cmd\n* 12 * * Mon root cmd\n#When using the names of weekdays or months, it isn\'t case sensitive, but only\n#the first three letters should be used, e.g. Mon, sun or Mar, jul.</code></pre>\n\n<p>Lists can be in the form, 1,2,3 (meaning 1 and 2 and 3) or 1-3 (also meaning 1 and 2 and 3).</p>\n\n<pre>\n<code class=\"language-bash\">#from Monday to Friday\n59 11 * * 1,2,3,4,5 root backup.sh\n59 11 * * 1-5 root backup.sh \n#Lists can also be combined with each other, or with steps\n#Will run cmd every midday between the 1st and the 15th as well as the 20th \n#and 25th (inclusive) and also on the 17th of every month.\n* 12 1-15,17,20-25 * * root cmd</code></pre>\n\n<p>Cron also supports &#39;step&#39; values. A value of */2 in the dom field would mean the command runs every two days and likewise, */5 in the hours field would mean the command runs every 5 hours.</p>\n\n<pre>\n<code class=\"language-bash\">* 12 10-16/2 * * root backup.sh\n#is the same as:\n* 12 10,12,14,16 * * root backup.sh\n#Will run connection.test every 15 mins between the hours or 9am and 5pm\n*/15 9-17 * * * root connection.test\n* 12 10-16/2 * * root backup.sh\n#is the same as:\n* 12 10,12,14,16 * * root backup.sh\n</code></pre>\n\n<p>Cron has a built in feature of allowing you to specify who may, and who may not use it. It does this by the use of /etc/cron.allow and /etc/cron.deny files. These files work the same way as the allow/deny files for other daemons do.</p>\n\n<p>To stop a user using cron, just put their name in cron.deny, to allow a user put their name in the cron.allow. If you wanted to prevent all users from using cron, you could add the line ALL to the cron.deny file:</p>\n\n<pre>\n<code class=\"language-bash\">root$ echo ALL &gt;&gt;/etc/cron.deny</code></pre>\n\n<p>If you want user cog to be able to use cron, you would add the line cog to the cron.allow file:</p>\n\n<pre>\n<code class=\"language-bash\">root$ echo cog &gt;&gt;/etc/cron.allow</code></pre>\n\n<p>If there is neither a cron.allow nor a cron.deny file, then the use of cron is unrestricted (i.e. every user can use it). If you were to put the name of some users into the cron.allow file, without creating a cron.deny file, it would have the same effect as creating a cron.deny file with ALL in it. This means that any subsequent users that require cron access should be put in to the cron.allow file.</p>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"background-color:rgb(241, 76, 76); color:whitesmoke\">Trouble Shooting</span></strong></p>\n\n<p>You may find following issue when you try to update crontab</p>\n\n<pre>\n<code class=\"language-bash\">/tmp/crontab.XXXXXX.crontab\":1: bad minute\nerrors in crontab file, can\'t install.\nDo you want to retry the same edit?</code></pre>\n\n<p>The reason is actually quite simple:</p>\n\n<ul>\n	<li>This problem most often occurs because you&rsquo;re using a text editor, such as pico, that fakes word wrapping by adding a newline when it reaches a certain column position.</li>\n	<li>Crontab delimits jobs with line breaks (newlines). Each job occupies one line. Therefore, if crontab sees anything other than an integer in the first column of a line, it throws the &ldquo;bad minute&rdquo; error, since the minute argument is the first one crontab encounters.</li>\n</ul>\n\n<p>The solution:&nbsp;</p>\n\n<ul>\n	<li>The simple fix is to go to delete the line breaks added by pico / your *nix editor. You can most easily do that by putting your cursor on the first character of each extra line, then hit the backspace key until that line is joined back up with the previous one, and repeating the process until your entire cron command is on one line.</li>\n</ul>','2017-01-10 16:19:07',15),(5,'Linux','Scripts','Note Backup Example','<p>First learn by an example script used to backup notes</p>\n\n<pre>\n<code class=\"language-bash\"># backup notes database and move it to OneDrive for sync\n\nif error1=$( (mysqldump cknote &gt; daily_notes_backup.sql) 2&gt;&amp;1 )\n  then\n	if ! error2=$( (mv ./daily_notes_backup.sql /Users/counterall/Documents/Dropbox/Programming Notes/cknote_db) 2&gt;&amp;1 )\n      then\n        echo \"Backup immigration failed: $error2\"\n        exit 1\n    fi\nelse\n  echo \"Notes backup failed: $error1\"\n  exit 1\nfi</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">$error1</span> and <span style=\"color:rgb(178, 34, 34)\">$error2</span> are two variables to save the output from the command inside $()</p>\n\n<p>In the example, we wrap the command with $() to capture its stdout into variables by firstly merging stderr into stdout stream. <span style=\"background-color:rgb(255, 236, 0)\">Check &#39;Command Substitution&#39; for more detailed explanation</span></p>\n\n<p>And then the &#39;exit code&#39; of <span style=\"color:rgb(178, 34, 34)\">$error1</span> and <span style=\"color:rgb(178, 34, 34)\">$erro2</span> will be evaluated by if condition, code <span style=\"background-color:rgb(122, 255, 145)\">0 means TRUE(no stderr), and non-zero&nbsp;means FALSE(any stderr)</span></p>','2016-07-22 23:20:12',4),(6,'Git','Repo Initialization','Create Git Repo','<p><span style=\"color:rgb(178, 34, 34)\"><strong>Make current&nbsp;folder a git repository</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">git init\n</code></pre>\n\n<p>Fetch the remote git repo into your local workstation and create connection to the remote repo automatically with name &quot;origin&quot;. Do remember to run this command in the directory under which you would like to have your git repository located.</p>\n\n<pre>\n<code class=\"language-bash\">git clone &lt;https or ssh URL of the remote repo&gt; &lt;local directory(optional)&gt;\n#git clone will only create master branch locally, if you want to clone other branches\ngit branch -a # which shows all branches including remote ones\ngit checkout -b other-branch origin/other-branch # get other remote branch locally</code></pre>\n\n<p>If you want to create a new local repo by cloning a specified remote repo branch, then</p>\n\n<pre>\n<code class=\"language-bash\">git clone --single-branch --branch &lt;branch name&gt; &lt;remote repo&gt; &lt;local repo path&gt;\n#for example\ngit clone --single-branch --branch passion_point_support git@ck.git.lab:statsit/api.git statsit_api</code></pre>\n\n<p>And you can create .gitignore file to name the files or directories which won&#39;t be tracked by git, e.g.</p>\n\n<pre>\n<code class=\"language-bash\">cat .gitignore\n#file1\n#file2\n#directory1/\n#directory2/</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>Create new branch of repo</strong></span></p>\n\n<pre>\n<code class=\"language-bash\"># create a new branch and automatically switch to it\ngit checkout -b name_of_branch\n\n# create a new branch and automatically switch to it but not based on master branch but a chosen one\ngit checkout -b new-branch base-branch</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>Check info of a branch</strong></span></p>\n\n<pre>\n<code class=\"language-bash\"># create a new branch of repo\ngit branch name_of_branch\n# to show the tree of repo, including master branch and all other branches in local\ngit branch\n# to show the tree of repo, including the remote repo.\ngit branch -a\n# To view your remote branches\ngit branch -r\n# delete one branch\ngit branch -d &lt;branch name&gt;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>To not only remove the actual files from disk, but will also stage the removal of the files for us, i.e. remove + add</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">git rm filelocation\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>Steps to merge back a branch into master branch:</strong></span></p>\n\n<pre>\n<code class=\"language-bash\"># back to master branch\ngit checkout master\n# merge the changes of branch back to master\ngit merge name_of_branch\n# to delete a branch\ngit branch -d &lt;branch name&gt;</code></pre>\n\n<h3><span style=\"background-color:rgb(122, 255, 145)\">What if you face conflicts between you master and merged&nbsp;branch?&nbsp;.i.e. they diverge</span></h3>\n\n<ul>\n	<li>\n	<p>You need to choose which side will override the other side in order to address the conflict.</p>\n	</li>\n	<li>\n	<p>git provides us two flags to represent&nbsp;these two sides, <em><strong><span style=\"color:rgb(178, 34, 34)\">--theirs</span></strong></em> actually means <strong><em>merged branch</em></strong>&nbsp;and <span style=\"color:rgb(178, 34, 34)\"><em><strong>--ours</strong></em></span> means the <span style=\"color:rgb(178, 34, 34)\"><em><strong>master branch.</strong></em></span>&nbsp;</p>\n	</li>\n	<li>\n	<p>use &quot;<span style=\"color:rgb(178, 34, 34)\">git checkout --theirs filepath</span>&quot; or &quot;<span style=\"color:rgb(178, 34, 34)\">git checkout --ours filepath</span>&quot; to let the file choose&nbsp;revision of merged branch or master branch&nbsp;to address the conflict.&nbsp;</p>\n	</li>\n	<li>finally, use &quot;<span style=\"color:rgb(178, 34, 34)\">git add filepath</span>&quot; and &quot;<span style=\"color:rgb(178, 34, 34)\">git commit</span>&quot; to finish the merging process.</li>\n</ul>','2019-01-28 13:57:58',38),(7,'Linux','Scripts','Env & Shell Var','<p>Let us explain the concepts and usage of environmental &amp; shell variables of shell, and also the difference between them as well</p>\n\n<p><span style=\"color:#B22222\"><strong>what are environmental and shell variables</strong></span></p>\n\n<ul>\n	<li>Environmental variables are variables that are defined for the current shell and are inherited by any child shells or processes. Environmental variables are used to pass information into processes that are spawned from the shell.</li>\n	<li>Shell variables are variables that are contained exclusively within the shell in which they were set or defined. They are often used to keep track of ephemeral data, like the current working directory. Shell variables will automatically include Environmental Variables.</li>\n	<li>&nbsp;By convention, these types of variables are usually defined using all capital letters. This helps users distinguish environmental variables within other contexts.</li>\n</ul>\n\n<p><span style=\"color:#B22222\"><strong>To display environmental and shell variables</strong></span></p>\n\n<pre>\n<code class=\"language-bash\"># Display all environmental variables:\nprintenv\n# or\nenv\n# Display all shell variables:\nset | less #use less pipe to show all set variables, use \'q\' to quit less pipe.\n\n</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>Creating shell variable</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">#No space is allowed between name, equator and value in the expression\n#Quote is needed if the value include white space\n#We use single quote because ! is a special symbol which needs to be escaped\nDEMO_VAR=\'Hello World!\' </code></pre>\n\n<p>Now we can check if it has been set successfully,&nbsp;we use a grep pipe to only show the newly created variable, grep means &quot;Gloably search by Regular Expression and Print&quot;</p>\n\n<pre>\n<code class=\"language-bash\">set | grep DEMO_VAR\n#or by printing out the value of the variable\necho $DEMO_VAR #dollar sign indicates that this is variable</code></pre>\n\n<p>Because shell variables are not subset of environmental variables, so DEMO_VAR&nbsp;is not defined in enviromental variables</p>\n\n<pre>\n<code class=\"language-bash\">printenv | grep DEMO_VAR # this should return empty\n# and no child shell of the current shell should inherit this DEMO_VAR variable which is exclusively for the current shell\nbash # use \'bash\' to create a child shell of the current shell\nset | grep DEMO_VAR # now it should return nothing\nexit # finally use \'exit\' to go back to parent shell</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>Creating Environmental Variables</strong></span></p>\n\n<p>We can simple transform a shell varibale into an environmental one, then this variable should be available in both the environmental variable list and in child shell as well</p>\n\n<pre>\n<code class=\"language-bash\">export DEMO_VAR\n</code></pre>\n\n<p>However if in the child shell we create a new shell variable and export it as an environmental one, this variable will be only valid for itself and its own child shells but not in its parent shell because environment variables will be valid only for its child processes but not the upstream ones.</p>\n\n<pre>\n<code class=\"language-bash\">bash\nexport NEW_ENV_VAR=some_value\nexit \nset | grep NEW_ENV_VAR # then this should return nothing.\n</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>Unset the Environmental Variables</strong></span></p>\n\n<pre>\n<code class=\"language-bash\"># we can unset any environmental variables by simply\nexport -n DEMO_VAR # now it is not an env var but only a shell var\nprintenv | grep DEMO_VAR # it will return nothing.\n</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>Unset the Shell Variables</strong></span></p>\n\n<pre>\n<code class=\"language-bash\"># we can completely unset any variable for both shell and enviroment by \nunset DEMO_VAR</code></pre>','2016-01-03 18:58:42',6),(8,'SSH','Basics','Setup & Connect','<p><strong><span style=\"color:#B22222\">First of all be sure that the permission of .ssh folder is correct:</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">chmod 700 ~/.ssh\nchmod 600 ~/.ssh/authorized_keys\n</code></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. Install openssh-client and openssh-server on both local host and remote host</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">#it will install openssh-client as well by default\n$sudo apt-get install openssh-server</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. use ssh to connect remote host by using a specified user name and its password&nbsp;</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">$ssh user_name@ip_of_remote_host\n#then the terminal will prompt you to enter password of the user &quot;user_name&quot; in remote server\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3. create ssh keys in local host&nbsp;</strong></span></p>\n\n<p>For both security and convinience, we can create ssh key-pair to access the remote server</p>\n\n<pre>\n<code class=\"language-bash\">#create key-pairs by using RSA encoding\n$ssh-keygen -t rsa \n#then the terminal will prompt you to enter passphrase for the private key\n#and private key(id_rsa) and public key(id_rsa.pub) will be saved under /home/[username]/.ssh/\n</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">4. copy and register public key to the remote server&nbsp;</span></strong><br />\n<span style=\"color:rgb(178, 34, 34)\">4.1 ubuntu on local host</span></p>\n\n<pre>\n<code class=\"language-bash\">#this will automatically append the public key into the /.ssh/authorized_keys file on remote host\n$ssh-copy-id user_name@ip_of_remote_host\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4.2 Mac OS X on local host&nbsp;</span></p>\n\n<pre>\n<code class=\"language-bash\">#first to output public key in local terminal\n$cat ~/.ssh/id_rsa.pub\n#and copy the public key into clipboard\n\n#open the following file in remote terminal, and paste the public key into the file.\n$nano ~/.ssh/authorized_keys</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>5. Disable the password authentication from sshd_config file in remote host</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">$nano /etc/ssh/sshd_config\n#then set &quot;PasswordAuthentication no&quot;\n$sudo service ssh restart \n#to make the changes valid\n\n#now no password is needed when ssh to the remote host\n$ssh user_name@ip_of_remote_host </code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>6. Get rid of SSH connection timeout</strong></span><br />\nin /etc/ssh/ssh_config or ~/.ssh/config, copy the following to periodically send null package to SSH server to avoid ssh connection timeout</p>\n\n<pre>\n<code class=\"language-apache\">ServerAliveInterval 100</code></pre>','2016-05-13 19:07:29',33),(9,'Linux','Standard Streams','File Descriptor','<p>In&nbsp;Unix&nbsp;and&nbsp;Unix-like computer operating systems, a&nbsp;file descriptor&nbsp;(FD, less frequently&nbsp;fildes) is an abstract indicator used to access a&nbsp;file&nbsp;or other&nbsp;input/output&nbsp;resource, such as a&nbsp;pipe&nbsp;or network connection. File descriptors are part of the POSIX&nbsp;application programming interface. A file descriptor is a non-negative&nbsp;integer, represented in&nbsp;C&nbsp;programming language as the type&nbsp;int.</p>\n\n<p>There are three standard POSIX file descriptors, corresponding to the three&nbsp;standard streams, which presumably every process (save perhaps a&nbsp;daemon) should expect to have:</p>\n\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"0\" style=\"margin-bottom:5px; width:500px\">\n	<tbody>\n		<tr>\n			<td style=\"text-align:center\">Integer value</td>\n			<td style=\"text-align:center\">Name</td>\n			<td style=\"text-align:center\">Symbolic Constant</td>\n			<td style=\"text-align:center\">File Stream</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">0</td>\n			<td style=\"text-align:center\">Standard Input</td>\n			<td style=\"text-align:center\">STDIN_FILENO</td>\n			<td style=\"text-align:center\">stdin</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">1</td>\n			<td style=\"text-align:center\">Standard Output</td>\n			<td style=\"text-align:center\">STDOUT_FILENO</td>\n			<td style=\"text-align:center\">stdout</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">2</td>\n			<td style=\"text-align:center\">Standard Error</td>\n			<td style=\"text-align:center\">STDERR_FILENO</td>\n			<td style=\"text-align:center\">stderr</td>\n		</tr>\n	</tbody>\n</table>\n\n<p style=\"text-align:center\">&nbsp;</p>','2016-07-22 12:01:20',1),(10,'Linux','Standard Streams','Input-Output-Error','<p><span style=\"color:#FF0000\"><strong>Standard input (stdin)</strong></span></p>\n\n<p>Standard input is stream data (often text) going into a program. The program requests data transfers by use of the&nbsp;read&nbsp;operation. Not all programs require stream input. For example, the&nbsp;dir&nbsp;and&nbsp;ls&nbsp;programs (which display file names contained in a directory) may take&nbsp;command-line arguments, but perform their operations without any stream data input.</p>\n\n<p>Unless&nbsp;redirected, standard input is expected from the&nbsp;keyboard&nbsp;which started the program.</p>\n\n<p>The&nbsp;file descriptor&nbsp;for standard input is <span style=\"color:#FF0000\">0</span> (zero); the&nbsp;POSIX&nbsp;&lt;unistd.h&gt;&nbsp;definition is&nbsp;STDIN_FILENO; the corresponding&nbsp;&lt;stdio.h&gt;&nbsp;variable is&nbsp;FILE* stdin; similarly, the&nbsp;&lt;iostream&gt;&nbsp;variable is&nbsp;std::cin.</p>\n\n<hr />\n<p><span style=\"color:#FF0000\"><strong>Standard output (stdout)</strong></span></p>\n\n<p>Standard output is the stream where a program writes its output data. The program requests data transfer with the&nbsp;write&nbsp;operation. Not all programs generate output. For example the&nbsp;file rename&nbsp;command (variously called&nbsp;mv,&nbsp;move, or&nbsp;ren) is silent on success.</p>\n\n<p>Unless&nbsp;redirected, standard output is the&nbsp;text terminal&nbsp;which initiated the program.</p>\n\n<p>The&nbsp;file descriptor&nbsp;for standard output is <span style=\"color:#FF0000\">1 </span>(one); the&nbsp;POSIX&nbsp;&lt;unistd.h&gt;&nbsp;definition is&nbsp;STDOUT_FILENO; the corresponding&nbsp;&lt;stdio.h&gt;&nbsp;variable is&nbsp;FILE* stdout; similarly, the&nbsp;&lt;iostream&gt;&nbsp;variable is&nbsp;std::cout.</p>\n\n<hr />\n<p><strong><span style=\"color:#FF0000\">Standard error (stderr)</span></strong></p>\n\n<p>Standard error is another output stream typically used by programs to output&nbsp;error messages&nbsp;or diagnostics. It is a stream independent of standard output and can be redirected separately. This solves the&nbsp;semipredicate problem, allowing output and errors to be distinguished, and is analogous to a function returning a pair of values &ndash; see&nbsp;Semipredicate problem: Multivalued return. The usual destination is the&nbsp;text terminal&nbsp;which started the program to provide the best chance of being seen even if&nbsp;standard output&nbsp;is redirected (so not readily observed). For example, output of a program in a&nbsp;pipeline&nbsp;is redirected to input of the next program, but errors from each program still go directly to the text terminal.</p>\n\n<p>It is acceptable&mdash;and normal&mdash;for&nbsp;standard output&nbsp;and&nbsp;standard error&nbsp;to be directed to the same destination, such as the text terminal. Messages appear in the same order as the program writes them, unless buffering is involved. (For example, a common situation is when the standard error stream is unbuffered but the standard output stream is line-buffered; in this case, text written to standard error later may appear on the terminal earlier, if the standard output stream&#39;s buffer is not yet full.)</p>\n\n<p>The&nbsp;file descriptor&nbsp;for standard error is defined by&nbsp;POSIX&nbsp;as <span style=\"color:#FF0000\">2</span> (two); the&nbsp;&lt;unistd.h&gt;&nbsp;header file provides the symbol&nbsp;STDERR_FILENO;[2]&nbsp;the corresponding&nbsp;&lt;stdio.h&gt;&nbsp;variable is&nbsp;FILE* stderr. The C++&nbsp;&lt;iostream&gt;&nbsp;standard header provides two variables associated with this stream:&nbsp;std::cerr&nbsp;and&nbsp;std::clog, the former being unbuffered and the latter using the same buffering mechanism as all other C++ streams.</p>','2015-11-12 12:25:44',2),(11,'Linux','Standard Streams','Stream Redirect','<p>Most&nbsp;shells&nbsp;allow both&nbsp;standard output&nbsp;and&nbsp;standard error&nbsp;to be redirected to the same file using</p>\n\n<pre>\n<code class=\"language-bash\"># redirect to a log file\nls &amp;&gt; log\n# redirect to nowhere, means just ignore the output\nls &amp;&gt; /dev/null</code></pre>\n\n<p>Bourne-style shells allow&nbsp;standard error&nbsp;to be redirected to the same destination that standard output is directed to using or vise versa</p>\n\n<pre>\n<code class=\"language-bash\"># stderr output to same destination as stdout\ncmd 2&gt;&amp;1\n# or the way around\ncmd 1&gt;&amp;2</code></pre>\n\n<p>Example</p>\n\n<pre>\n<code class=\"language-bash\">#only output stderr to email and then abandon stderr as well\ncmd &gt;/dev/null | mail -Es &#39;Subject&#39; kcongmj23@gmail.com 2&gt;&amp;1 \n#output nothing\nls 2&gt;/dev/null 1&gt;&amp;2</code></pre>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">&#39;&gt;&#39; means to overide the target if target exists already, if you want to append output to target, you can use &#39;&gt;&gt;&#39;</span></p>\n\n<pre>\n<code class=\"language-bash\">echo hello world &gt;&gt; /my/log</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">A&nbsp;real example</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">TODAY=$(date +%F)\nTITLE=&#39;MongoDB_Backup_&#39;$TODAY\n/usr/local/mongodb-linux-x86_64-2.2.2/bin/mongodump --out /storage/mongodb/backup/$TODAY &gt;&gt; /storage/mongodb/backup/$TODAY/log 2&gt;&amp;1\ncat /storage/mongodb/backup/$TODAY/log | mail -s $TITLE kan@statsit.com</code></pre>\n\n<ul>\n	<li>&nbsp;&#39;mongodump&#39; will append the standard output to log file, and standard error will go to the same place</li>\n</ul>','2017-01-10 21:10:40',3),(12,'SSH','Basics','Socket Proxy','<p>When you have a ssh connected server, you can use it as a proxy server very easily to solve some problems, for example, you need to visit special link in local browser to enable the local machine have access to gmail services in less secure situation, e.g. use phpmailer to send emails by using gmail service. However the server side does not have GUI interface to browse the site, the solution is to use SSH dynamic proxy.</p>\n\n<p>First, connect remote server and make it a proxy server as well</p>\n\n<pre>\n<code class=\"language-bash\">ssh wpdemo@ckdemo.io -D8888\n</code></pre>\n\n<p>Second, configue the network setting to use &quot;Socks Proxy&quot; with proxy ip 127.0.0.1 and port 8888, then all the internet visit request will be sent by the remote server and return the result to your local machine. And in other words, for the outside world, you are using you browser with the remote server IP address.&nbsp;</p>','2015-11-12 14:36:28',5),(13,'Git','Repo Initialization','Stage & Commit','<pre>\n<code class=\"language-bash\"># to check the current status of the git repository\ngit status\n# to add new edited files into staging area(cached area)\ngit add *.* \n# to add all folders and embedded files of the repository into the staging area\ngit add . \n# to commit all staged files into repository\ngit commit -m &quot;commit message&quot;\n# manage unstaged content interactively\ngit add -i</code></pre>','2017-05-12 09:58:28',2),(14,'Git','History Review','History Log','<pre>\n<code class=\"language-bash\"># to check the history of your operation on your git repository\ngit log\n# show the history commit in oneline with only commit tag and description\ngit log --oneline\n# Limit the number of commits to show by &lt;limit&gt;. \n# For example, git log -3 will display the latest 3 commits in log\ngit log -&lt;limit&gt;\n# Along with the ordinary git log information, include which files were altered and the relative number of lines that were added or deleted from each of them\ngit log --stat \n# Display the patch representing each commit. This shows the full diff of each commit\n# which is the most detailed view you can have of your project history.\ngit log -p\n# Only display commits that include the specified file. This is an easy way to see the history of particular files\n# -- means the name after it is a file path but not a branch name\ngit log -- &lt;file&gt; \n#for example:\ngit log -- foo.py bar.py\n\n# shows commits which only in origin/master but not in local master branch\ngit log --oneline master..origin/master\n# shows commits which only in local master branch but not in remote branch\ngit log --oneline origin/master..master \n# --follow will show the entire history of the file even it has been renamed before\ngit log origin/master --follow --oneline &lt;file&gt; \n# shows only list of files which have been committed without detailed differences\ngit log --oneline --name-only\n# shows list of files changed since a specific commit\ngit diff e6c2f31..HEAD --name-only</code></pre>\n\n<p>&nbsp;</p>','2018-07-24 11:38:11',7),(15,'Git','History Review','Checkout','<p>Checking out a commit makes the entire working directory match that commit. This can be used to view an old state of your project without altering your current state in any way.</p>\n\n<p>Checking out a file lets you see an old version of that particular file, leaving the rest of your working directory untouched.</p>\n\n<p>During the normal course of development, the HEAD usually points to master or some other local branch, but when you check out a previous commit, HEAD no longer attaches to a branch, it points directly to a commit. This is called a &ldquo;detached HEAD&rdquo; state.</p>\n\n<pre>\n<code class=\"language-bash\">git checkout master # Return to the master branch.\n</code></pre>\n\n<p>Check out a previous version of a file. This turns the &lt;file&gt; that resides in the working directory into an exact copy of the one from &lt;commit&gt; and adds it to the staging area.</p>\n\n<pre>\n<code class=\"language-bash\">git checkout &lt;commit&gt; &lt;path-of-file&gt; \n#for example:\ngit checkout a1e8fb5 hello.py\n# to undo the changes made to the file. do notice that -- means the following text are filenames but not branch names.\ngit checkout -- &lt;path-of-file&gt; \n</code></pre>\n\n<p>Update all files in the working directory to match the specified commit. You can use either a commit hash or a tag as the &lt;commit&gt; argument. This will put you in a detached HEAD state.</p>\n\n<pre>\n<code class=\"language-bash\">#checkout to a specified history commit:\ngit checkout a1e8fb5\n</code></pre>\n\n<p>This makes your working directory match the exact state of the a1e8fb5 commit.&nbsp;You can look at files, compile the project, run tests, and even edit files without worrying about losing the current state of the project. Nothing you do in here will be saved in your repository. To continue developing, you need to get back to the &ldquo;current&rdquo; state of your project by</p>\n\n<pre>\n<code class=\"language-bash\">git checkout master\n</code></pre>\n\n<p>Set the default branch of your repo to operate, do remember after you switch the branch, input &#39;git push -u origin name_of_branch&#39; to sync the branch repo to github</p>\n\n<pre>\n<code class=\"language-bash\">git checkout name_of_branch\n</code></pre>\n\n<p>&nbsp;</p>','2015-11-12 15:10:12',15),(16,'Git','History Review','Revert-Reset-Clean','<p>The git revert command undoes a committed snapshot. But, instead of removing the commit from the project history, it figures out how to undo the changes introduced by the commit and appends a new commit with the resulting content. This prevents Git from losing history, which is important for the integrity of your revision history and for reliable collaboration.</p>\n\n<pre>\n<code class=\"language-bash\">git revert &lt;commit&gt;\n</code></pre>\n\n<p>Reverting should be used when you want to remove an entire commit from your project history. This can be useful, for example, if you&rsquo;re tracking down a bug and find that it was introduced by a single commit. Instead of manually going in, fixing it, and committing a new snapshot, you can use git revert to automatically do all of this for you.</p>\n\n<p>Use Reset to&nbsp;<span style=\"color:rgb(255, 0, 0)\">unstages a file</span> without overwriting any changes.</p>\n\n<pre>\n<code class=\"language-bash\">git reset &lt;file&gt; \n</code></pre>\n\n<p>Reset the staging area to match the most recent commit, but leave the working directory unchanged. This unstages all files without overwriting any changes, giving you the opportunity to re-build the staged snapshot from scratch.</p>\n\n<pre>\n<code class=\"language-bash\">git reset </code></pre>\n\n<p>Reset the staging area and the working directory to match the most recent commit. In addition to unstaging changes, the <span style=\"color:rgb(255, 0, 0)\">--hard flag</span> tells Git to overwrite all changes in the working directory, too.</p>\n\n<pre>\n<code class=\"language-bash\">git reset --hard \n</code></pre>\n\n<p>Move the current branch tip backward to &lt;commit&gt;, reset the staging area to match, but leave the working directory alone. All changes made since &lt;commit&gt; will reside in the working directory, which lets you re-commit the project history using cleaner, more <span style=\"color:rgb(255, 0, 0)\">atomic snapshots</span>.</p>\n\n<pre>\n<code class=\"language-bash\">git reset &lt;commit&gt;\n</code></pre>\n\n<p>Move the current branch tip backward to &lt;commit&gt; and reset both the staging area and the working directory to match. This obliterates not only the uncommitted changes, but all commits after &lt;commit&gt;, as well.</p>\n\n<pre>\n<code class=\"language-bash\">git reset --hard &lt;commit&gt;\n</code></pre>\n\n<p>Reverting has two important advantages over resetting. First, it doesn&rsquo;t change the project history, which makes it a &ldquo;safe&rdquo; operation for commits that have already been published to a shared</p>\n\n<p>repository. For details about why altering shared history is dangerous, please see the git reset page.</p>\n\n<p>Second, git revert is able to target an individual commit at an arbitrary point in the history, whereas git reset can only work backwards from the current commit. For example, if you wanted to undo an old commit with git reset, you would have to remove all of the commits that occurred after the target commit, remove it, then re-commit all of the subsequent commits. Needless to say, this is not an elegant undo solution.</p>\n\n<p>Git Clean remove untracked files from the current directory. The -f (force) flag is required unless the &#39;clean.requireForce&#39; configuration option is set to false (it&#39;s true by default). This will not remove untracked folders or files specified by .gitignore</p>\n\n<pre>\n<code class=\"language-bash\">git clean -f \n# Remove untracked files and untracked directories from the current directory.\ngit clean -df\n# Remove untracked files from the current directory as well as any files that Git usually ignores.\ngit clean -xf\n# Perform a &ldquo;dry run&rdquo; of git clean. This will show you which files are going to be removed without actually doing it.\ngit clean -n </code></pre>\n\n<p><br />\nThe <span style=\"color:#FF0000\">git reset --hard and git clean -f commands are your best friends</span> after you&rsquo;ve made some embarrassing developments in your local repository and want to burn the evidence. Running both of them will make your working directory match the most recent commit, giving you a clean slate to work with.<br />\nfor example:<br />\n# Edit some existing files<br />\n# Add some new files<br />\n# Realize you have no idea what you&#39;re doing</p>\n\n<pre>\n<code class=\"language-bash\"># Undo changes in tracked files\ngit reset --hard\n# Remove untracked files\ngit clean -df</code></pre>\n\n<p>&nbsp;</p>','2015-11-12 15:24:23',11),(17,'Git','History Review','Rewrite History','<p>This is a convenient way to fix up the most recent commit. It lets you combine staged changes with the previous commit instead of committing it as an entirely new snapshot. It can also be used to simply edit the previous commit message without changing its snapshot. But, amending doesn&rsquo;t just alter the most recent commit&mdash;it replaces it entirely.</p>\n\n<pre>\n<code class=\"language-bash\">git commit --amend\n</code></pre>\n\n<p>for example:</p>\n\n<pre>\n<code class=\"language-bash\"># Edit hello.py and main.py\ngit add hello.py\ngit commit\n\n# Realize you forgot to add the changes from main.py\ngit add main.py\ngit commit --amend --no-edit \n#--no-edit flag will allow you to make the amendment to your commit without changing its commit message</code></pre>\n\n<p>&nbsp;</p>','2015-11-12 15:26:46',3),(18,'Git','Remote Control','Remote Setting','<pre>\n<code class=\"language-bash\"># to list all the remote alias of your repository\ngit remote\n# to list the remote alias and remote URI pairs of your repository\ngit remote -v\n# Create a new connection to a remote repository. \n# After adding a remote, you’ll be able to use &lt;name&gt; as a convenient shortcut for &lt;url&gt; in other Git commands.\ngit remote add &lt;name&gt; &lt;url&gt; \n# to remove the alias of your repo\ngit remote rm &lt;name of alias&gt;\n# change the name of alias of remote connection\ngit remote rename &lt;original name of alias&gt; &lt;new name of alias&gt;\n# to update the remote repo (both fetch and push) URLs for the alias.\ngit remote set-url &lt;name of alias&gt; &lt;GitHub URL&gt;\n# to only update the push remote repo.\ngit remote set-url --push &lt;name of alias&gt; &lt;GitHub URL&gt;\n\n#you can detach the current branch with the remote host by following\n#this won\'t delete the setting of remote but just detach\ngit branch --unset-upstream\n#and attach it again, for example, to origin/master\ngit branch --set-upstream-to origin/master</code></pre>\n\n<p>&nbsp;</p>','2015-11-12 15:45:02',15),(19,'Git','Remote Control','Push & Pull','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Fetch all of the branches from the repository. This also downloads all of the required commits and files from the other repository.</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">git fetch &lt;remote&gt;\n# Same as the above command, but only fetch the specified branch.\ngit fetch &lt;remote&gt; &lt;branch&gt; </code></pre>\n\n<p>The git fetch command imports commits from a remote repository into your local repo. <span style=\"background-color:rgb(255, 236, 0)\">The resulting commits are stored as remote branches instead of the normal local branches that we&rsquo;ve been working with</span>. This gives you a chance to review changes before integrating them into your copy of the project.</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Fetch the specified remote&rsquo;s copy of the current branch and immediately <span style=\"background-color:white\">merge</span> it into the local copy</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">git pull &lt;remote&gt; &lt;branch&gt;\n#This is the same as :\ngit fetch &lt;remote&gt; &lt;branch&gt;\n#followed by\ngit merge &lt;remote&gt; &lt;branch&gt;</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. Same as the above command, but instead of using git merge to integrate the remote branch with the local one, use &#39;git rebase&#39;.</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">git pull --rebase &lt;remote&gt; \n#or\ngit fetch &lt;remote&gt; \ngit rebase &lt;remote&gt; \n</code></pre>\n\n<pre>\n<code class=\"language-bash\">#for example:\ngit checkout master\ngit pull --rebase origin\n#This simply moves your local changes onto the top of what everybody else has already contributed.</code></pre>\n\n<h3><span style=\"background-color:rgb(122, 255, 145)\">What if you face conflicts between you local and remote repo when you try to rebase?, i.e. they diverge</span></h3>\n\n<ul>\n	<li>\n	<p>You need to choose which side will override the other side in order to address the conflict.</p>\n	</li>\n	<li>\n	<p>git provides us two flags to represent&nbsp;these two sides, <em><strong><span style=\"color:rgb(178, 34, 34)\">--theirs</span></strong></em> actually means <em><strong><span style=\"color:rgb(178, 34, 34)\">local repo</span></strong></em>, and <span style=\"color:rgb(178, 34, 34)\"><em><strong>--ours</strong></em></span> means the <span style=\"color:rgb(178, 34, 34)\"><em><strong>remote repo.</strong></em></span>&nbsp;</p>\n	</li>\n	<li>\n	<p>use &quot;<span style=\"color:rgb(178, 34, 34)\">git checkout --theirs filepath</span>&quot; or &quot;<span style=\"color:rgb(178, 34, 34)\">git checkout --ours filepath</span>&quot; to let the file choose local revision or repo revision to address the conflict.&nbsp;</p>\n	</li>\n	<li>finally, use &quot;<span style=\"color:rgb(178, 34, 34)\">git add filepath</span>&quot; and &quot;<span style=\"color:rgb(178, 34, 34)\">git rebase --continue</span>&quot; to finish the rebasing process.</li>\n</ul>\n\n<p>For example</p>\n\n<pre>\n<code class=\"language-bash\">#start rebase process\ngit fetch origin\ngit rebase origin\n#check the conflicts if any\ngit diff filepath\n#choose the side you want to resolve conflicts\ngit checkout --theirs filepath #choose local repo\ngit checkout --ours filepath #choose remote repo\n#check if conflicts have been resolved\ngit diff filepath\n#if everything is ok, then finalise the rebasing process\ngit add filepath\ngit rebase --continue\n\n#abort rebasing process anytime you want by running\ngit rebase --abort</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">4. After running following&nbsp;command, all git pull commands will integrate via git rebase instead of git merge.</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">git config --global branch.autosetuprebase always</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">5. Push repository to remote server</span></strong></p>\n\n<p>5.1 Push a specific branch</p>\n\n<pre>\n<code class=\"language-bash\">git push -u origin master</code></pre>\n\n<p>5.2 Push all branches all together</p>\n\n<pre>\n<code class=\"language-bash\">git push --all -u origin</code></pre>\n\n<p>5.3 Push all tags</p>\n\n<pre>\n<code class=\"language-bash\">git push --tags origin</code></pre>\n\n<p>5.5 Overwrite remote</p>\n\n<pre>\n<code class=\"language-bash\">git push --all -f</code></pre>\n\n<p>Force pushing with a &quot;lease&quot; allows the force push to fail if there are new commits on the remote that you didn&#39;t expect (technically, if you haven&#39;t fetched them into your remote-tracking branch yet), which is useful if you don&#39;t want to accidentally overwrite someone else&#39;s commits that you didn&#39;t even know about yet, and you just want to overwrite your own</p>\n\n<pre>\n<code>git push &lt;remote&gt; &lt;branch&gt; --force-with-lease</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">6. Fetch remote branch and create it as a local one</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">git fetch remote_name remote_branch_name:local_branch_name\n#for example\ngit fetch origin flexible_master_filter:flexible_master_filter</code></pre>','2017-05-12 09:56:39',58),(20,'Git','Repo Initialization','Tagging','<pre>\n<code class=\"language-bash\"># list existing tags\n$ git tag\n# list existing tags matching a pattern\n$ git tag -l \"v1.8.5.*\" </code></pre>\n\n<p>Git uses two main types of tags: lightweight and annotated.<br />\nA lightweight tag is very much like a branch that doesn&rsquo;t change &ndash; it&rsquo;s just a pointer to a specific commit.<br />\nAnnotated tags, however, are stored as full objects in the Git database. They&rsquo;re checksummed; contain the tagger name, email, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG). It&rsquo;s generally recommended that you create annotated tags so you can have all this information; but if you want a temporary tag or for some reason don&rsquo;t want to keep the other information, lightweight tags are available too.</p>\n\n<pre>\n<code class=\"language-bash\"># create an annotated tag\n$ git tag -a v1.4 -m \'my version 1.4\'\n# create a lightweight tag\n$ git tag v1.4 \n# creating a tag against a specified commit\n$ git tag -a v1.2 9fceb02\n# show the info of a tag\n$ git show v1.4</code></pre>\n\n<p>By default, the git push command doesn&rsquo;t transfer tags to remote servers. You will have to explicitly push tags to a shared server after you have created them. This process is just like sharing remote branches &ndash; you can run git push origin [tagname].</p>\n\n<pre>\n<code class=\"language-bash\"># transfter a specified tag to remote repo\n$ git push origin v1.5\n# transfter all tags to remote repo\n$ git push origin --tags</code></pre>\n\n<p>You can&rsquo;t really check out a tag in Git, since they can&rsquo;t be moved around. If you want to put a version of your repository in your working directory that looks like a specific tag, you can create a new branch at a specific tag with git checkout -b [branchname] [tagname]:</p>\n\n<pre>\n<code class=\"language-bash\">$ git checkout -b version2 v2.0.0</code></pre>\n\n<p>&nbsp;</p>','2015-11-12 15:50:16',10),(21,'Git','Repo Initialization','Global Setting','<p><span style=\"color:#B22222\"><strong>Username and email address of current repo</strong></span></p>\n\n<pre>\n<code class=\"language-bash\"># to set the user name\ngit config user.name \'counterall\' \n# shows the username to verify the name is correctly set\ngit config user.name\n# to set the user email\ngit config user.email \'counterall@counterall.com\'\n# shows the email to verify the email is correctly set\ngit config user.email\n</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>Set globally</strong></span></p>\n\n<pre>\n<code class=\"language-bash\"># to set the user name globally\ngit config --global user.name \'counterall\' \n# shows the username to verify the name is correctly set\ngit config --global user.name</code></pre>\n\n<p><span style=\"color:#FFFFFF\"><span style=\"background-color:rgb(23, 174, 240)\">After you update the author info, if you want to apply it to the latest commit, you can do the followings</span></span></p>\n\n<pre>\n<code class=\"language-bash\">git commit --amend --reset-author</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>list current settings</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">git config --list\ngit config --global --list</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>Environment variables</strong></span><br />\nIf git config user.name reports the correct username for the repository you are viewing, but your commits are using the wrong name, your environment variables may be overriding your username.<br />\nMake sure you have not set the GIT_COMMITTER_NAME or GIT_AUTHOR_NAME variables. You can check their values with the following command:</p>\n\n<pre>\n<code class=\"language-bash\"># prints the value of GIT_COMMITTER_NAME\n$ echo $GIT_COMMITTER_NAME\n# prints the value of GIT_AUTHOR_NAME\n$ echo $GIT_AUTHOR_NAME</code></pre>\n\n<p>If you notice a different value, you can change it like so:</p>\n\n<pre>\n<code class=\"language-bash\">$ GIT_COMMITTER_NAME=Billy Everyteen\n$ GIT_AUTHOR_NAME=Billy Everyteen</code></pre>\n\n<p>&nbsp;</p>','2016-02-17 16:45:35',9),(22,'Git','History Review','Check Diff','<pre>\n<code class=\"language-bash\"># check the differences made but not staged since your last commit\ngit diff\n# check the differences made and staged since your last commit\ngit diff --staged \n#equals to \ngit diff --cached\n# check all the differences made since your last commit\ngit diff HEAD\n#equals to\ngit diff #plus\ngit diff --cached\n#if will show the names of files which has conflicts aftering trying to merge\ngit diff --name-only --diff-filter=U\n#in order to get rid of annoying diff caused by whitespace, we do the following\ngit diff -w\n#show files modified between specific commits\ngit diff --name-only SHA1 SHA2\ngit diff --name-only HEAD~10 HEAD~5</code></pre>\n\n<p>&nbsp;</p>','2016-04-28 11:59:43',11),(23,'HTML','DOM','Bubble & Capture','<p>Event <span style=\"color:rgb(255, 0, 0)\">bubbling</span> and <span style=\"color:rgb(255, 0, 0)\">capturing</span> are two ways of event propagation in the HTML DOM API, when an event occurs in an element inside another element, and both elements have registered a handle for that event. The event propagation mode determines in&nbsp;which order the elements receive the event.</p>\n\n<ul>\n	<li>With bubbling, the event is first captured and handled by the innermost element and then propagated to outer elements.</li>\n	<li>With capturing, the event is first captured by the outermost element and propagated to the inner elements.</li>\n	<li>Capturing is also called &quot;<span style=\"color:rgb(255, 0, 0)\">trickling</span>&quot;, which helps remember the propagation order:&nbsp;bubble up, trickle down</li>\n	<li><span style=\"color:#FF0000\">It does not matter whether each element in the stream chain has event&nbsp;listener or not. Bubbling and capture still work.</span></li>\n</ul>\n\n<p>Back in the old days, Netscape advocated event capturing, while Microsoft promoted event bubbling. Both are part of the W3C&nbsp;Document Object Model Events&nbsp;standard (2000).</p>\n\n<p>IE &lt; 9 uses&nbsp;only event bubbling, whereas IE9+ and all major browsers support both.</p>\n\n<p>We can use the&nbsp;addEventListener(type, listener, useCapture)&nbsp;to register event handlers for in either bubbling (default) or capturing mode. To use the capturing model pass the third argument as&nbsp;true.</p>\n\n<p>HTML Example:</p>\n\n<pre>\n<code class=\"language-html\">&lt;div&gt;1\n    &lt;div&gt;2\n        &lt;div&gt;3\n            &lt;div&gt;4\n                &lt;div&gt;5&lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;section id=&quot;log&quot;&gt;&lt;/section&gt;</code></pre>\n\n<p>CSS Example</p>\n\n<pre>\n<code class=\"language-css\">div {\n    border: 1px solid red;\n    padding: 5px;\n    min-height: 10px;\n}</code></pre>\n\n<p>JS Example</p>\n\n<pre>\n<code class=\"language-javascript\">var divs = document.getElementsByTagName(&#39;div&#39;);\nvar $log = $(&#39;#log&#39;);\n\nfunction log(msg) {\n    $log.append(&#39;&lt;p&gt;&#39; + msg + &#39;&lt;/p&gt;&#39;);\n}\n\nfunction capture() {\n    log(&#39;capture: &#39; + this.firstChild.nodeValue.trim());\n}\n\nfunction bubble() {\n    log(&#39;bubble: &#39; + this.firstChild.nodeValue.trim());\n}\n\nfor (var i = 0; i &lt; divs.length; i++) {\n    divs[i].addEventListener(&#39;click&#39;, capture, true);\n    divs[i].addEventListener(&#39;click&#39;, bubble, false);\n}\n</code></pre>\n\n<p><strong>Click the innermost div 5 with <span style=\"color:rgb(255, 0, 0)\">bubbling</span> enabled</strong></p>\n\n<p><img alt=\"\" src=\"../../../assets/img/event-bubble.png\" style=\"margin-bottom:5px\" /></p>\n\n<hr />\n<p><strong>Click the innermost div 5 with <span style=\"color:rgb(255, 0, 0)\">capturing</span> enabled</strong></p>\n\n<p><img alt=\"\" src=\"../../../assets/img/event-capture.png\" style=\"height:371px; margin-bottom:5px; width:572px\" /></p>','2015-11-13 11:42:54',3),(24,'JQuery','Snippets','Stop Propagation','<p>The <span style=\"color:rgb(255, 0, 0)\">event.stopPropagation() </span>method stops the <span style=\"color:rgb(255, 0, 0)\">bubbling</span> of an event to parent elements, preventing any parent event handlers from being executed.</p>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-html\">&lt;script&gt;\n$(document).ready(function(){\n    $(\"span\").click(function(event){\n        event.stopPropagation();\n        alert(\"The span element was clicked.\");\n    });\n    $(\"p\").click(function(event){\n        alert(\"The p element was clicked.\");\n    });\n    $(\"div\").click(function(){\n        alert(\"The div element was clicked.\");\n    });\n});\n&lt;/script&gt;\n\n&lt;div style=\"height:100px;width:500px;padding:10px;border:1px solid blue;background-color:lightblue;\"&gt;\nThis is a div element.\n&lt;p style=\"background-color:pink\"&gt;This is a p element, in the div element. &lt;br&gt;&lt;span style=\"background-color:orange\"&gt;This is a span element in the p and the div element.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;\n</code></pre>\n\n<p>If you click <span style=\"color:rgb(255, 0, 0)\">span</span> element, the event handlers of its parent elements(i.e. <span style=\"color:rgb(255, 0, 0)\">p</span> and <span style=\"color:rgb(255, 0, 0)\">div</span>) won&#39;t be trigged.</p>\n\n<p>Use the&nbsp;<span style=\"color:#FF0000\">event.isPropagationStopped()</span>&nbsp;method to check whether this method was called for the event.</p>','2015-11-13 14:11:56',3),(25,'JQuery','FAQ','Filter-Find-Childern','<p>These are three concepts easily confuse. The main difference are</p>\n\n<ul>\n	<li><span style=\"color:#FF0000\">element.children(pattern)</span> and <span style=\"color:#FF0000\">element.find(pattern)</span> are used to find matched descendants&nbsp;of element&nbsp;&nbsp;</li>\n	<li><span style=\"color:#FF0000\">element.children(pattern) </span>only finds first level child elements matching the pattern and&nbsp;<span style=\"color:#FF0000\">element.find()</span> will find all matched children recursively no matter what the level is</li>\n	<li><span style=\"color:#FF0000\">element.filter(pattern)</span> not finds element&#39;s descendants but sibling elements and the element its own to match the pattern</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-html\">&lt;style&gt;\ndiv{\n  width: 200px;\n  background: red;\n  color: white;\n  text-align: center;\n}\n&lt;/style&gt;\n&lt;script&gt;\n$(document).ready(function(){\n  $(\'.d1\').find(\'div\').css(\'background\', \'green\'); \n  $(\'.d1\').children(\'div\').css(\'background\', \'orange\'); \n  $(\'.d3\').filter(\'div\').css(\'background\', \'blue\');    \n});\n&lt;/script&gt;\n&lt;div class=\'d1\'&gt;level1\n    &lt;div class=\'d2\'&gt;level2\n      &lt;div class=\'d3\'&gt;level3\n        &lt;div class=\'d4\'&gt;level4&lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=\'d3\'&gt;level3&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\'d1\'&gt;level1&lt;/div&gt;</code></pre>\n\n<p>The result is shown below:</p>\n\n<p><img alt=\"\" src=\"../../../assets/img/filter-find-children.png\" style=\"height:129px; width:232px\" /></p>','2015-11-13 15:11:31',7),(26,'CSS','Snippets','Hide ScrollBar','<p>We need to have three levels elements and the innermost one wrap the content</p>\n\n<pre>\n<code class=\"language-html\">&lt;style&gt;\n.element, .outer-container {\n    width: 200px;\n    height: 200px;\n}\n\n.outer-container {\n    border: 5px solid purple;\n    position: relative;\n    overflow: hidden;\n}\n\n.inner-container {\n    position: absolute;\n    left: 0;\n    overflow-x: hidden;\n    overflow-y: scroll;\n}\n\n/* this style only works for webkit-based browsers */\n.inner-container::-webkit-scrollbar {\n    display: none;\n}\n&lt;/style&gt;\n&lt;div class=\"outer-container\"&gt;\n    &lt;div class=\"inner-container\"&gt;\n        &lt;div class=\"element\"&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;</code></pre>','2015-11-24 14:49:31',5),(27,'MySql','INFORMATION_SCHEMA','Basics','<p>INFORMATION_SCHEMA&nbsp;provides access to database&nbsp;metadata, information about the MySQL server such as the name of a database or table, the data type of a column, or access privileges. Other terms that are sometimes used for this information are&nbsp;data dictionary&nbsp;and&nbsp;system catalog.</p>\n\n<p>INFORMATION_SCHEMA&nbsp;is a database within each MySQL instance, the place that stores information about all the other databases that the MySQL server maintains. The&nbsp;INFORMATION_SCHEMA&nbsp;database contains several read-only tables. They are actually views, not base tables, so there are no files associated with them, and you cannot set triggers on them. Also, there is no database directory with that name.</p>\n\n<p>Although you can select&nbsp;INFORMATION_SCHEMA&nbsp;as the default database with a&nbsp;USE&nbsp;statement, you can only read the contents of tables, not perform&nbsp;INSERT,&nbsp;UPDATE, or&nbsp;DELETE&nbsp;operations on them.</p>','2015-11-13 21:07:57',1),(28,'MySql','INFORMATION_SCHEMA','Schemata Table','<p>A schema is a database, so the&nbsp;SCHEMATA&nbsp;table provides information about all databases in your MySql server.</p>\n\n<p>A usage example to select all databases matching a specific pattern, this query results can be used to do some following tasks for all matched databases in a batch</p>\n\n<pre>\n<code class=\"language-sql\">SHOW COLUMNS FROM INFORMATION_SCHEMA.SCHEMATA;\n+----------------------------+--------------+------+-----+---------+-------+\n| Field                      | Type         | Null | Key | Default | Extra |\n+----------------------------+--------------+------+-----+---------+-------+\n| CATALOG_NAME               | varchar(512) | NO   |     |         |       |\n| SCHEMA_NAME                | varchar(64)  | NO   |     |         |       |\n| DEFAULT_CHARACTER_SET_NAME | varchar(32)  | NO   |     |         |       |\n| DEFAULT_COLLATION_NAME     | varchar(32)  | NO   |     |         |       |\n| SQL_PATH                   | varchar(512) | YES  |     | NULL    |       |\n+----------------------------+--------------+------+-----+---------+-------+\nSELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME LIKE &#39;cknote%&#39; OR SCHEMA_NAME LIKE &#39;test%&#39;;\n+--------------+\n| SCHEMA_NAME  |\n+--------------+\n| cknote       |\n| cknote2      |\n| test         |\n| test_charset |\n+--------------+</code></pre>\n\n<p>&nbsp;</p>','2015-11-13 21:45:56',0),(29,'MySql','Basic Syntax','Multiple Queries','<p>When doing multiple sql queries, it is possible the each query results in its own query result, so multi-query will output multiple results, in order to capture all these results in PHP, we can use following functions&nbsp;</p>\n\n<ul>\n	<li><span style=\"color:rgb(255, 0, 0)\"><span style=\"color:rgb(0, 168, 255)\">mysqli::multi_query():</span><strong> </strong></span>executes one or multiple queries which are concatenated by a semicolon(&#39;;&#39;).&nbsp;returns&nbsp;<span style=\"background-color:#e6de22; color:black\">FALSE</span>&nbsp;if the first statement failed. To <span style=\"color:#52bb5d\">retrieve subsequent errors</span> from other statements you have to call&nbsp;mysqli_next_result()&nbsp;first.</li>\n	<li><span style=\"color:rgb(255, 0, 0)\"><span style=\"color:rgb(0, 168, 255)\">mysqli::store_result():</span><strong> </strong></span>transfers the first result from buffered results of multi_query, return buffered result sets if success or <span style=\"background-color:#e6de22; color:black\">FALSE</span> if any error occurs</li>\n	<li><span style=\"color:rgb(255, 0, 0)\"><span style=\"color:rgb(0, 168, 255)\">mysqli::more_results():</span><strong> </strong></span>check if there are any more query results from multi_query, return TRUE if any or <span style=\"background-color:#e6de22; color:black\">FALSE</span> if none</li>\n	<li><span style=\"color:rgb(0, 168, 255)\">mysqli::next_result(): </span>prepare next result from multi_query, return TRUE on success or <span style=\"background-color:#e6de22; color:black\">FALSE</span> on failure</li>\n</ul>\n\n<p>The following snippets shows how to use them together</p>\n\n<pre>\n<code class=\"language-php\">/* execute multi query in object-oriented way*/\nif ($this-&gt;connection-&gt;multi_query($sql)) {\n  $return = [];\n  $n = 0;\n  $continue = true;\n  do {\n    //retrieve current result sets\n    $resultSet = $this-&gt;connection-&gt;store_result();\n    $return[$n] = $resultSet-&gt;fetch_all($returnType);\n    //free the memory used to buffer current result sets\n    $resultSet-&gt;free();\n    $n++;\n    //first, check if any more result set exist, if so, make the next result sets ready to be fetched\n    //second, check if any error in next result sets\n    if (!$this-&gt;connection-&gt;next_result()) {\n      if ($this-&gt;connection-&gt;errno) {\n        $m = $n + 1;\n        if ($m == 2) {\n          $whichSql = \"2nd\";\n        }elseif ($m == 3) {\n           $whichSql = \"3rd\";\n        }else{\n           $whichSql = $m.\"th\";\n        }\n        echo \"Error(\".$this-&gt;connection-&gt;errno.\") for $whichSql query statement: \".$this-&gt;connection-&gt;error.\"&lt;br&gt;\";\n      }\n      $continue = false;\n    }\n  } while ($continue);\n}else{\n   die(\"Error(\".$this-&gt;connection-&gt;errno.\"): \".$this-&gt;connection-&gt;error);\n}\n\n$empty = true;\nforeach ($return as $resultSet) {\n  if (count($resultSet)) {\n    $empty = false;\n  }\n}\nif (!$empty) {\n  return $return;\n}else{\n   die(\"No results found!&lt;br&gt;\");\n}</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>Trouble shooting:</strong></span></p>\n\n<p>When you run multi_query multiple times continuously, you have to ensure to store_result and free_result for every single query, otherwise after the first multi_query completed, the second multi_query will cause error like &quot;<span style=\"color:rgb(178, 34, 34)\"><em>Commands out of sync; you can&#39;t run this command now in your client code</em></span>&quot;</p>','2016-01-10 10:53:30',7),(30,'MySql','Function','Aggregate','<p>SQL aggregate functions return a single value, calculated from values in a column.</p>\n\n<p><span style=\"color:#B22222\"><strong>COUNT</strong></span></p>\n\n<pre>\n<code class=\"language-sql\">#count number of values in a column(NULL value will not be count)\nSELECT COUNT(column_name) FROM table_name;\n#count number of rows in a table\nSELECT COUNT(*) FROM table_name;\n#count number of unique values of a column\nSELECT COUNT(DISTINCT column_name) FROM table_name;</code></pre>\n\n<p>&nbsp;<span style=\"color:#B22222\"><strong>AVG</strong></span></p>\n\n<pre>\n<code class=\"language-sql\">#calculate average value of a column\nSELECT price, AVG(downloads) FROM fake_apps GROUP BY price;</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>MAX &amp; MIN</strong></span></p>\n\n<pre>\n<code class=\"language-sql\">#return largest value of a column\nSELECT MAX(downloads) FROM fake_apps;\n#return smallest value of a column\nSELECT MIN(downloads) FROM fake_apps;\n</code></pre>\n\n<p><span style=\"color:#B22222\">&nbsp;<strong>SUM(only work for numeric column)</strong></span></p>\n\n<pre>\n<code class=\"language-sql\">#return the total value of a numeric column\nSELECT SUM(downloads) FROM fake_apps;</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>HAVING(the &#39;WHERE&#39; for aggregate functions)</strong></span></p>\n\n<pre>\n<code class=\"language-sql\">#The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions\nSELECT category FROM notes GROUP BY category HAVING COUNT(DISTINCT title) &gt; 3;</code></pre>\n\n<p>&nbsp;</p>','2015-12-30 00:04:53',0),(31,'MySql','Function','Scalar','<p>SQL scalar functions return a single value, based on <span style=\"color:rgb(178, 34, 34)\"><strong>the input value including the output of aggregate functions</strong>.</span></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>UCASE &amp; UPPER</strong></span></p>\n\n<pre>\n<code class=\"language-sql\">#converts the value of a field to uppercase.\nSELECT UCASE(column_name) FROM table_name;\nSELECT UPPER(column_name) FROM table_name;\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>LCASE &amp; LOWER</strong></span></p>\n\n<pre>\n<code class=\"language-sql\">#converts the value of a field to lowercase.\nSELECT LCASE(column_name) FROM table_name;\nSELECT LOWER(column_name) FROM table_name;\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>MID , SUBSTR &amp; SUBSTRING</strong></span></p>\n\n<pre>\n<code class=\"language-sql\"># MID() SUBSTR() and SUBSTRING() are equivalent to extract part of the input\n# three parameters included, (column_name, start(starting from 1 not 0), length(optional))\nSELECT MID(title, 1, 5) FROM notes LIMIT 2;\nSELECT SUBSTRING(title, 1, 5) FROM notes LIMIT 2;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>&nbsp;LENGTH&nbsp;</strong></span></p>\n\n<p>Returns the length of the string&nbsp;str, measured in bytes. A <span style=\"color:#B22222\">multibyte character</span>(e.g. CJK characters)&nbsp;counts as multiple bytes. This means that for a string containing five 2-byte characters,&nbsp;LENGTH()&nbsp;returns&nbsp;10, whereas&nbsp;CHAR_LENGTH()returns&nbsp;5.</p>\n\n<pre>\n<code class=\"language-sql\">SELECT LENGTH(title) FROM notes ORDER BY LENGTH(title) DESC;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>CHAR_LENGTH</strong></span></p>\n\n<p>Returns the length of the string&nbsp;str, measured in characters. A multibyte character counts as a single character. This means that for a string containing five 2-byte characters,&nbsp;LENGTH()&nbsp;returns&nbsp;10, whereasCHAR_LENGTH()&nbsp;returns&nbsp;5.</p>\n\n<pre>\n<code class=\"language-sql\">SELECT CHAR_LENGTH(title) FROM notes ORDER BY CHAR_LENGTH(title) DESC;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>ROUND</strong></span></p>\n\n<pre>\n<code class=\"language-sql\">#The ROUND() function is used to round a numeric field to the number of decimals specified.\nSELECT ROUND(column_name,decimals) FROM table_name;</code></pre>\n\n<p>&nbsp;<span style=\"color:rgb(178, 34, 34)\"><strong>NOW</strong></span></p>\n\n<pre>\n<code class=\"language-sql\">#show the date and time running the NOW() function\nSELECT NOW();\n+---------------------+\n| NOW()               |\n+---------------------+\n| 2015-11-14 16:43:08 |\n+---------------------+</code></pre>\n\n<p>&nbsp;</p>','2015-12-10 21:58:23',3),(32,'MySql','Basic Syntax','Backup & Restore','<p><span style=\"color:rgb(178, 34, 34)\"><strong>MYSQLDUMP</strong></span></p>\n\n<ul>\n	<li>used to back up and restore data in system CMD terminal but not in mysql command line</li>\n	<li>it can back up table(s) and database(s) into one or more files containing queries to re-create the backup data.</li>\n	<li>it can backup in sql, CSV,. XML and other text formats with specified delimiters.</li>\n	<li>NOTE: no one is allowed write to database when you want to do the backup. One solution is to LOCK the table(s) you want to backup inside mysql command line to only leave READ rights for the tables. And open another terminal to do the backup. Finally release the LOCK.</li>\n	<li>use &gt; to specify the directory and file name which you want to use for backup file saving.</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. Backup a databases</span></p>\n\n<p>In the system CMD</p>\n\n<pre>\n<code class=\"language-bash\">mysqldump -u user_name -p user_password name_of_database &gt; name_of_backup_file.sql\n#and seems it is not need to lock the entire database before dump since mysql will do it automatically for you\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. Backup table(s)</span></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">First LOCK the table inside mysql command line</span></p>\n\n<ul>\n	<li>LOCK TABLES READ</li>\n</ul>\n\n<pre>\n<code class=\"language-sql\">-- READ means the session holding the lock can read but not write table1 and table2\n-- Other sessions can read the table without explicitly acquiring a READ lock.\n-- Multiple sessions can acquire a READ lock for the table at the same time.\n-- The session holding the lock can only access table 1 and table 2 but not other tables inside database1 or any other databases\nLOCK TABLES database1.table1, database1.table2 READ</code></pre>\n\n<ul>\n	<li>LOCK TABLES WRITE&nbsp;</li>\n</ul>\n\n<pre>\n<code class=\"language-sql\">-- WRITE means the session holding the lock can read and write table1 and table2\n-- Other sessions cannot access the table.\n-- Lock requests from other sessions will be blocked\n-- The session holding the lock can only access table 1 and table 2 but not other tables inside database1 or any other databases\nLOCK TABLES database1.table1, database1.table2 WRITE</code></pre>\n\n<p>Tables in the&nbsp;INFORMATION_SCHEMA&nbsp;database are an exception. They can be accessed without being locked explicitly even while a session holds table locks obtained with&nbsp;LOCK TABLES.</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">Then backup files in system CMD</span></p>\n\n<pre>\n<code class=\"language-bash\">mysqldump -u user_name -p user_password name_of_database name_of_table1 name_of_table2 &gt; name_of_backup_file.sql\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">Finally &nbsp;UNLOCK TABLES in the mysql command line</span></p>\n\n<pre>\n<code class=\"language-sql\">-- A session can release its locks explicitly with UNLOCK TABLES.\n-- LOCK TABLES will implicitly unlock tables which are locked already but not explicitly released yet\nUNLOCK TABLES;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3. Backup all databases(in bash shell)</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">mysqldump -u user_name -p user_password --all-database &gt; name_of_backup_file.sql\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>4. Restoring Data from Backup files(in bash shell)</strong></span></p>\n\n<p>Use keywords &quot;mysql&quot; and &lt; to do the restore</p>\n\n<ul>\n	<li>Restore entire set of databases</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">mysql -u user_name -p user_password &lt; all-database.sql\n</code></pre>\n\n<ul>\n	<li>Restore a specified database and specified tables of it</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">mysql -u user_name -p user_password -D name_of_database &lt; databse_backup_file.sql\nmysql -u user_name -p user_password -D name_of_database &lt; table_backup_file.sql</code></pre>\n\n<p><strong><span style=\"color:#B22222\">5. Backup database into csv</span></strong></p>\n\n<pre>\n<code class=\"language-sql\">mysqldump -u statsit_root -p --fields-terminated-by=\",\" --fields-enclosed-by=\'\"\' --fields-escaped-by=\'\' --no-create-db --no-create-info --tab=\'/tmp\' MMonitor_10910 mentions &gt; 10910_mentions.txt</code></pre>','2017-08-19 22:38:56',35),(33,'MySql','Basic Syntax','Intro','<p>SQL commands and keywords are case-insensitive!!!!!<br />\nAnd it is recommended to use uppercase<br />\nTable names are case-sensitive in Linux and OS X but not in Windows, however it is recommended to always use lowercase for names of tables and databases.</p>\n\n<p>Login to MySql client in terminal&nbsp;</p>\n\n<pre>\n<code class=\"language-bash\">#give username, password and database name(optional)\nmysql -h&lt;hostnmae/ip_address&gt; -P&lt;port_number&gt; -u&lt;username&gt; -p&lt;passwd&gt; database_name</code></pre>\n\n<p>Use &#39;c&#39;&nbsp;Cancel any uncomplete sql in mysql client</p>\n\n<pre>\n<code class=\"language-sql\">SHOW DATABA c;</code></pre>\n\n<p>&nbsp;</p>','2015-11-14 21:57:08',1),(34,'MySql','Basic Syntax','Database','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. Create a new database</strong></span></p>\n\n<p>Create via MySql client</p>\n\n<pre>\n<code class=\"language-sql\">CREATE DATABASE name_of_database;\n--which will grant user \'username\' with full access to the database and all its tables after you type the correct password\nGRANT ALL ON name_of_database.* TO \'username\'@\'localhost\' IDENTIFIED BY \'mypassword\';</code></pre>\n\n<p>Create directly from bash shell</p>\n\n<pre>\n<code class=\"language-bash\">#The user must have permission to create table\nshell&gt; mysqladmin -u root create name_of_database</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. Duplicate a old database</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">shell&gt; mysqldump db1 &gt; dump.sql\nshell&gt; mysqladmin -u root create db2\nshell&gt; mysql db2 &lt; dump.sql</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3. List all available databases</strong></span></p>\n\n<pre>\n<code class=\"language-sql\">SHOW DATABASES;</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>4. Use a specific database for further opertion on tables inside the database</strong></span></p>\n\n<pre>\n<code class=\"language-sql\">USE name_of_database;</code></pre>\n\n<p><strong><span style=\"color:#B22222\">5. Delete a database</span></strong></p>\n\n<pre>\n<code class=\"language-sql\">DROP DATABASE name_of_database;</code></pre>\n\n<p>&nbsp;</p>','2015-11-14 18:27:40',9),(35,'MySql','Data Types','Text Type','<p><strong><span style=\"color:#B22222\">CHAR(size)</span></strong></p>\n\n<p>Holds a fixed length string (can contain letters, numbers, and special characters). The fixed size is specified in parenthesis. Can store up to 255 characters</p>\n\n<p><strong><span style=\"color:#B22222\">VARCHAR(size)</span></strong></p>\n\n<p>Holds a variable length string (can contain letters, numbers, and special characters). The maximum size is specified in parenthesis. Can store up to 255 characters.&nbsp;Note:&nbsp;If you put a greater value than 255 it will be converted to a TEXT type</p>\n\n<p><strong><span style=\"color:#B22222\">TINYTEXT</span></strong></p>\n\n<p>Holds a string with a maximum length of 255 characters</p>\n\n<p><strong><span style=\"color:#B22222\">TEXT</span></strong></p>\n\n<p>Holds a string with a maximum length of 65,535 characters</p>\n\n<p><strong><span style=\"color:#B22222\">BLOBFor BLOBs (Binary Large OBjects). </span></strong></p>\n\n<p>Holds up to 65,535 bytes of data</p>\n\n<p><strong><span style=\"color:#B22222\">MEDIUMTEXT</span></strong></p>\n\n<p>Holds a string with a maximum length of 16,777,215 characters</p>\n\n<p><strong><span style=\"color:#B22222\">MEDIUMBLOBFor BLOBs (Binary Large OBjects). </span></strong></p>\n\n<p>Holds up to 16,777,215 bytes of data</p>\n\n<p><strong><span style=\"color:#B22222\">LONGTEXT</span></strong></p>\n\n<p>Holds a string with a maximum length of 4,294,967,295 characters</p>\n\n<p><strong><span style=\"color:#B22222\">LONGBLOBFor BLOBs (Binary Large OBjects). </span></strong></p>\n\n<p>Holds up to 4,294,967,295 bytes of data</p>\n\n<p><strong><span style=\"color:#B22222\">ENUM(x,y,z,etc.)</span></strong></p>\n\n<p>Let you enter a list of possible values. You can list up to 65535 values in an ENUM list. If a value is inserted that is not in the list, a blank value will be inserted.</p>\n\n<p>Note:&nbsp;The values are sorted in the order you enter them.&nbsp;You enter the possible values in this format: ENUM(&#39;X&#39;,&#39;Y&#39;,&#39;Z&#39;)</p>\n\n<p><strong><span style=\"color:#B22222\">SET</span></strong></p>\n\n<p>Similar to ENUM except that SET may contain up to 64 list items and can store more than one choice</p>','2015-11-14 18:43:02',1),(36,'MySql','Data Types','Number Type','<p><span style=\"color:rgb(178, 34, 34)\">TINYINT(size)</span></p>\n\n<p>-128 to 127 normal. 0 to 255 UNSIGNED*. The maximum number of digits may be specified in parenthesis</p>\n\n<p><span style=\"color:#B22222\">BOOLEAN</span></p>\n\n<p>is equivalent to TINYINT(1)</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">SMALLINT(size)</span></p>\n\n<p>-32768 to 32767 normal. 0 to 65535 UNSIGNED*. The maximum number of digits may be specified in parenthesis</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">MEDIUMINT(size)</span></p>\n\n<p>-8388608 to 8388607 normal. 0 to 16777215 UNSIGNED*. The maximum number of digits may be specified in parenthesis</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">INT(size)</span></p>\n\n<p>-2147483648 to 2147483647 normal. 0 to 4294967295 UNSIGNED*. The maximum number of digits may be specified in parenthesis</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">BIGINT(size)</span></p>\n\n<p>-9223372036854775808 to 9223372036854775807 normal. 0 to 18446744073709551615 UNSIGNED*. The maximum number of digits may be specified in parenthesis</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">FLOAT(size,d)</span></p>\n\n<p>A small number with a floating decimal point. The maximum number of digits may be specified in the size parameter. The maximum number of digits to the right of the decimal point is specified in the d parameter</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">DOUBLE(size,d)</span></p>\n\n<p>A large number with a floating decimal point. The maximum number of digits may be specified in the size parameter. The maximum number of digits to the right of the decimal point is specified in the d parameter</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">DECIMAL(size,d)</span></p>\n\n<p>A DOUBLE stored as a string , allowing for a fixed decimal point. The maximum number of digits may be specified in the size parameter. The maximum number of digits to the right of the decimal point is specified in the d parameter</p>\n\n<p><strong>*The integer types have an extra option called UNSIGNED. Normally, the integer goes from an negative to positive value. Adding the UNSIGNED attribute will move that range up so it starts at zero instead of a negative number.</strong></p>','2015-11-14 18:48:57',4),(37,'MySql','Data Types','Date Type','<p><span style=\"color:#B22222\">DATE()</span></p>\n\n<p>A date. Format: YYYY-MM-DD</p>\n\n<p>Note:&nbsp;The supported range is from &#39;1000-01-01&#39; to &#39;9999-12-31&#39;</p>\n\n<p><span style=\"color:#B22222\">DATETIME()</span></p>\n\n<p>*A date and time combination. Format: YYYY-MM-DD HH:MI:SS</p>\n\n<p>Note:&nbsp;The supported range is from &#39;1000-01-01 00:00:00&#39; to &#39;9999-12-31 23:59:59&#39;</p>\n\n<p><span style=\"color:#B22222\">TIMESTAMP()</span></p>\n\n<p>*A timestamp. TIMESTAMP values are stored as the number of seconds since the Unix epoch (&#39;1970-01-01 00:00:00&#39; UTC). Format: YYYY-MM-DD HH:MI:SS</p>\n\n<p>Note:&nbsp;The supported range is from &#39;1970-01-01 00:00:01&#39; UTC to &#39;2038-01-09 03:14:07&#39; UTC</p>\n\n<p><span style=\"color:#B22222\">TIME()</span></p>\n\n<p>A time. Format: HH:MI:SS</p>\n\n<p>Note:&nbsp;The supported range is from &#39;-838:59:59&#39; to &#39;838:59:59&#39;</p>\n\n<p><span style=\"color:#B22222\">YEAR()</span></p>\n\n<p>A year in two-digit or four-digit format.</p>\n\n<p>Note:&nbsp;Values allowed in four-digit format: 1901 to 2155. Values allowed in two-digit format: 70 to 69, representing years from 1970 to 2069</p>\n\n<p><strong>*Even if DATETIME and TIMESTAMP return the same format, they work very differently. In an INSERT or UPDATE query, the TIMESTAMP automatically set itself to the current date and time. TIMESTAMP also accepts various formats, like YYYYMMDDHHMISS, YYMMDDHHMISS, YYYYMMDD, or YYMMDD.</strong></p>','2015-11-14 18:47:55',2),(38,'MySql','Basic Syntax','Table','<p><span style=\"color:rgb(178, 34, 34)\">1. Create or duplicate table&nbsp;</span></p>\n\n<pre>\n<code class=\"language-sql\">-- define each column inside the table with data type and other settings\nCREATE TABLE twitter (\n  mention_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n  username VARCHAR(30) NOT NULL,\n  content TEXT NOT NULL,\n  created DATETIME NOT NULL DEFAULT NOW(),\n  reach INT UNSIGNED NOT NULL,\n  favorite INT UNSIGNED NOT NULL,\n  is_retweet VARCHAR(10) NOT NULL,\n  is_reply VARCHAR(10) NOT NULL,\n  original_author VARCHAR(30),\n  original_tweet_id VARCHAR(30),\n  original_content TEXT,\n  originally_created DATETIME,\n  UNIQUE INDEX user (username, content)\n);\n\n--duplicate table \nCREATE TABLE new_table LIKE old_table</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1.1 Foreign Key&nbsp;</span></p>\n\n<ul>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">NOTE: the type of referenced key and foriegn key must be identical, otherwise will cause error when creating child table</span></li>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">Database Engine must be &#39;INNODB&#39; in order to use Foreign key correctly</span></li>\n</ul>\n\n<pre>\n<code class=\"language-sql\">-- Parent Table\nCREATE TABLE IF NOT EXISTS brand_accounts(\n	account_id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\n	account_name VARCHAR(100) NOT NULL	\n)\nENGINE = InnoDB\nDEFAULT CHARACTER SET = utf8\nCOLLATE = utf8_unicode_ci;\n\n-- Child Table with Foreign Key defined\nCREATE TABLE IF NOT EXISTS brand_markets(\n	set_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n	account_id INT NOT NULL,\n	market VARCHAR(100) NOT NULL,\n	sample_id INT UNSIGNED NOT NULL, \n	brand_labels TEXT NOT NULL,\n 	UNIQUE INDEX marketset (account_id, market),\n	FOREIGN KEY fk_brand_market(account_id)\n   	REFERENCES brand_accounts(account_id)\n   	ON UPDATE CASCADE\n   	ON DELETE RESTRICT\n)\nENGINE = InnoDB\nDEFAULT CHARACTER SET = utf8\nCOLLATE = utf8_unicode_ci</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. Rename or Delete a table</span></p>\n\n<pre>\n<code class=\"language-sql\">-- rename a table\nALTER TABLE old_name RENAME TO new_name;\n-- is equivalent to \nRENAME TABLE old_name TO new_name;\n-- remove a table\nDROP TABLE name_of_table;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3. Alter a table to add or remove a column or columns(only for ADD)</span></p>\n\n<pre>\n<code class=\"language-sql\">-- Add a new column\nALTER TABLE name_of_table ADD new_column column_definition;\n-- ADD a new column and place it as the first column of the table\nALTER TABLE name_of_table ADD new_column column_definition FIRST;\n-- ADD a new column and place it after an existing column\nALTER TABLE name_of_table ADD new_column column_definition AFTER old_column;\n-- ADD a batch of columns(FIRST or AFTER keywords are not valid in batch add mode)\nALTER TABLE name_of_table ADD (new_column1 column1_definition, new_column2 column2_definition,...);\n-- Remove a column(There is no DROP in a batch)\nALTER TABLE name_of_table DROP old_column;\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4. Change or Modify existing columns</span></p>\n\n<p>The difference between MODIFY and CHANGE is that CHANGE can rename the column but MODIFY cannot</p>\n\n<pre>\n<code class=\"language-sql\">-- you have to give the column definition no matter if you want to change the definition or not\n-- change name of a column without changing column definition\nALTER TABLE t1 CHANGE a b old_definition;\n-- change name of a column and column definition\nALTER TABLE t1 CHANGE a b new_definition;\n-- change column definition of a column but keep column name\nALTER TABLE t1 CHANGE a a new_definition;\n-- is equivalent to\nALTER TABLE t1 MODIFY a new_definition;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">5. Change or remove the default value of a column</span></p>\n\n<p>You do not need to give column definition when edit default value</p>\n\n<pre>\n<code class=\"language-sql\">-- edit default value\nALTER TABLE t1 ALTER a SET DEFAULT 10;\n-- remove default value\nALTER TABLE t1 ALTER a DROP DEFAULT;\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">6. Change the data type engine of a table</span></p>\n\n<pre>\n<code class=\"language-sql\">ALTER TABLE t1 ENGINE = MYISAM;\nALTER TABLE t1 ENGINE = InnoDB;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">7. Show columns of a table</span></p>\n\n<pre>\n<code class=\"language-sql\">DESC name_of_table;\n-- is equivalent to\nSHOW COLUMNS FROM name_of_table;\n--show table creation detail\nSHOW CREATE TABLE name_of_table;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">8. Create Indexes in a table</span></p>\n\n<pre>\n<code class=\"language-sql\">-- create index on a column\nALTER TABLE t1 ADD INDEX name_of_index (name_of_column);\n-- is equivalent to \nCREATE INDEX name_of_index ON t1 (name_of_column);\n-- create unique index on multiple columns\nALTER TABLE t1 ADD UNIQUE INDEX name_of_index (name_of_column1, name_of_column2, name_of_column3);\n-- is equivalent to \nCREATE UNIQUE INDEX name_of_index ON t1 (name_of_column1, name_of_column2, name_of_column3);\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">9. Alter table with enormous records</span></p>\n\n<p>When altering table including&nbsp;huge amount of records, if you can make sure that no update and changes to the table will occur during the table alteration, then you can simulate the MySql altering process manually to accelerate the speed.&nbsp;</p>\n\n<pre>\n<code class=\"language-sql\">CREATE TABLE newTblName LIKE oldTblName;\nALTER TABLE newTblName ADD (\nis_retweet TINYINT(1) DEFAULT 0,\nis_reply TINYINT(1) DEFAULT 0,\noriginal_author VARCHAR(50) DEFAULT NULL,\noriginal_post_id VARCHAR(50) DEFAULT NULL,\noriginal_content TEXT DEFAULT NULL,\noriginally_created DATETIME DEFAULT NULL\n);\nINSERT INTO newTblName (old_columns) SELECT SQL_NO_CACHE * FROM oldTblName;\nALTER TABLE oldTblName RENAME tmpTblName;\nALTER TABLE newTblName RENAME oldTblName;\nDROP TABLE tmpTblName;</code></pre>\n\n<p><span style=\"color:rgb(255, 0, 0)\"><strong>NOTE</strong></span>:</p>\n\n<p>In most cases,&nbsp;ALTER TABLE&nbsp;makes a temporary copy of the original table. MySQL waits for other operations that are modifying the table, then proceeds. It incorporates the alteration into the copy, deletes the original table, and renames the new one. While&nbsp;ALTER TABLE&nbsp;is executing, the original table is readable by other sessions. <span style=\"color:rgb(255, 0, 0)\">Updates and writes to the table that begin after the&nbsp;ALTER TABLE&nbsp;operation begins are stalled until the new table is ready, then are automatically redirected to the new table without any failed updates.</span> The temporary copy of the original table is created in the database directory of the new table. This can differ from the database directory of the original table for&nbsp;ALTER TABLE&nbsp;operations that rename the table to a different database.</p>','2016-11-29 19:49:44',52),(39,'MySql','Basic Syntax','INDEXES','<p>Index and unique are two completely different concepts.</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Indexes</span></strong><br />\nAn index is a hidden extra column holding the same data sorted with a pointer to your real data. Using an index you can</p>\n\n<ul>\n	<li>Quickly find a particular item</li>\n	<li>Quickly find a range of items&nbsp;(between x and y)</li>\n	<li>Save time when using&nbsp;order by&nbsp;because the items are presorted</li>\n	<li>Save time when using&nbsp;group by&nbsp;because group by needs to match identical items</li>\n</ul>\n\n<p>This is a normal index, it doesn&#39;t mind duplicate values, except for the primary key which is always unique.</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Unique (Index)</span></strong><br />\nIf you want to avoid duplicate values you can put a&nbsp;unique index&nbsp;on it. This will do all of the above, but add an extra check&nbsp;on every update and insert&nbsp;to check whether that values is not already in the database. If you try to insert a duplicate row on a unique column, MySQL will give an error and refuse your insert.<br />\n(you cannot make a row&nbsp;unique&nbsp;without using an index)</p>\n\n<ul>\n	<li>Use of indexes slows inserts and updates down.</li>\n	<li>Use of unique indexes slows then even more down.</li>\n</ul>\n\n<p>However indexes speed up&nbsp;select&nbsp;a lot, a whole lot.<br />\nUnique&nbsp;doesn&#39;t speed up anything it makes sure you don&#39;t accidentally insert a duplicate row.</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Difference between Primary Key and Unique key</span></strong></p>\n\n<ul>\n	<li>Behavior: Primary Key is used to identify a row (record) in a table whereas Unique-key is to prevent duplicate values in a column.</li>\n	<li>Nullability: Primary key does not include Null values whereas Unique-key can.</li>\n	<li>Existence: A table can have at most one primary key but can have multiple Unique-key.</li>\n	<li>Modifiability: You can&rsquo;t change or delete primary values but Unique-key values can.</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">When to use indexes and when not</span></strong><br />\nDon&#39;t put an index on every field. As stated above it will slow you&nbsp;inserts and&nbsp;updates down.<br />\nAlways put an index on join criteria. And seriously consider putting an index on column you use in&nbsp;where&nbsp;clauses a lot.<br />\nMySQL will refuse to use an index if 50% of your rows have the same value in a field, so forget about indexes on boolean&nbsp;(Y/N)&nbsp;fields, 99% of the time they will not work.<br />\n(Indexes in low cardinality fields are not useful)</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Always assign a primary key</span></strong><br />\nAlways assign a primary key on your table though. Preferably of type&nbsp;integer autoincrement. Ifyou&nbsp;don&#39;t assign a primary key, MySQL will assign a &#39;hidden&#39; primary key for you&nbsp;(of type integer autoincrement), but you cannot use the hidden PK to speed up quotes or identify your rows and there are a host of other slowness problems with hidden PK&#39;s which make them suck very badly.</p>\n\n<p>-- With a slight overhead in memory and disk space, you can create a card index for MYSQL to conduct lightning-fast searches.</p>\n\n<p>-- You can add index either when creating a table or anytime afterwards<br />\n-- You must decide what index type to use, which columns require an index, whether you need to search any data in the column, etc.</p>\n\n<hr />\n<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Adding index</span></strong></p>\n\n<pre>\n<code class=\"language-sql\">ALTER TABLE name_of_table ADD INDEX index_name (name_of_column(length));\n</code></pre>\n\n<p>-- length set the first number of characters to be only indexed.<br />\n-- length can be empty if it is a numerical value, for example, year<br />\n-- After adding the index, the value of KEY column will be &quot;MUL&quot;, which means the value might be occur multiple times, e.g. same name occurs more than 1 times in a column.</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Using &quot;CREAT INDEX&quot;</span></strong></p>\n\n<pre>\n<code class=\"language-sql\">CREATE INDEX name_of_index ON name_of_table (name_of_column(length));\n</code></pre>\n\n<p>-- &quot;CREAT INDEX&quot; keywords is equivalent to &quot;ALTER TABLE ADD INDEX&quot;<br />\n-- <span style=\"color:rgb(178, 34, 34)\">The only difference is that &quot;CREAT INDEX&quot; cannot create PRIMARY KEY index</span></p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. Adding indexes when creating tables</span></strong></p>\n\n<pre>\n<code class=\"language-sql\">CREATE TABLE name_of_table(\n name_of_column1 DATATYPE,\n INDEX index_name (name_of_column1(length)),\n);\n</code></pre>\n\n<p>-- It is a good choice to create index when creating a table, because creating index afterwards for a large table may take a very long time.&nbsp;</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">4. PRIMARY KEY</span></strong></p>\n\n<p>-- It is an index with unique value for each row, e.g. id, macaddress</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4.1 Creating PRIMARY KEY after the table creation</span></p>\n\n<p>-- NOTE that you must ensure the value of the chose column must be unique when you want to add primary key to it.<br />\n-- And if you want to create a new column as primary key, you have to first create it and set unique value for each of them, &nbsp;then to add primary key to it. Otherwise error will appear because MYSQL by default want to set NULL value for the column of each row when you create this column.</p>\n\n<pre>\n<code class=\"language-sql\">--create a new column and set primary key\nALTER TABLE name_of_table ADD name_of_column DATATYPE PRIMARY KEY; \n-- set primary key for existing column\nALTER TABLE name_of_table ADD PRIMARY KEY(name_of_column); </code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4.2 Creating PRIMARY KEY when creating a table&nbsp;</span></p>\n\n<pre>\n<code class=\"language-sql\">CREATE TABLE name_of_table(\n  name_of_column1 DATATYPE,\n  PRIMARY KEY(name_of_column),\n);\n</code></pre>\n\n<p><span style=\"color:#B22222\">4.3 Modify an existing PRIMARY KEY</span></p>\n\n<pre>\n<code class=\"language-sql\">ALTER TABLE brands_dashboard_filters DROP PRIMARY KEY, ADD PRIMARY KEY(brand_id, type, country, brand, label);</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">5. Creating a FULLTEXT index</span></strong></p>\n\n<pre>\n<code class=\"language-sql\">ALTER TABLE name_of_table ADD FULLTEXT INDEX index_name (name_of_column);\n</code></pre>\n\n<p>-- FULLTEXT search allows superfast search against entire columns.<br />\n-- FULLTEXT search is case-insensative.<br />\n-- It stores all words. However technically it has a pre-defined list(called stopwords) of keywords which are commonly used in any kind of text, and these key words will be igored when storing column data.<br />\n-- That is why FULLTEXT can provide much faster search than orginal data search.<br />\n-- FULLTEXT index only apply to CHAR, VARCHAR and TEXT data types.<br />\n-- Full-text indexes can be used with InnoDB or MyISAM tables<br />\n-- It is much faster to load your data into a table first and then create the FULLTEXT index then to load data into a table already has an existing FULLTEXT index.</p>\n\n<p>-- Creating a FULLTEXT index will not affect the existing index.</p>\n\n<p>-- Creating FULLTEXT index when creating the table:</p>\n\n<pre>\n<code class=\"language-sql\"> CREATE TABLE articles (\n    id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,\n    title VARCHAR(200),\n    body TEXT,\n    FULLTEXT INDEX index_name (title,body)\n ) </code></pre>\n\n<p>-- Note that this FULLTEXT index is created for &quot;title, body&quot; as a whole, if you want to create FULLTEXT index for them respectively, you need to create FULLTEXT index seperately for &quot;title&quot; and &quot;body&quot;</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">6. Create a Unique Index</span></strong></p>\n\n<pre>\n<code class=\"language-sql\">ALTER TABLE name_of_table ADD UNIQUE INDEX index_name (name_of_column1,name_of_column2,name_of_column3);\n-- is equivalent to\nCREATE UNIQUE INDEX name_of_index ON name_of_table (name_of_column1,name_of_column2,name_of_column3);</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">7. Remove index</span></strong></p>\n\n<pre>\n<code class=\"language-sql\">ALTER TABLE name_of_table DROP INDEX name_of_index;</code></pre>\n\n<p>&nbsp;</p>','2016-11-04 09:56:29',13),(40,'MySql','Basic Syntax','Basic Query','<p><span style=\"color:rgb(178, 34, 34)\">1. SELECT</span></p>\n\n<pre>\n<code class=\"language-sql\">-- select all columns from table\nSELECT * FROM name_of_table;\n-- select specified columns from table\nSELECT column1, column2 FROM name_of_table; </code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. COUNT</span></p>\n\n<pre>\n<code class=\"language-sql\">-- COUNT(*) used to count number of columns of a table\nSELECT COUNT(*) AS NUMBER_OF_ORDERS FROM name_of_table;\n-- COUNT(name_of_column) used to count the number of un-NULL values of a column\nSELECT COUNT(name_of_column) FROM name_of_table;\n-- COUNT(DISTINCT name_of_column) used to count the number of unique un-NULL values of a column\nSELECT COUNT(DISTINCT name_of_column) FROM name_of_table;\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3 DISTINCT</span></p>\n\n<pre>\n<code class=\"language-sql\">--used to pick up unrepeated values of a column to show\nSELECT DISTINCT name_of_column FROM name_of_table;\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4. DELETE and TRUNCAT</span></p>\n\n<pre>\n<code class=\"language-sql\">--used to delete rows of data from a table\nDELETE FROM name_of_table WHERE name_of_column=\"value_of_column\";\n--if you want to empty the data of a table(including to reset the auto_incremental column ), it is better to use TRUNCATE\nTRUNCATE name_of_table;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">5. WHERE</span></p>\n\n<pre>\n<code class=\"language-sql\">-- used to give the conditions to narrow down the scope of search\nSELECT name_of_column FROM name_of_table WHERE name_of_column=\"value_of_column\";</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">6. LIKE</span></p>\n\n<pre>\n<code class=\"language-sql\">-- used to give a pattern which the search result should match by using %\nSELECT name_of_column FROM name_of_table WHERE name_of_column LIKE \"%patten\";\n-- it searchs for the value with an ending pattern and no matter it has before the pattern, even nothing ahead.\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">7. LIMIT</span></p>\n\n<pre>\n<code class=\"language-sql\">-- used to LIMIT numbers of rows to show by using two parameters\n-- 1st parameter, if second on is skipped, then means how many rows to show from the first of the row\n-- 1st parameter, if second on defined, then means how many rows to skip from the first of the row\n-- 2nd parameter means how many rows to show starting from the one following the skipped ones\nSELECT * FROM name_of_table LIMIT n; -- show first n columns of the table\nSELECT * FROM name_of_table LIMIT m, n; -- skip m columns, and show the next n columns\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">8. MATCH AGAINST(IN NATURAL LANGUAGE MODE)</span></p>\n\n<pre>\n<code class=\"language-sql\">-- used to execute fulltext search for a column against a string given\nSELECT * FROM name_of_table WHERE MATCH(name_of_fulltext) AGAINST(\"search content\");\n-- name_of_fulltext is not necessary the name of a column. For example, if you add a fulltext index after a normal index for a column, then the name of the fulltext index will be different(e.g. customer_1) from the name of the column which is occupied by normal index(e.g. customer).\n-- the columns named in the MATCH() function must be the same columns included in some FULLTEXT index in your table\n-- It gives the result rows in an order based on a calculated relevance and similarity between the column and search text. It does not need the column data and search text match each other exactly.\n-- You can use following query to check the similarity value\nSELECT name_of_column, MATCH(name_of_fulltext_index) AGAINST(\"searching word\") AS relevance_score FROM name_of_table;\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">9. MATCH AGAINST IN BOOLEAN MODE</span></p>\n\n<pre>\n<code class=\"language-sql\">-- Differing from NATURAL LANGUAGE MODE which query based on the similarity, BOOLEAN MODE does the query to check if any word of the given search text exists in the column, the valid row will be filtered out as long as it has at least one keyword from the search text.\nSELECT name_of_column, MATCH(name_of_fulltext_index) AGAINST(\'searching word\' IN BOOLEAN MODE) AS relevance_score FROM name_of_table;\n--This relevance_score means how many words inside the search text appear in the column.\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">9.1 + - prefix</span></p>\n\n<pre>\n<code class=\"language-sql\">-- +prefix means this keyword must exist in the column to be returned as a valid row\n-- -prefix means this keyword must not exist in the column to be returned as a valid row\nSELECT * FROM name_of_table WHERE MATCH(name_of_column) AGAINST(\'+text -text2\' IN BOOLEAN MODE);\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">9.2 double quotes</span></p>\n\n<pre>\n<code class=\"language-sql\">-- text inside \"\" of the search words must exist in the column , and it even override the word in the stopword list. For example, \"map of china\" will be searched as \"map of china\" but not \"map china\".\nSELECT * FROM name_of_table WHERE MATCH(name_of_column) AGAINST(\'\"map of china\"\' IN BOOLEAN MODE);\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">10. UPDATE ... SET</span></p>\n\n<pre>\n<code class=\"language-sql\">-- used to update a field or fields of a column, so you need define both the new value for possible field(s) and use where to locate the row(s) you want to update, e.g.\nUPDATE name_of_table SET name_of_column1 = \"new value\", name_of_column2 = \'new_value\' WHERE some_column = \"some value\";\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">11. INSERT INTO ... VALUES()</span></p>\n\n<pre>\n<code class=\"language-sql\">-- to create a new row in the table\nINSERT INTO name_of_table VALUES (\'Kan\', \'Cong\', \'NK\', \'1983-03-08\', \'M\', \"20141225230111\", 2200.00);\n-- another way to create a new row with selected field\nINSERT INTO name_of_table (first_name, last_name, birth_date, sex) VALUES (\'Yu\', \'Yang\', \'1987-04-23\', \'F\');\n-- The INSERT INTO SELECT statement selects data from one table and inserts it into an existing table. Any existing rows in the target table are unaffected. e.g.\nINSERT INTO table2 SELECT * FROM table1; \n--copy only the columns we want to into another\nINSERT INTO Customers (CustomerName, Country) SELECT SupplierName, Country FROM Suppliers WHERE Country=\'Germany\';\nINSERT INTO filter_setting (name, lang, type) SELECT DISTINCT cat_name, language, type FROM keywords ORDER BY cat_id ASC;\nINSERT INTO filter_keywords (filter_id, keyword) SELECT s.filter_id, k.word FROM filter_setting s LEFT JOIN keywords k on s.name = k.cat_name ORDER BY s.filter_id ASC;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">12. ORDER BY</span></p>\n\n<pre>\n<code class=\"language-sql\">-- used to define how the returned rows are ordered based on ASC or DESC order of field data.\nSELECT * FROM name_of_table ORDER BY name_of_column ASC, name_of_column2 DESC;\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">13. GROUP BY</span></p>\n\n<pre>\n<code class=\"language-sql\">-- used to display the returned rows as groups based on specified column.\nSELECT author, COUNT(book_title) AS number_of_books FROM name_of_table GROUP BY author;\n-- then it will shows number of books written by each author.</code></pre>','2016-11-29 19:53:02',35),(41,'MySql','Basic Syntax','Advance Query','<p><span style=\"font-size:14px\"><strong><span style=\"color:rgb(178, 34, 34)\">1. GROUP_CONCAT</span></strong></span></p>\n\n<p>This is used to gather&nbsp;values of a column inside a group (GROUP BY results)</p>\n\n<pre>\n<code class=\"language-sql\">SELECT brand, GROUP_CONCAT(DISTINCT product) as products FROM product_table GROUP BY brand;</code></pre>\n\n<p>The result is truncated to the maximum length that is given by the&nbsp;<a href=\"http://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html#sysvar_group_concat_max_len\" style=\"margin-bottom: 5px;\"><code>group_concat_max_len</code></a>&nbsp;system variable, which has a default value of 1024 byte. The value can be set higher, although the effective maximum length of the return value is constrained by the value of&nbsp;<a href=\"http://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html#sysvar_max_allowed_packet\" style=\"margin-bottom: 5px;\"><code>max_allowed_packet</code></a>. The syntax to change the value of&nbsp;<a href=\"http://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html#sysvar_group_concat_max_len\" style=\"margin-bottom: 5px;\"><code>group_concat_max_len</code></a>&nbsp;at runtime is as follows, where&nbsp;<em><code>val</code></em>&nbsp;is an unsigned integer:</p>\n\n<pre>\n<code class=\"language-sql\">SET [GLOBAL | SESSION] group_concat_max_len = val;\n#for example\nSET @@session.group_concat_max_len = 150000;\nselect @@global.group_concat_max_len;\n+-------------------------------+\n| @@global.group_concat_max_len |\n+-------------------------------+\n|                          1024 |\n+-------------------------------+\nselect @@session.group_concat_max_len;\n+--------------------------------+\n| @@session.group_concat_max_len |\n+--------------------------------+\n|                         150000 |\n+--------------------------------+</code></pre>\n\n<p><span style=\"font-size:14px\"><span style=\"color:rgb(178, 34, 34)\"><strong>2.&nbsp;INSERT ... ON DUPLICATE KEY UPDATE</strong></span></span></p>\n\n<p>If you specify&nbsp;ON DUPLICATE KEY UPDATE, and a row is inserted that would cause a duplicate value in a&nbsp;UNIQUE&nbsp;index or&nbsp;PRIMARY KEY, MySQL performs an&nbsp;UPDATE&nbsp;of the old row.</p>\n\n<p>The&nbsp;ON DUPLICATE KEY UPDATE&nbsp;clause can contain multiple column assignments, separated by commas.</p>\n\n<pre>\n<code class=\"language-sql\">--how table looks before inserting, id is the auto_increment primary key\nselect * from ckeditor;\n+----+-------+---------+---------------------+--------+\n| id | title | content | datetime            | visits |\n+----+-------+---------+---------------------+--------+\n|  1 | test  | note 1  | 2015-11-23 17:57:09 |      1 |\n+----+-------+---------+---------------------+--------+\n--after inserting, now new row will be inserted, only update the old row\ninsert into ckeditor (id, title, content, datetime, visits) values (1, \'test\', \'note 1\', now(), 0) \non duplicate key update visits=visits+1;\nselect * from ckeditor;                                                                                                              \n+----+-------+---------+---------------------+--------+\n| id | title | content | datetime            | visits |\n+----+-------+---------+---------------------+--------+\n|  1 | test  | note 1  | 2015-11-23 17:57:09 |      2 |\n+----+-------+---------+---------------------+--------+\n--another example to have VALUES()statement after UPDATE\ninsert into ckeditor (id, title, content, datetime, visits) values (1, \'test\', \'note 1\', now(), 3)\non duplicate key update visits=values(visits)+values(id);\nselect * from ckeditor;                                                                                                              \n+----+-------+---------+---------------------+--------+\n| id | title | content | datetime            | visits |\n+----+-------+---------+---------------------+--------+\n|  1 | test  | note 1  | 2015-11-23 17:57:09 |      4 |\n+----+-------+---------+---------------------+--------+\n</code></pre>\n\n<p><span style=\"font-size:14px\"><strong><span style=\"color:rgb(178, 34, 34)\">3. REPLACE &amp; INSERT IGNORE</span></strong></span></p>\n\n<p>You can use&nbsp;REPLACE&nbsp;instead of&nbsp;INSERT&nbsp;to overwrite old rows.&nbsp;REPLACE&nbsp;is the counterpart to&nbsp;INSERT IGNORE&nbsp;in the treatment of new rows that contain unique key values that duplicate old rows: The new rows are used to <span style=\"color:rgb(178, 34, 34)\">replace the old rows(REPLACE)</span> rather than <span style=\"color:rgb(178, 34, 34)\">being discarded(INSERT IGNORE).</span></p>\n\n<p>Example of using <span style=\"color:rgb(178, 34, 34)\">REPLACE INTO</span></p>\n\n<pre>\n<code class=\"language-sql\">--before replacing\nselect * from ckeditor;                                                                                                              \n+----+-------+---------+---------------------+--------+\n| id | title | content | datetime            | visits |\n+----+-------+---------+---------------------+--------+\n|  1 | test  | note 1  | 2015-11-23 17:57:09 |      4 |\n+----+-------+---------+---------------------+--------+\n--do the replacing\nreplace into ckeditor (id, title, content, datetime, visits) values (1, \'test2\', \'note 2\', now(), 2);\n--after replacing the same row with id = 1\nselect * from ckeditor;\n+----+-------+---------+---------------------+--------+\n| id | title | content | datetime            | visits |\n+----+-------+---------+---------------------+--------+\n|  1 | test2 | note 2  | 2015-11-23 18:29:49 |      2 |\n+----+-------+---------+---------------------+--------+</code></pre>\n\n<p>Example of using INSERT IGNORE</p>\n\n<pre>\n<code class=\"language-sql\">select * from ckeditor;\n+----+-------+---------+---------------------+--------+\n| id | title | content | datetime            | visits |\n+----+-------+---------+---------------------+--------+\n|  1 | test3 | note 3  | 2015-11-23 19:02:26 |      3 |\n+----+-------+---------+---------------------+--------+\n--try to insert new row which has repeat the unique key of an old row\ninsert ignore into ckeditor (id, title, content, datetime, visits) values (1, \'test2\', \'note 2\', now(), 2);\n--the new row insert trying is discarded without affecting the old row\nselect * from ckeditor;\n+----+-------+---------+---------------------+--------+\n| id | title | content | datetime            | visits |\n+----+-------+---------+---------------------+--------+\n|  1 | test3 | note 3  | 2015-11-23 19:02:26 |      3 |\n+----+-------+---------+---------------------+--------+</code></pre>\n\n<p><span style=\"font-size:14px\"><span style=\"color:rgb(178, 34, 34)\"><strong>4. HAVING clause</strong></span></span></p>\n\n<ul>\n	<li>what if you want to use COUNT() or other aggregate functions&nbsp;as filter after GROUP BY clause? Just using HAVING clause</li>\n</ul>\n\n<p>For example</p>\n\n<pre>\n<code class=\"language-sql\">-- we need to find out any url groups which have more than 1 rows inside\nselect source, count(*), group_concat(mention_id) ids, date, username, url \nfrom MMonitor_10279.mentions where source = 3 group by url having count(*) &gt; 1;\n+--------+----------+-----------------+------------+------------+--------------------------------+\n| source | count(*) | ids             | date       | username   | url                            |                           \n+--------+----------+-----------------+------------+------------+--------------------------------+\n|      3 |        2 | 963248,963249   | 2014-06-17 | pepsiindia | https://www.youtube.com/watch1 |  \n|      3 |        2 | 1902025,1902024 | 2015-02-28 | pepsiindia | https://www.youtube.com/watch2 |       \n+--------+----------+-----------------+------------+------------+--------------------------------+</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">5. Delete from multiple Tables(MyISAM)</span></strong></p>\n\n<ul>\n	<li>For example, you want to delete records from multiple tables simutaneously based on primary keys of selected records&nbsp;of one table</li>\n</ul>\n\n<pre>\n<code class=\"language-sql\">delete t1, t2, t3 from mentions as t1 inner join mention_ids as t2 inner join mentions_pool as t3 \nwhere t1.mention_id = t2.mention_id and t1.mention_id = t3.mention_id and t1.username = \'someone\';\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>6. Select multiple tables</strong></span></p>\n\n<pre>\n<code class=\"language-sql\">SELECT (SELECT MAX(mention_id) FROM mentions) AS mentions_c, (SELECT MAX(mention_id) FROM \nmention_ids) AS mention_ids_c, (SELECT MAX(mention_id) FROM mentions_pool) AS mentions_pool_c;</code></pre>\n\n<p><strong><span style=\"color:#B22222\">7. Output results to file</span></strong></p>\n\n<pre>\n<code class=\"language-sql\">SELECT a,b,a+b INTO OUTFILE \'/tmp/result.txt\'\n  FIELDS TERMINATED BY \',\' OPTIONALLY ENCLOSED BY \'\"\'\n  LINES TERMINATED BY \'n\'\n  FROM test_table;</code></pre>\n\n<ul>\n	<li><span style=\"background-color:#FFEC00\">If the output path is a relative path, then the file will be saved under the table&#39;s folder</span></li>\n</ul>','2016-11-03 15:30:41',35),(42,'MySql','Function','Time & Date','<p><span style=\"color:rgb(178, 34, 34)\">1. TIME ZONE</span></p>\n\n<p>1.1 TIME ZONE Set</p>\n\n<pre>\n<code class=\"language-sql\">--With \"Super\" privilege, you can set global timezone for server by :\nSET GLOBAL time_zone = timezone;</code></pre>\n\n<pre>\n<code class=\"language-sql\">-- For each client connection, timezone for this session can be set by:\nSET time_zone = SYSTEM;\nSELECT NOW(), UTC_TIMESTAMP();\n+---------------------+---------------------+\n| NOW()               | UTC_TIMESTAMP()     |\n+---------------------+---------------------+\n| 2015-10-25 20:38:03 | 2015-10-25 18:38:03 |\n+---------------------+---------------------+\nSET time_zone = \'UTC\';\nSELECT NOW(), UTC_TIMESTAMP();\n+---------------------+---------------------+\n| NOW()               | UTC_TIMESTAMP()     |\n+---------------------+---------------------+\n| 2015-10-25 18:38:10 | 2015-10-25 18:38:10 |\n+---------------------+---------------------+\n</code></pre>\n\n<p>1.2 TIME ZONE Get</p>\n\n<pre>\n<code class=\"language-sql\">-- you can get current global and session time_zone by:\nSELECT @@global.time_zone, @@session.time_zone;</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>&nbsp;</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. Common Date and Time functions</span></p>\n\n<p>2.1 CONVERT_TZ(datetime, from_tz, to_tz)</p>\n\n<pre>\n<code class=\"language-sql\">SELECT CONVERT_TZ(NOW(), \'Europe/Helsinki\', \'Asia/Chongqing\');\n+--------------------------------------------------------+\n| CONVERT_TZ(NOW(), \'Europe/Helsinki\', \'Asia/Chongqing\') |\n+--------------------------------------------------------+\n| 2015-10-26 00:36:16                                    |\n+--------------------------------------------------------+\nSELECT CONVERT_TZ(NOW(), @@session.time_zone, \'Asia/Chongqing\');\n+----------------------------------------------------------+\n| CONVERT_TZ(NOW(), @@session.time_zone, \'Asia/Chongqing\') |\n+----------------------------------------------------------+\n| 2015-10-26 01:15:12                                      |\n+----------------------------------------------------------+</code></pre>\n\n<p>2.2 CURRENT_DATE and CURRENT_DATE() are synonyms for CURDATE()</p>\n\n<pre>\n<code class=\"language-sql\">-- it shows the year, month and day in both string or number format\nSELECT CURDATE();\n+------------+\n| CURDATE()  |\n+------------+\n| 2015-10-25 |\n+------------+\nSELECT CURDATE() + 0;\n+---------------+\n| CURDATE() + 0 |\n+---------------+\n|      20151025 |\n+---------------+</code></pre>\n\n<p>2.3 CURRENT_TIME and CURRENT_TIME() are synonyms for CURTIME()</p>\n\n<pre>\n<code class=\"language-sql\">-- it shows the hour, minute and second in both string or number format\nSELECT CURTIME();\n+-----------+\n| CURTIME() |\n+-----------+\n| 18:43:32  |\n+-----------+\nSELECT CURTIME() + 0;\n+---------------+\n| CURTIME() + 0 |\n+---------------+\n|        184336 |\n+---------------+</code></pre>\n\n<p>2.4 CURRENT_TIMESTAMP and CURRENT_TIMESTAMP() are synonyms for NOW()</p>\n\n<pre>\n<code class=\"language-sql\">-- it shows both CURDATE() AND CURTIME() in both string or number format\nSELECT NOW();\n+---------------------+\n| NOW()               |\n+---------------------+\n| 2015-10-25 18:45:01 |\n+---------------------+\nSELECT NOW() + 0;\n+----------------+\n| NOW() + 0      |\n+----------------+\n| 20151025184505 |\n+----------------+</code></pre>\n\n<p>2.5 SYSDATE()</p>\n\n<pre>\n<code class=\"language-sql\">-- it returns current date and time, but differs from NOW() which always returns the time when it was executed the first time in a sql statement, but SYSDATE() will return the time when it is executed, e.g.\nSELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2015-10-25 18:54:14 |        0 | 2015-10-25 18:54:14 |\n+---------------------+----------+---------------------+\nSELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2015-10-25 18:54:31 |        0 | 2015-10-25 18:54:33 |\n+---------------------+----------+---------------------+</code></pre>\n\n<p>2.6 UTC TIMESTAMP</p>\n\n<pre>\n<code class=\"language-sql\">-- it converts current system time into UTC time\nSELECT NOW() AS \'Helsinki(UTC+2:00)\', UTC_TIMESTAMP() AS UTC;\n+---------------------+---------------------+\n| Helsinki(UTC+2:00)  | UTC                 |\n+---------------------+---------------------+\n| 2015-10-25 20:14:13 | 2015-10-25 18:14:13 |\n+---------------------+---------------------+</code></pre>\n\n<p>2.7 UNIX_TIMESTAMP, UNIX_TIMESTAMP(dateitme), FROM_UNIXTIME()</p>\n\n<pre>\n<code class=\"language-sql\">-- UNIX_TIMESTAMP returns current time in seconds since \'1970-01-01 00:00:00\' UTC\nSELECT UNIX_TIMESTAMP();\n+------------------+\n| UNIX_TIMESTAMP() |\n+------------------+\n|       1445798485 |\n+------------------+\n-- UNIX_TIMESTAMP(datetime) returns the given date time in seconds since \'1970-01-01 00:00:00\' UTC\nSELECT UNIX_TIMESTAMP(\'2015-10-25 20:41:25\');\n+---------------------------------------+\n| UNIX_TIMESTAMP(\'2015-10-25 20:41:25\') |\n+---------------------------------------+\n|                            1445798485 |\n+---------------------------------------+\n-- FROM_UNIXTIME will converts unix timestamp seconds(UTC based) into date time format based on system timezone\nSELECT FROM_UNIXTIME(1445798485);\n+---------------------------+\n| FROM_UNIXTIME(1445798485) |\n+---------------------------+\n| 2015-10-25 20:41:25       |\n+---------------------------+\n</code></pre>\n\n<p>&nbsp;</p>','2015-11-14 21:42:26',13),(43,'MySql','Basic Syntax','User Control','<h4><span style=\"color:rgb(178, 34, 34)\"><strong>User control mainly includes two perspectives:</strong></span></h4>\n\n<ul>\n	<li>\n	<p><span style=\"background-color:white\">Give specific user access to the database with specified grants</span></p>\n	</li>\n	<li>\n	<p>Control which host can access to the database with specified username</p>\n	</li>\n</ul>\n\n<h4><span style=\"color:rgb(178, 34, 34)\"><strong>&nbsp;User detail is saved in table mysql.user:</strong></span></h4>\n\n<pre>\n<code class=\"language-sql\">select host, user, password, grant_priv from mysql.user order by user desc, host desc;\n-- Grant_priv(Y or N) will show if the user can grant permissions to other users</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Check who is the current user accessing the database</span></strong></p>\n\n<pre>\n<code class=\"language-sql\">SELECT CURRENT_USER();</code></pre>\n\n<h4>&nbsp;</h4>\n\n<h4><span style=\"color:rgb(178, 34, 34)\"><strong>1. Create New User</strong></span></h4>\n\n<h4>In MySQL, new user creation needs to set three parameters:</h4>\n\n<ul>\n	<li>\n	<p><span style=\"color:rgb(178, 34, 34)\">Username</span>: the name to identify a user. Not necessary to be&nbsp;unique. It can be empty by using &#39;%&#39; or &#39;&#39;,&nbsp;e.g. <span style=\"color:rgb(178, 34, 34)\">&#39;%&#39;@&#39;hostname&#39;, </span>which means any username is accepted when the request is from the &#39;hostname&#39;<span style=\"color:rgb(178, 34, 34)\">.</span></p>\n	</li>\n	<li>\n	<p><span style=\"color:rgb(178, 34, 34)\">Host</span>: the host name or host IP which can access the database together with the username defined at first step. It can be empty(&#39;&#39; or &#39;%&#39;) which means any host&nbsp;is able to access the DB via this username,&nbsp;e.g. <span style=\"color:rgb(178, 34, 34)\">&#39;username&#39;@&#39;&#39;</span>.</p>\n	</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">Password</span>: the key used to identify a user</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-sql\">CREATE USER \'username\'@\'localhost\' IDENTIFIED BY \'password\';\n--explicitely define the password when create a new user.</code></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. Grant Permission to Users</strong></span></p>\n\n<p>Only the&nbsp;user who has <span style=\"color:rgb(178, 34, 34)\">&#39;Grant_priv&#39; is able to grant permissions</span> to other users. For example:</p>\n\n<pre>\n<code class=\"language-sql\">GRANT ALL ON *.* TO \'username\'@\'localhost\';\n--give all privileges of all databases for the user.\n\nFLUSH PRIVILEGES;\n--to refresh the database to make the privileges update valid.\n\nSHOW GRANTS FOR \'username\'@\'localhost\';\n--to check the privileges of the user.</code></pre>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">MySQL does not support wildcards in user names</span>. To refer to an anonymous user, specify an account with an empty user name with the&nbsp;GRANT statement:</p>\n\n<pre>\n<code class=\"language-sql\">GRANT ALL ON test.* TO \'\'@\'localhost\' ...;</code></pre>\n\n<p>In this case, any user who connects from the local host with the correct password for the anonymous user will be permitted access, with the privileges associated with the anonymous-user account.</p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3. Drop User</strong></span></p>\n\n<pre>\n<code class=\"language-sql\">DROP USER \'username\'@\'hostname\';</code></pre>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">4. MAX_USER_CONNECTIONS</span></strong></p>\n\n<ul>\n	<li>It is used to limit the simuteneous connection from the same &#39;username&#39;@&#39;hostname&#39;.</li>\n	<li>max_user_connections value can be set globally or session-wise (user-specific). By default, global value equals to 0 which means no limit.</li>\n</ul>\n\n<p><span style=\"background-color:rgb(122, 255, 145)\">Check max_user_connections settings</span></p>\n\n<pre>\n<code class=\"language-sql\">show global variables like \'%max_user_connections%\';\n+----------------------+-------+\n| Variable_name        | Value |\n+----------------------+-------+\n| max_user_connections | 0     |\n+----------------------+-------+</code></pre>\n\n<pre>\n<code class=\"language-sql\">show session variables like \'%max_user_connections%\';\n+----------------------+-------+\n| Variable_name        | Value |\n+----------------------+-------+\n| max_user_connections | 0     |\n+----------------------+-------+</code></pre>\n\n<pre>\n<code class=\"language-sql\">select user, host, max_user_connections from mysql.user where user = \'counterall\';\n+------------+--------------+----------------------+\n| user       | host         | max_user_connections |\n+------------+--------------+----------------------+\n| counterall | localhost    |                    0 |\n| counterall | 192.168.0.%  |                    0 |\n| counterall | 192.168.0.99 |                    1 |\n+------------+--------------+----------------------+</code></pre>\n\n<p><span style=\"background-color:rgb(122, 255, 145)\">modify setting against specific user</span></p>\n\n<pre>\n<code class=\"language-sql\">ALTER USER \'counterall\'@\'localhost\' WITH MAX_USER_CONNECTIONS 5</code></pre>\n\n<ul>\n	<li>You must have &#39;Create User&#39; privilege to do so.</li>\n</ul>\n\n<p>If it does not work for some reason, then you can try to modify the configuration table directly</p>\n\n<pre>\n<code class=\"language-sql\">UPDATE mysql.user SET max_user_connections = 0 WHERE user = \'counterall\' AND host = \'localhost\';</code></pre>','2018-03-27 06:37:49',16),(44,'MySql','Basic Syntax','Char_Set & Collation','<p><span style=\"color:#B22222\"><strong>Difference between CHARACTER SET and COLLATION</strong></span></p>\n\n<ul>\n	<li>A character encoding is a way to encode characters so that they fit in memory. That is, if the charset is ISO-8859-15, the euro symbol, &euro;, will be encoded as 0xa4, and in UTF-8, it will be 0xe282ac.&nbsp;</li>\n	<li>The collation is how to compare characters, it can be simply thought of as sort order, e.g. how to sort the query result, in latin9, there are letters as e &eacute; &egrave; &ecirc; f, if sorted by their binary representation, it will go e f &eacute; &ecirc; &egrave; but if the collation is right, you&#39;ll have them in the order you thought they would be, which is all of e &eacute; &egrave; &ecirc; are equal, and then f.</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>&nbsp;</p>\n\n<p><span style=\"color:#B22222\"><strong>We can modify the character set and collation used by database, table and single column by following command:</strong></span></p>\n\n<pre>\n<code class=\"language-sql\">-- for database, using utf8 as an example\nALTER DATABASE databasename CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n-- for table, using utf8 as an example\nALTER TABLE tablename CONVERT TO CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n-- for column, using utf8 as an example\n-- remember to set the datatype when do the modification\n-- and seems the full-text indexed column cannot be modified before removing the index\nALTER TABLE news MODIFY title varchar(128) CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n-- show available character set and collation, using gb as example\nSHOW COLLATION LIKE \"gb%\";\nSHOW CHARACTER SET LIKE \"gb%\";\n-- Show gloabl settings about character set and collation\nSHOW VARIABLES LIKE \"colla%\";\nSHOW VARIABLES LIKE \"char%\";\n</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>&nbsp;</p>\n\n<p><span style=\"color:#B22222\"><strong>Change the global settings about character set and collation</strong></span></p>\n\n<p>In the my.cnf file [mysqld] section, add following settings:</p>\n\n<ul>\n	<li>skip-character-set-client-handshake # used to ignore the charset info send from client</li>\n	<li>collation-server=utf8_unicode_ci # set global server collation</li>\n	<li>character-set-server=utf8 # set global server charset</li>\n</ul>\n\n<p>In the my.cnf file [client] section, add following settings:</p>\n\n<ul>\n	<li>default-character-set=utf8 # set character set for client</li>\n</ul>\n\n<p>Finally reset the mysql server to make changes valid, ubuntu as an example:</p>\n\n<pre>\n<code class=\"language-bash\">shell&gt; sudo service mysql restart\n</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>&nbsp;</p>\n\n<p><strong><span style=\"color:#B22222\">Difference between utf8_unicode_ci and utf8_general_ci(used by default in mysql)</span></strong></p>\n\n<p>NOTE: in new versions of MySQL use utf8mb4, rather than utf8, which is the same UTF-8 data format with same performance but previously only accepted the first 65,536 Unicode characters.</p>\n\n<p>1. Accuracy:</p>\n\n<ul>\n	<li>utf8mb4_unicode_ci is based on the Unicode standard for sorting and comparison, which sorts accurately in a very wide range of languages.</li>\n	<li>utf8mb4_general_ci fails to implement all of the Unicode sorting rules, which will result in undesirable sorting in some situations, such as when using particular languages or characters.</li>\n</ul>\n\n<p>2. Performance:</p>\n\n<ul>\n	<li>utf8mb4_general_ci is faster at comparisons and sorting, because it takes a bunch of performance-related shortcuts.</li>\n	<li>On modern servers, this performance boost will be all but negligible. It was devised in a time when servers had a tiny fraction of the CPU performance of today&#39;s computers.</li>\n	<li>utf8mb4_unicode_ci, which uses the Unicode rules for sorting and comparison, employs a fairly complex algorithm for correct sorting in a wide range of languages and when using a wide range of special characters. These rules need to take into account language-specific conventions; not everybody sorts their characters in what we would call &#39;alphabetical order&#39;.</li>\n</ul>\n\n<p>3. Conclusion:<br />\nThere is almost certainly no reason to use utf8mb4_general_ci anymore, as we have left behind the point where CPU speed is low enough that the performance difference would be important. Your database will almost certainly be limited by other bottlenecks than this.</p>\n\n<p>&nbsp;</p>','2015-11-14 22:05:10',1),(45,'PHP','Functions','Mail()','<p>Use mail() to send email in PHP script. Be sure to set the mail server ready, and for unix-like server&nbsp;in the php.ini, set as follows, if not with a -t flag, you might get error message&quot;fatal: Recipient addresses must be specified on the command line or via the -t option&quot;.</p>\n\n<pre>\n<code class=\"language-ini\">sendmail_path = /usr/sbin/sendmail -t</code></pre>\n\n<p>Sample snippets of using mail()&nbsp;</p>\n\n<pre>\n<code class=\"language-php\">// multiple recipients\n$to  = &#39;aidan@example.com&#39; . &#39;, &#39;; // note the comma\n$to .= &#39;wez@example.com&#39;;\n\n// subject\n$subject = &#39;Birthday Reminders for August&#39;;\n\n// message\n$message = &#39;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Birthday Reminders for August&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Here are the birthdays upcoming in August!&lt;/p&gt;\n  &lt;table&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Person&lt;/th&gt;&lt;th&gt;Day&lt;/th&gt;&lt;th&gt;Month&lt;/th&gt;&lt;th&gt;Year&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Joe&lt;/td&gt;&lt;td&gt;3rd&lt;/td&gt;&lt;td&gt;August&lt;/td&gt;&lt;td&gt;1970&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Sally&lt;/td&gt;&lt;td&gt;17th&lt;/td&gt;&lt;td&gt;August&lt;/td&gt;&lt;td&gt;1973&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&#39;;\n\n// header(optional)\n$headers   = array();\n$headers[] = &quot;MIME-Version: 1.0&quot;;\n$headers[] = &quot;Content-type: text/html; charset=iso-8859-1&quot;;\n$headers[] = &quot;From: Sender Name &lt;sender@domain.com&gt;&quot;;\n$headers[] = &quot;Cc: birthdayarchive@example.com&quot;;\n$headers[] = &quot;Bcc: JJ Chong &lt;bcc@domain2.com&gt;&quot;;\n$headers[] = &quot;Reply-To: Recipient Name &lt;receiver@domain3.com&gt;&quot;;\n$headers[] = &quot;Subject: {$subject}&quot;;\n$headers[] = &quot;X-Mailer: PHP/&quot;.phpversion();\n\nmail($to, $subject, $message, implode(&quot;rn&quot;, $headers));</code>\n</pre>','2016-01-06 19:21:59',2),(46,'PHP','Array Functions','Bulk Operation','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. array_values($array)&nbsp;</strong></span></p>\n\n<ul>\n	<li>returns all the values from the&nbsp;array&nbsp;and indexes the array numerically.</li>\n	<li>it can also be used to reindex all elements numerically after unset() some elements inside the array</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. asort($array, $sort_flag) or arsort($array, $sort_flag)</span></strong></p>\n\n<ul>\n	<li>Sort an array based on element values(asc when asort, desc when arsort)&nbsp;and maintain index association</li>\n	<li>sort($array, $sort_flag) will do sorting as well but abandon original indexes</li>\n	<li>Returns&nbsp;TRUE&nbsp;on success or&nbsp;FALSE&nbsp;on failure.</li>\n	<li>$sort_flag is optional, you can have usually four:\n	<ul>\n		<li>\n		<p>SORT_REGULAR(default) - compare items normally (don&#39;t change types)</p>\n		</li>\n		<li>\n		<p>SORT_NUMERIC&nbsp;- compare items numerically</p>\n		</li>\n		<li>\n		<p>SORT_STRING&nbsp;- compare items as strings</p>\n		</li>\n		<li>\n		<p>SORT_LOCALE_STRING&nbsp;- compare items as strings, based on the current locale.</p>\n		</li>\n	</ul>\n	</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3. array_flip($array)</strong></span>&nbsp;</p>\n\n<ul>\n	<li>Exchanges all keys with their associated values in an array</li>\n	<li>Returns the flipped array on success and&nbsp;NULL&nbsp;on failure.</li>\n	<li>Note that if some values of the orignal array repeat, then only the last element of these repeats will be kept after doing array_flip.</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">// A good example to use asort and array_flip together to order a set of elements that the key is the name of element and value is the attribute to order\nasort($row_count);\n// in case there are same values shared by different elements\n$n = 0;\nforeach ($row_count as $key =&gt; $value) {\n  $row_count[$key] = $n;\n  $n++;\n}\n$dbArray = array_flip($row_count);\nunset($row_count);\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>4. array_merge($array1, $array2, ...)</strong></span></p>\n\n<ul>\n	<li>Merge one or more arrays and return the merged array</li>\n	<li>If the input arrays <span style=\"color:#00A8FF\">have the same string keys, then the later value for that key will overwrite the previous one. </span>If, however, <span style=\"color:#52bb5d\">the arrays contain numeric keys, the later value will&nbsp;not&nbsp;overwrite the original value, but will be appended</span></li>\n	<li>Values in the input array with numeric keys will be renumbered with incrementing keys starting from zero in the result array.</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>5. array_unique($array, $sort_flag)</strong></span></p>\n\n<ul>\n	<li>Removes duplicate values from an array</li>\n	<li>Returns a new array without duplicate values</li>\n	<li>Keys are preserved</li>\n	<li>array_unique()&nbsp;sorts the values treated as string at first, then will keep the first key(usually the key of last found element with the same value) encountered for every value, and ignore all following keys. It does not mean that the key of the first related value from the unsorted&nbsp;array&nbsp;will be kept.</li>\n	<li>$sort_flag is the same as in <span style=\"color:rgb(178, 34, 34)\"><strong>asort()</strong></span></li>\n</ul>','2016-01-13 16:09:02',3),(47,'Linux','Commands','Nohup + Tail','<p><span style=\"color:#B22222\"><strong>nohup</strong></span> is used to execute command regardless of any hung-up signals sent from terminal, e.g. exit a ssh terminal. This is very useful:</p>\n\n<ul>\n	<li>You have a unstable ssh connection or do&nbsp;not want to keep the terminal alive when&nbsp;running command lasting very long time</li>\n	<li>with &#39;<span style=\"color:#B22222\"><strong>&amp;</strong></span>&#39; tail appended, the command run by nohup can even be placed into background, i.e. you can do other tasks in the terminal</li>\n	<li>all stdout will be transfer to a file named &#39;<span style=\"color:#B22222\"><strong>nohup.out</strong></span>&#39;</li>\n</ul>\n\n<p><span style=\"color:#B22222\"><strong>tail</strong></span>&nbsp;with the <strong><span style=\"color:#B22222\">-f</span></strong> flag with &#39;<span style=\"color:#B22222\"><strong>&amp;</strong></span>&#39; tail appended&nbsp;is used to keep tracking the update appended to the end of a file. Since it is running in background, you can use terminal without disturb, once a update in a file occurs, update will be put to terminal by <span style=\"color:#B22222\"><strong>tail</strong></span>. And you can go back to work in terminal by just clicking &#39;enter&#39;.</p>\n\n<p>So we can use <strong><span style=\"color:#B22222\">tail</span></strong>&nbsp;after <span style=\"color:#B22222\"><strong>nohup</strong></span> to keep tracking the update in <strong><span style=\"color:#B22222\">nohup.out</span></strong> and print it to terminal&nbsp;</p>\n\n<pre>\n<code class=\"language-bash\"># run nohup task in background\nnohup php script.php &amp;\n# use tail to track changes in nohup.out\ntail -f nohup.out &amp;\n# list all background tasks\njobs -l\n# then exit the ssh terminal\nexit\n# ssh back to server and check if the nohup task is still running\nps -ef | grep \'script.php\'\n</code></pre>\n\n<p>&nbsp;</p>','2015-11-21 20:08:19',4),(48,'Linux','Commands','Fg + Bg','<p><span style=\"color:#B22222\"><strong>fg [job id]:&nbsp;</strong></span></p>\n\n<ul>\n	<li>Send job to foreground</li>\n	<li>&#39;job id&#39; is optional,&nbsp;If no job is specified, the last job to be used is put into the foreground</li>\n</ul>\n\n<p><span style=\"color:#B22222\"><strong>bg [job id]:&nbsp;</strong></span></p>\n\n<ul>\n	<li>Send job to background</li>\n	<li>&#39;job id&#39; is optional,&nbsp;If no job is specified, the last job to be used is put into the background</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\"># execute two background tasks\ntail -f success_db.log &amp;\ntail -f desc_error_db.log &amp;\n# list all background jobs\njobs -l\n[1]- 72413 Running                 tail -f success_db.log &amp;\n[2]+ 72424 Running                 tail -f desc_error_db.log &amp;\n# put one job back to foreground without specifying job id\nfg\ntail -f desc_error_db.log\n# put one job back to foreground with specified job id\nfg 1\ntail -f success_db.log\n# ctrl+z to suspend the foreground job\n^Z\n[1]+  Stopped                 tail -f success_db.log\n# to resume the suspended task and put it into background\nbg\n[1]+ tail -f success_db.log &amp;\n# list all background jobs\njobs -l\n[1]- 72413 Running                 tail -f success_db.log &amp;\n[2]+ 72424 Running                 tail -f desc_error_db.log &amp;\n# get job you want to terminate to the foreground\nfg 2\ntail -f desc_error_db.log\n# ctrl+c to terminate the job\n^C\n# list left background jobs\njobs -l\n[1]+ 72413 Running                 tail -f success_db.log &amp;</code></pre>\n\n<p>&nbsp;</p>','2015-11-21 21:02:01',8),(49,'PHP','Predefined Variables','$argc & $argv','<p><span style=\"color:rgb(178, 34, 34)\"><strong>$argc</strong></span></p>\n\n<ul>\n	<li>Define the number of arguments passed to script when running in CLI</li>\n	<li>The script&#39;s filename is always passed as an argument to the script, therefore the minimum value of&nbsp;$argc&nbsp;is&nbsp;1</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>$argv&nbsp;</strong></span></p>\n\n<ul>\n	<li>Array of arguments passed to script&nbsp;when running in CLI</li>\n	<li>The first argument&nbsp;$argv[0]&nbsp;is always the name of the script path</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>Example</strong></span>:&nbsp;</p>\n\n<pre>\n<code class=\"language-bash\"># run script in command line\nphp script.php 1 hello false\n</code></pre>\n\n<p>&nbsp;And inside the script.php run</p>\n\n<pre>\n<code class=\"language-php\">var_dump($argv);</code></pre>\n\n<p>Then you will get</p>\n\n<pre>\n<code class=\"language-bash\">array(4) {\n  [0]=&gt;\n  string(10) \"script.php\"\n  [1]=&gt;\n  string(1) \"1\"\n  [2]=&gt;\n  string(5) \"hello\"\n  [3]=&gt;\n  string(5) \"false\"\n}</code></pre>','2017-03-20 10:43:15',16),(50,'PHP','Folder And Files','Delete','<p><strong><span style=\"color:#B22222\">unlink($filename):</span></strong> delete a file</p>\n\n<p>Deleted a large file but seeing no increase in free space or decrease of disk usage? Using UNIX or other POSIX OS?<br />\nThe unlink() is not about removing file, it&#39;s about removing a file name. The manpage says: ``unlink - delete a name and possibly the file it refers to&#39;&#39;.<br />\nMost of the time a file has just one name -- removing it will also remove (free, deallocate) the `body&#39; of file (with one caveat, see below). That&#39;s the simple, usual case.<br />\nHowever, it&#39;s perfectly fine for a file to have several names (see the link() function), in the same or different directories. All the names will refer to the file body and `keep it alive&#39;, so to say. Only when all the names are removed, the body of file actually is freed.<br />\nThe caveat:<br />\nA file&#39;s body may *also* be `kept alive&#39; (still using diskspace) by a process holding the file open. The body will not be deallocated (will not free disk space) as long as the process holds it open. In fact, there&#39;s a fancy way of resurrecting a file removed by a mistake but still held open by a process...</p>\n\n<p><span style=\"color:#B22222\"><strong>Example: delete files matching the same pattern in a folder</strong></span></p>\n\n<pre>\n<code class=\"language-php\">// unlink is the callback function applied to each element of the glob array\narray_map(\'unlink\', glob(\"some/dir/*.txt\"));</code></pre>\n\n<p>&nbsp;</p>','2015-11-22 18:33:28',3),(51,'PHP','Folder And Files','Find & Match','<p><span style=\"color:rgb(178, 34, 34)\"><strong>glob($pattern) </strong></span></p>\n\n<ul>\n	<li>Find pathnames matching a pattern</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-php\">foreach (glob(&quot;*.txt&quot;) as $filename) {\n    echo &quot;$filename size &quot; . filesize($filename) . &quot;n&quot;;\n}\n\n//funclist.txt size 44686\n//funcsummary.txt size 267625\n//quickref.txt size 137820</code></pre>\n\n<p>&nbsp;</p>','2015-11-22 18:37:38',1),(52,'HTML','Misc','HTML Entities','<p><strong><span style=\"color:rgb(178, 34, 34)\">HTML Entities</span></strong> are used to replace characters which:</p>\n\n<ul>\n	<li>are preserved by HTML itself, e.g.&nbsp;If you use the less than (&lt;) or greater than (&gt;) signs in your text, the browser might mix them with tags.</li>\n	<li>are not present on your keyboard, e.g. some latin characters like&nbsp;&Auml;.</li>\n</ul>\n\n<p>A common character entity used in HTML is the <span style=\"color:rgb(178, 34, 34)\"><strong>non-breaking space</strong></span> (&amp;nbsp;).</p>\n\n<p>Remember that browsers will always truncate spaces in HTML pages. If you write 10 spaces in your text, the browser will remove 9 of them. To add real spaces to your text, you can use the&nbsp;&amp;nbsp;&nbsp;character entity. For example, if you want to have &quot; Create Space&quot; which has one space ahead of the following characters in browser, the following won&#39;t give what you want</p>\n\n<pre>\n<code class=\"language-html\">&lt;div&gt; Create Note&lt;/div&gt;</code></pre>\n\n<p>You have to use character entity to meet your need</p>\n\n<pre>\n<code class=\"language-html\">&lt;div&gt;&amp;nbsp;Create Note&lt;/div&gt;</code></pre>','2016-01-06 23:22:41',1),(53,'PHP','Class & Object','Interface & Abstract Class','<p>&quot;<span style=\"color:rgb(178, 34, 34)\"><strong>Interface</strong></span>&quot; and &quot;<strong><span style=\"color:rgb(178, 34, 34)\">Abstract class</span></strong>&quot; in common</p>\n\n<ul>\n	<li>have the same class-like structure</li>\n	<li>are used&nbsp;to define class methods with only signatures(method name and parameters)&nbsp;without implementation(what is inside the function) in detail.</li>\n</ul>\n\n<p>However they differ as follows:</p>\n\n<ul>\n	<li>as name implies, &quot;Interface&quot; only provides constants and methods signitures(names of methods and names of attributes) without any method implementations. For example, an external hard-drive using micro-usb port and a mobilephone using micro-usb port as well, the interfaces are the same, but what running behind this interface are totally different. &quot;<span style=\"color:rgb(178, 34, 34)\"><strong>Interface</strong></span>&quot; <span style=\"color:rgb(178, 34, 34)\">is a class without any implemention which will be defined in inherited class and its child interface can only have constants and method signatures as well</span>.</li>\n	<li>&nbsp;&quot;<strong><span style=\"color:rgb(178, 34, 34)\">Abstract class</span></strong>&quot; can also define method signatures(with &quot;abstract&quot; keyword) without implementations just like &quot;Interface&quot;, <span style=\"color:rgb(178, 34, 34)\">but can also have fully defined methods as in normal class as well. &nbsp;It is a class with implementation partially defined</span>.</li>\n</ul>\n\n<hr />\n<p>The features of &quot;<strong><span style=\"color:rgb(178, 34, 34)\">Interface</span></strong>&quot; are:</p>\n\n<ul>\n	<li>it is defined with &quot;interface&quot; keyword</li>\n	<li>all methods must be public, which is the nature of &quot;Interface&quot;</li>\n	<li>all methods must be defined with implemention in inherited class by using &quot;implements&quot; keyword</li>\n	<li>it can have constants which cannot be overwritten by inherited interface or class</li>\n	<li>it can be extended with &quot;extends&quot; keyword</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">interface testInterface{\n// no body {} is needed here, otherwise throw an exception\n&nbsp;&nbsp; &nbsp;public function one();\n&nbsp;&nbsp; &nbsp;public function two();\n\n}\n//class inherits the interface must define the implementations for each of the methods\nclass useInterface implements testInterface{\n\n&nbsp;&nbsp; &nbsp;public function one(){\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;echo &quot;function one works!&quot;;\n&nbsp;&nbsp; &nbsp;}\n&nbsp;&nbsp;\n&nbsp;&nbsp; &nbsp;public function two(){\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;echo &quot;function two works!&quot;;\n&nbsp;&nbsp; &nbsp;}\n\n}\n//if you want to skip implementation for some methods in interface, you have to defined the method with &quot;abstract&quot; keyword and therefore define the inherited class as abstract as well\nabstract class useInterface implements testInterface{\n\n&nbsp;&nbsp; &nbsp;public function one(){\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;echo &quot;function one works!&quot;;\n&nbsp;&nbsp; &nbsp;}\n\n&nbsp;&nbsp; &nbsp;abstract public function two();\n}\n</code></pre>\n\n<hr />\n<p>The feature of &quot;<span style=\"color:rgb(178, 34, 34)\"><strong>Abstract class</strong></span>&quot;</p>\n\n<ul>\n	<li>nested methods defined as abstract cannot have implementions but only signature(names of methods and names of attributes).</li>\n	<li>once there is an abstract method, the class must be defined as abstract as well.</li>\n	<li>instances of abstract class must define the abstract methods with specified implementation and same or less restricted visibility</li>\n	<li>furthermore, inherited methods of instances must match the signature as well, however it can define optional attributes other than the ones defined in abstract method.</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">abstract class testAbstract{\n\n&nbsp;&nbsp; &nbsp;abstract public function one($a1);\n&nbsp;&nbsp; &nbsp;abstract public function two();\n&nbsp;&nbsp; &nbsp;abstract public function three();\n}\nabstract class useAbstract extends testAbstract{\n&nbsp; //$a2 is an optional attribute\n&nbsp;&nbsp; &nbsp;public function one($a1, $a2=&quot;cong&quot;){}\n&nbsp;&nbsp; &nbsp;public function four(){}\n}\nclass useAbstract2 extends useAbstract{\n&nbsp; //$a3 is another optional attribute, and $a2 can have different default value\n&nbsp;&nbsp; &nbsp;function one($a1, $a2=&quot;kan&quot;, $a3=&quot;ck&quot;){}\n&nbsp;&nbsp; &nbsp;function two(){}\n&nbsp;&nbsp; &nbsp;function three(){}\n&nbsp;&nbsp; &nbsp;function four(){}\n}\n$test = new useAbstract2;</code></pre>','2015-11-25 21:00:58',1),(54,'PHP','Class & Object','Observer Design Pattern','<p><span style=\"color:#B22222\"><strong>Observer design pattern </strong></span>basically consists of three components:</p>\n\n<p>1. <span style=\"color:#B22222\"><strong>Observer</strong></span></p>\n\n<ul>\n	<li>Is the component&nbsp;to observe update or changes happen to <strong><span style=\"color:#B22222\">Subject Object</span></strong></li>\n	<li>Use <span style=\"color:#B22222\">Standard PHP Library</span>&nbsp;&quot;<span style=\"color:#B22222\"><strong>SplObserver</strong></span>&quot;&nbsp;interface&nbsp;to achieve</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">SplObserver {\n/* Methods */\nabstract public void update ( SplSubject $subject )\n}</code></pre>\n\n<p>2.&nbsp;<strong><span style=\"color:#B22222\">Subject</span></strong></p>\n\n<ul>\n	<li>Is the component to be observed by&nbsp;<span style=\"color:#B22222\"><strong>Observer Object</strong></span></li>\n	<li>Use <span style=\"color:#B22222\">Standard PHP Library</span>&nbsp;&quot;<span style=\"color:#B22222\"><strong>SplSubject</strong></span>&quot;&nbsp;interface&nbsp;to achieve</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">SplSubject {\n/* Methods */\nabstract public void attach ( SplObserver $observer )\nabstract public void detach ( SplObserver $observer )\nabstract public void notify ( void )\n}</code></pre>\n\n<p>3.&nbsp;<span style=\"color:#B22222\"><strong>Object Storage</strong></span></p>\n\n<ul>\n	<li>Is the component to attach or detach observer(s)</li>\n	<li>Use <span style=\"color:#B22222\">Standard PHP Library</span>&nbsp;&quot;<span style=\"color:#B22222\"><strong>SplObjectStorage</strong></span>&quot; class&nbsp;to achieve&nbsp;</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">// As an object set\n$s = new SplObjectStorage();\n$o1 = new StdClass;\n$o2 = new StdClass;\n$o3 = new StdClass;\n$s-&gt;attach($o1);\n$s-&gt;attach($o2);\nvar_dump($s-&gt;contains($o1));\nvar_dump($s-&gt;contains($o2));\nvar_dump($s-&gt;contains($o3));\n$s-&gt;detach($o2);\nvar_dump($s-&gt;contains($o1));\n// this is gonna be false\nvar_dump($s-&gt;contains($o2));\nvar_dump($s-&gt;contains($o3));\n?&gt;</code></pre>\n\n<hr />\n<p><span style=\"color:#B22222\"><strong>Observer Design Pattern&nbsp;Snippets&nbsp;&nbsp;</strong></span></p>\n\n<p>This pattern works basically like this:</p>\n\n<ul>\n	<li>Create new instances of SplObserver as many as you need</li>\n	<li>Create a new instance of SplSubject and inside the instance create a new instance of&nbsp;SplObjectStorage</li>\n	<li><span style=\"color:#B22222\">Attach</span> or <span style=\"color:#B22222\">Detach</span> SplObserver instances to or from instance of SplObjectStorage inside SplSubject instance</li>\n	<li>Run a function which <span style=\"color:#B22222\">update</span> property of this SplSubject instance and run the <span style=\"color:#B22222\">notify</span> function as well</li>\n	<li>Finally the <span style=\"color:#B22222\">notify</span> function will call the <span style=\"color:#B22222\">update</span> function for each observer objects stored in&nbsp;SplObjectStorage instance</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">class testObserver implements SplObserver{\n  private $observer_name;\n  public function __construct($name){\n	$this-&gt;observer_name = $name;\n  }	\n  public function update(SplSubject $subject){\n	  echo $this-&gt;observer_name.\": The price of subject has been updated to: \".$subject-&gt;getPrice().\"&lt;/br&gt;\";\n  }\n}\nclass testSubject implements SplSubject{\n  private $objstorage;\n  private $price;\n  public function __construct(){\n    $this-&gt;objstorage = new SplObjectStorage;\n    $this-&gt;price = 20;\n  }\n// define methods from interface\n  public function attach(SplObserver $new_obs){\n    $this-&gt;objstorage-&gt;attach($new_obs);\n  }\n  public function detach(SplObserver $remove_obs){\n    $this-&gt;objstorage-&gt;detach($remove_obs);\n  }\n  public function notify(){\n    foreach ($this-&gt;objstorage as $observer) {\n      $observer-&gt;update($this);\n    }\n  }\n// define methods to update status of this Subject\n  public function updatePrice($new_price){\n    $this-&gt;price = $new_price;\n    $this-&gt;notify();\n  }\n  public function getPrice(){\n    return $this-&gt;price;\n  }\n}\n$observer1 = new testObserver(\'Robot1\');\n$observer2 = new testObserver(\'Robot2\');\n$subject = new testSubject;\n$subject-&gt;attach($observer1);\n$subject-&gt;attach($observer2);\n$subject-&gt;updatePrice(30);\n$subject-&gt;detach($observer2);\n$subject-&gt;updatePrice(40);</code></pre>\n\n<p>The result of the script will be:</p>\n\n<p>Robot1: The price of subject has been updated to: 30<br />\nRobot2: The price of subject has been updated to: 30<br />\nRobot1: The price of subject has been updated to: 40</p>','2015-11-25 21:50:12',1),(55,'PHP','Folder And Files','Read & Write','<p><span style=\"color:#B22222\"><strong>file($filename, flags)</strong></span></p>\n\n<ul>\n	<li>Returns the file in an array. Each element of the array corresponds to a line in the file, with the newline still attached. Upon failure,&nbsp;file()returns&nbsp;FALSE</li>\n	<li>Each line in the resulting array will include the line ending, unless&nbsp;FILE_IGNORE_NEW_LINES&nbsp;is used, so you still need to use&nbsp;<span style=\"color:#B22222\">rtrim()</span>&nbsp;if you do not want the line ending present.</li>\n	<li>Flags includes filters when returning the file array\n	<ul>\n		<li>\n		<p><span style=\"color:#B22222\">FILE_USE_INCLUDE_PATH:</span>&nbsp;Search for the file in the&nbsp;include_path.</p>\n		</li>\n		<li>\n		<p><span style=\"color:#B22222\">FILE_IGNORE_NEW_LINES</span>:&nbsp;Do not add newline at the end of each array element</p>\n		</li>\n		<li>\n		<p><span style=\"color:#B22222\">FILE_SKIP_EMPTY_LINES</span>:&nbsp;Skip empty lines</p>\n		</li>\n	</ul>\n	</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">// Get a file into an array.  In this example we\'ll go through HTTP to get\n// the HTML source of a URL.\n$lines = file(\'http://www.example.com/\');\n// Loop through our array, show HTML source as HTML source; and line numbers too.\nforeach ($lines as $line_num =&gt; $line) {\n    echo \"Line #&lt;b&gt;{$line_num}&lt;/b&gt; : \" . htmlspecialchars($line) . \"&lt;br /&gt;n\";\n}\n// Another example, let\'s get a web page into a string.  See also file_get_contents().\n$html = implode(\'\', file(\'http://www.example.com/\'));\n// Using the optional flags parameter since PHP 5\n$trimmed = file(\'somefile.txt\', FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);</code></pre>\n\n<p>&nbsp;</p>','2015-11-26 11:31:30',1),(56,'PHP','Misc','Define Constant','<p>What is a <span style=\"color:rgb(178, 34, 34)\"><strong>constant</strong></span> in PHP:</p>\n\n<ul>\n	<li>A constant is an identifier (name) for a simple value.</li>\n	<li>As the name suggests, that value cannot change during the execution of the script (except for&nbsp;<span style=\"color:rgb(0, 168, 255)\">magic constants</span>, which aren&#39;t actually constants).</li>\n	<li>A constant is case-sensitive by default.</li>\n	<li>By convention, constant identifiers are always uppercase.</li>\n	<li>Like&nbsp;superglobals($_GET), <span style=\"color:rgb(178, 34, 34)\">the scope of a constant is global.</span> You can access constants anywhere in your script without regard to scope.</li>\n</ul>\n\n<p>Use <span style=\"color:rgb(178, 34, 34)\"><strong>define($name, $value, $case_insensitive=false)</strong></span> to define a new constant</p>\n\n<ul>\n	<li>$name: the name(identifier) of the constant</li>\n	<li>$value: the value of the constant. In PHP 5,&nbsp;value&nbsp;must be a&nbsp;scalar&nbsp;value (integer,&nbsp;float,&nbsp;string,&nbsp;boolean, or&nbsp;NULL). In PHP 7,&nbsp;array&nbsp;values are also accepted.</li>\n	<li>$case_insensitive: optional, default is FALSE which means case-sensitive;&nbsp;case-insensitive constants are stored as lower-case.</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">define(\"CONSTANT\", \"Hello world.\");\necho CONSTANT; // outputs \"Hello world.\"\necho Constant; // outputs \"Constant\" and issues a notice.\ndefine(\"GREETING\", \"Hello you.\", true);\necho GREETING; // outputs \"Hello you.\"\necho Greeting; // outputs \"Hello you.\"\n// Works as of PHP 7\ndefine(\'ANIMALS\', array(\n    \'dog\',\n    \'cat\',\n    \'bird\'\n));\necho ANIMALS[1]; // outputs \"cat\"</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>Constant defined inside a class</strong></span></p>\n\n<p>Using &quot;<span style=\"color:rgb(178, 34, 34)\">define()</span>&quot; INSIDE a class definition <span style=\"color:rgb(178, 34, 34)\">does not work</span>. You have to use the PHP keyword &#39;<span style=\"color:rgb(178, 34, 34)\"><strong>const</strong></span>&#39; and initialize it with a scalar value -- boolean, int, float, or string (no array or other object types) -- right away.</p>\n\n<pre>\n<code class=\"language-php\">define(\'MIN_VALUE\',Â \'0.0\');Â Â Â // RIGHT - Works OUTSIDE of a class definition.\ndefine(\'MAX_VALUE\',Â \'1.0\');Â Â Â // RIGHT - Works OUTSIDE of a class definition.\n//const MIN_VALUE = 0.0;Â  Â  Â  Â Â  WRONG - Works INSIDE of a class definition.\n//const MAX_VALUE = 1.0;Â  Â  Â  Â Â  WRONG - Works INSIDE of a class definition.\nclassÂ Constants\n{\nÂ Â //define(\'MIN_VALUE\', \'0.0\');Â  WRONG - Works OUTSIDE of a class definition.\nÂ  //define(\'MAX_VALUE\', \'1.0\');Â  WRONG - Works OUTSIDE of a class definition.\nÂ Â constÂ MIN_VALUEÂ =Â 0.0;Â  Â  Â Â // RIGHT - Works INSIDE of a class definition.\nÂ Â constÂ MAX_VALUEÂ =Â 1.0;Â  Â  Â Â // RIGHT - Works INSIDE of a class definition.\nÂ Â public static functionÂ getMinValue()\nÂ  {\nÂ  Â  returnÂ self::MIN_VALUE;\nÂ  }\nÂ  public static functionÂ getMaxValue()\nÂ  {\nÂ  Â  returnÂ self::MAX_VALUE;\nÂ  }\n}</code></pre>\n\n<p>#Example 1:<br />\nYou can access these constants DIRECTLY like so:<br />\n* type the class name exactly.<br />\n* type two (2) colons.<br />\n* type the const name exactly.</p>\n\n<pre>\n<code class=\"language-php\">#Example 1:\n$minÂ =Â Constants::MIN_VALUE;\n$maxÂ =Â Constants::MAX_VALUE;\n</code></pre>\n\n<p>#Example 2:<br />\nBecause our class definition provides two (2) static functions, you can also access them like so:<br />\n* type the class name exactly.<br />\n* type two (2) colons.<br />\n* type the function name exactly (with the parentheses).</p>\n\n<pre>\n<code class=\"language-php\">#Example 2:\n$minÂ =Â Constants::getMinValue();\n$maxÂ =Â Constants::getMaxValue();\n</code></pre>\n\n<p>Once class constants are declared AND initialized, they cannot be set to different values -- that is why there are no setMinValue() and setMaxValue() functions in the class definition -- which means they are READ-ONLY and STATIC (shared by all instances of the class).</p>\n\n<p><strong><span style=\"color:#B22222\">What if you use &#39;define&#39; syntax inside class methods?</span></strong></p>\n\n<pre>\n<code class=\"language-php\">class test{\n    const a = \'HELLO\';\n    function __construct(){\n        define(\'b\', \'world\');\n    }\n}\n$a = new test();\necho $a::a; //\'HELLO\'\necho b;//\'world\'</code></pre>\n\n<p>As you can see, b is a global constant</p>','2017-10-06 18:33:53',10),(57,'Linux','Folder And Files','Mkdir','<p><strong><span style=\"color:rgb(178, 34, 34)\">mkdir</span></strong> is used to create new directory inside the file system.</p>\n\n<p>SYNOPSIS: <span style=\"color:rgb(178, 34, 34)\">mkdir [-pv] [-m mode] directory_name ...</span></p>\n\n<ul>\n	<li>\n	<p>-p:&nbsp;Create intermediate directories as required.&nbsp;</p>\n	</li>\n	<li>\n	<p>-v:&nbsp;Be verbose when creating directories, listing them as they are created.</p>\n	</li>\n	<li>\n	<p>-m:&nbsp;Set the file permission bits of the final created directory to the specified mode. &nbsp;The mode argument can be in any of the formats specified&nbsp;to the chmod(1) command.</p>\n	</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">mkdir b\ndrwxr-xr-x   2 counterall  staff   68 Nov 26 15:38 b\n# try to create a dir beneath another which does not exist yet\nmkdir c/d\nmkdir: c: No such file or directory\n# use -p to create intermediate directories automatically\nmkdir -p c/d\ndrwxr-xr-x   2 counterall  staff   68 Nov 26 15:38 b\ndrwxr-xr-x   3 counterall  staff  102 Nov 26 15:39 c\ncd c\ndrwxr-xr-x  2 counterall  staff   68 Nov 26 15:39 d</code></pre>\n\n<p>To create a dir with specified directory permissions</p>\n\n<pre>\n<code class=\"language-bash\">mkdir -m 444 only_read\ndr--r--r--  2 counterall  staff   68 Nov 26 15:44 only_read</code></pre>\n\n<p>&nbsp;</p>','2015-11-26 15:46:15',9),(58,'Sphinx Search','Sphinx.Conf','Searchd Setting','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. Which part&nbsp;of sphinx.conf will be automatically loaded after &#39;indexer --rotate&#39; if sphinx.conf&nbsp;has been modified</strong></span></p>\n\n<ul>\n	<li>&#39;<span style=\"color:rgb(178, 34, 34)\">indexer --rotate</span>&#39; will help <span style=\"color:rgb(178, 34, 34)\">searchd</span> to reload all indexed in the <span style=\"color:rgb(178, 34, 34)\">sphinx.conf file</span>, this is quite useful that you do not need to restart <span style=\"color:rgb(178, 34, 34)\">searchd</span> to get newly created indexed precached by searchd. This mechnism works as well if <span style=\"color:rgb(178, 34, 34)\">sphinx.conf</span> is a script(with shebang on top) which will generate main content dynamically(fixed in version 2.0.8 with fixed bug #1481) . &nbsp;And since 2.0.6(fixed bug #1254), <span style=\"color:rgb(178, 34, 34)\">--rotate will add newly created indexes without restarting searchd</span></li>\n	<li>If you modify the &#39;<span style=\"color:rgb(178, 34, 34)\">searchd setting</span>&#39; in conf file, since <span style=\"color:rgb(178, 34, 34)\">searchd</span> is a daemon keep running on the background, so&nbsp;&#39;<span style=\"color:rgb(178, 34, 34)\">indexer --rotate</span>&#39; will not make the new setting of searchd be applied, the only way to renew the searchd itself is to restart searchd by</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">searchd --stop \nsearchd\n</code></pre>\n\n<p>&nbsp;</p>','2015-12-14 22:48:40',3),(59,'Sphinx Search','Searchd','Start & Stop','<p><strong><span style=\"color:rgb(178, 34, 34)\">Start Searchd</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">path/to/searchd --config path/to/sphinx/conf</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>Restart Searchd</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">path/to/searchd --stop\npath/to/searchd --config path/to/sphinx/conf</code></pre>','2015-11-26 20:13:45',0),(60,'JavaScript','Snippets','Isset','<p>The following snippets can be used as the same purpose of <strong><span style=\"color:rgb(178, 34, 34)\">isset() </span></strong>in PHP.</p>\n\n<pre>\n<code class=\"language-javascript\">if(variable !== undefined &amp;&amp; variable !== null){\n //then variable is set with value\n}</code></pre>','2016-01-10 11:05:23',1),(61,'MySql','Basic Syntax','Comparision','<p><span style=\"color:#B22222\"><strong>Most often used comparision syntax</strong></span></p>\n\n<pre>\n<code class=\"language-sql\">-- if is a NULL\nSELECT * FROM table WHERE col1 IS NULL AND col2 IS NOT NULL;\n-- bigger, smaller\nSELECT * FROM table WHERE col1 &gt; value1 OR col2 &lt;= value2;\n-- equal to, not equal to\nSELECT * FROM table WHERE col1 = value1 OR col2 &lt;&gt; value2;\nSELECT * FROM table WHERE col1 = value1 OR col2 != value2;</code></pre>\n\n<p><strong><span style=\"color:#B22222\">STRCMP(expr1,expr2)</span></strong></p>\n\n<p>STRCMP()&nbsp;returns&nbsp;0&nbsp;if the strings are the same,&nbsp;-1&nbsp;if the first argument is smaller than the second according to the current sort order, and&nbsp;1&nbsp;otherwise.&nbsp;</p>\n\n<pre>\n<code class=\"language-sql\">SELECT STRCMP(\'text\', \'text2\');\n+-------------------------+\n| STRCMP(\'text\', \'text2\') |\n+-------------------------+\n|                      -1 |\n+-------------------------+\nSELECT STRCMP(\'text2\', \'text\');\n+-------------------------+\n| STRCMP(\'text2\', \'text\') |\n+-------------------------+\n|                       1 |\n+-------------------------+\nSELECT STRCMP(\'text\', \'text\');\n+------------------------+\n| STRCMP(\'text\', \'text\') |\n+------------------------+\n|                      0 |\n+------------------------+</code></pre>\n\n<p>&nbsp;</p>','2015-11-28 23:15:12',1),(62,'MySql','Function','Flow Control','<p><span style=\"color:#B22222\"><strong>CASE</strong></span></p>\n\n<p>1. First Version</p>\n\n<pre>\n<code class=\"language-sql\">CASE value WHEN [compare_value1] THEN result1 [WHEN [compare_value2] THEN result2 ...] [ELSE else_result] END;</code></pre>\n\n<p>Which means if <span style=\"color:#B22222\">value == compare_value</span>, then return the related&nbsp;<span style=\"color:#B22222\">result</span>. If not matches at all, then return <span style=\"color:#B22222\">else_result</span>.</p>\n\n<pre>\n<code class=\"language-sql\">SELECT CASE 1 WHEN 1 THEN \'one\' WHEN 2 THEN \'two\' ELSE \'more\' END AS case_result;\n+-------------+\n| case_result |\n+-------------+\n| one         |\n+-------------+</code></pre>\n\n<p>2. Second Version</p>\n\n<pre>\n<code class=\"language-sql\">CASE WHEN [condition1] THEN result2 [WHEN [condition1] THEN result2 ...] [ELSE else_result] END;</code></pre>\n\n<p>Which means if <span style=\"color:#B22222\">condition</span> is met, then return related <span style=\"color:#B22222\">result</span>, if no conditions are met, then return <span style=\"color:#B22222\">else_result</span>.</p>\n\n<pre>\n<code class=\"language-sql\">SELECT CASE WHEN 1&gt;0 THEN \'true\' ELSE \'false\' END AS case_result;\n+-------------+\n| case_result |\n+-------------+\n| true        |\n+-------------+</code></pre>\n\n<hr />\n<p><strong><span style=\"color:#B22222\">IF</span></strong></p>\n\n<p>Syntax: if(expression, result1, result2)</p>\n\n<p>Which means if <span style=\"color:#B22222\">expression</span> is true(<span style=\"color:#B22222\">&lt;&gt; 0 or &lt;&gt; NULL</span>), then return <span style=\"color:#B22222\">result1</span>, else return <span style=\"color:#B22222\">result2</span>.</p>\n\n<pre>\n<code class=\"language-sql\">SELECT IF(1&lt;2,\'yes\',\'no\');\n+--------------------+\n| IF(1&lt;2,\'yes\',\'no\') |\n+--------------------+\n| yes                |\n+--------------------+\nSELECT IF(STRCMP(\'test\',\'test1\'),\'no\',\'yes\');\n+---------------------------------------+\n| IF(STRCMP(\'test\',\'test1\'),\'no\',\'yes\') |\n+---------------------------------------+\n| no                                    |\n+---------------------------------------+</code></pre>\n\n<p>&nbsp;</p>','2015-11-28 23:10:28',1),(63,'Linux','Scripts','Shebang','<p>In&nbsp;computing, a&nbsp;<span style=\"color:#B22222\"><strong>shebang</strong></span>&nbsp;(also called a&nbsp;sha-bang,&nbsp;hashbang,&nbsp;pound-bang,&nbsp;or&nbsp;hash-pling), is the character sequence consisting of the characters&nbsp;number sign&nbsp;and exclamation mark&nbsp;(that is, &quot;<strong><span style=\"color:#B22222\">#!</span></strong>&quot;) at the beginning of a&nbsp;script.</p>\n\n<p>Under&nbsp;Unix-like&nbsp;operating systems, when a script with a shebang is run as a program, the&nbsp;program loader&nbsp;parses the rest of the script&#39;s initial line as an&nbsp;interpreter directive; the specified interpreter program is run instead, passing to it as an argument the path that was initially used when attempting to run the script.For example, if a script is named with the path &quot;path/to/script&quot;, and it starts with the following line:</p>\n\n<p><span style=\"color:#B22222\"><strong>#!/bin/php</strong></span></p>\n\n<p>then the program loader is instructed to run the program &quot;/bin/php&quot; instead, passing &quot;path/to/script&quot; as the first argument.&nbsp;</p>\n\n<pre>\n<code class=\"language-bash\">nohup /bin/sh /path/to/script.php &amp;</code></pre>\n\n<p>In order to run the php, we need to add&nbsp;</p>\n\n<pre>\n<code class=\"language-php\">#!/usr/sbin/php\n&lt;?php\n echo \'Hello, I am PHP\';\n?&gt;</code></pre>\n\n<p>&nbsp;</p>','2015-11-28 23:31:26',5),(64,'Sphinx Search','Sphinx.conf','RT Index Setting','<p><span style=\"color:rgb(178, 34, 34)\"><strong>RT indexes </strong></span>should be declared in&nbsp;sphinx.conf, just as every other index type. Notable differences from the regular, disk-based indexes are that:</p>\n\n<ul>\n	<li>data sources are not required and ignored since <span style=\"color:rgb(178, 34, 34)\">data is directly inserted into RT index without fetching any documents from any sources</span></li>\n	<li>you should explicitly <span style=\"color:rgb(178, 34, 34)\">enumerate all the text fields, not just attributes</span>.</li>\n</ul>\n\n<p>The <span style=\"color:rgb(178, 34, 34)\">setting of RT index</span> should look like below:</p>\n\n<pre>\n<code class=\"language-ini\">index name_of_rt_index\n{\n	# \'rt\' index type must be specified to use RT index\n	type			= rt\n	\n    # index files path and file name, without extension\n	# mandatory, path must be writable, extensions will be auto-appended\n	path			= /usr/local/var/data/rt\n\n	# RAM chunk size limit\n	# RT index will keep at most this much data in RAM, then flush to disk\n	# optional, default is 128M\n	# rt_mem_limit		= 512M\n\n	# full-text field declaration\n	# multi-value, mandatory\n	rt_field		= title\n	rt_field		= content\n	rt_field		= text\n\n	# unsigned integer attribute declaration\n	# multi-value (an arbitrary number of attributes is allowed), optional\n	# declares an unsigned 32-bit attribute\n	rt_attr_uint		= gid\n\n	# RT indexes currently support the following attribute types:\n	# uint, bigint, float, timestamp, string, mva, mva64, json\n	#\n	# rt_attr_bigint		= guid\n	# rt_attr_float		= gpa\n	# rt_attr_timestamp	= ts_added\n	# rt_attr_string		= author\n	# rt_attr_multi		= tags\n	# rt_attr_multi_64	= tags64\n	# rt_attr_json		= extra_data\n}\n</code></pre>\n\n<p>&nbsp;</p>','2015-12-14 22:49:20',1),(65,'Sphinx Search','RT Index','Access & Edit','<p><span style=\"color:rgb(178, 34, 34)\">RT index can be accessed using MySQL protocol.</span> INSERT, REPLACE, DELETE, and SELECT statements against RT index are supported.While querying of RT indexes is possible using any of the SphinxAPI, SphinxQL, or SphinxSE, <span style=\"color:rgb(178, 34, 34)\">updating them is only possible via SphinxQL at the moment.</span></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. INSERT New&nbsp;Docs</span></p>\n\n<pre>\n<code class=\"language-sql\">-- check the structure of an example rt index\nDESC rt;\n+---------+--------+\n| Field   | Type   |\n+---------+--------+\n| id      | bigint |\n| title   | field  |\n| content | field  |\n| gid     | uint   |\n+---------+--------+\n-- insert into new rows\nINSERT INTO rt (id, title, content, gid) VALUES (6, \'title6\', \'content6\', 6), (7, \'title7\', \'content6\', 7);\nSELECT * FROM rt WHERE MATCH(\'content6\');\n+------+------+\n| id   | gid  |\n+------+------+\n|    6 |    6 |\n|    7 |    7 |\n+------+------+</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. UPDATE,&nbsp;REPLACE &amp; DELETE&nbsp;Docs</span></p>\n\n<ul>\n	<li>You <span style=\"color:rgb(178, 34, 34)\">MUST use REPLACE</span> if you want to update <span style=\"color:rgb(178, 34, 34)\">a text field, string value&nbsp;in json&nbsp;attribute or string attribute</span></li>\n	<li>You can use <span style=\"color:rgb(178, 34, 34)\">UPDATE</span> to update <span style=\"color:rgb(178, 34, 34)\">numeric attributes or numeric value in json attribute</span></li>\n</ul>\n\n<pre>\n<code class=\"language-sql\">-- update content of row with id 7\nREPLACE INTO rt (id, title, content, gid) VALUES (7, \'title7\', \'content7\', 7);\nSELECT * FROM rt WHERE MATCH(\'content7\');\n+------+------+\n| id   | gid  |\n+------+------+\n|    7 |    7 |\n+------+------+\n-- update gid of row with id 7\nUPDATE rt SET gid = 77 WHERE id = 7;\nSELECT gid FROM rt WHERE id = 7;\n+------+\n| gid  |\n+------+\n|   77 |\n+------+\n-- delete a row\nDELETE FROM rt WHERE id = 6;\nSELECT * FROM rt WHERE id = 6;\nEmpty set (0.01 sec)</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3. ALTER a RT&nbsp;Index</span></p>\n\n<p>Now ALTER only support&nbsp;</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4. TRUNCATE RTINDEX&nbsp;</span></p>\n\n<p>TRUNCATE RTINDEX is used to remove entire rt index which means <span style=\"color:#B22222\">wipe ram chunk, all disk chunks and binary logs used to recover from unclean searchd shutdown.</span></p>\n\n<pre>\n<code class=\"language-sql\">-- truncate entire rt index\nTRUNCATE RTINDEX rt;</code></pre>\n\n<p>&nbsp;</p>','2015-11-29 22:42:43',0),(66,'Linux','Commands','Miscs','<p><span style=\"color:#B22222\"><strong>source ~/.bash_profile</strong></span></p>\n\n<ul>\n	<li>after making changes to ~/.bash_profile, usually you need to restart a shell to apply the changes. &#39;<span style=\"color:#B22222\">source&#39;</span> command can easily reload the changes without the need to restart&nbsp;shell</li>\n</ul>','2015-12-01 10:38:39',0),(67,'Java','Settings','Java Home','<p><strong><span style=\"color:#B22222\">How to set $JAVA_HOME on Mac OS X:</span></strong></p>\n\n<ul>\n	<li>check the version of java running</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">$ java -version\njava version \"1.8.0_45\"\nJava(TM) SE Runtime Environment (build 1.8.0_45-b14)\nJava HotSpot(TM) 64-Bit Server VM (build 25.45-b02, mixed mode)</code></pre>\n\n<ul>\n	<li>find Java Home</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">$ /usr/libexec/java_home/ -v 1.8\n/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home</code></pre>\n\n<p>Then you got the set in ~/.bash_profile&nbsp;</p>\n\n<pre>\n<code class=\"language-bash\">export JAVA_HOME = /Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home</code></pre>\n\n<p>&nbsp;</p>','2015-12-01 11:17:13',0),(68,'Linux','Commands','Top + Ps + Grep','<p>In this section, we want to talk about built-in commands related to process control in unix-like systems</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>top</strong></span></p>\n\n<ul>\n	<li>&#39;top&#39; is like the &#39;task manager&#39; in windows or &#39;activity monitor&#39; in mac os x to show a big picture of running processes in the system.</li>\n	<li>you can figure out how many processes are running, how cpu usage is, how memory usage is and so on.</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">wpdemo$ top\ntop - 12:33:06 up 10 days, 15:49,  1 user,  load average: 0.26, 0.09, 0.06\nTasks:  83 total,   2 running,  81 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem:    501800 total,   437312 used,    64488 free,    12836 buffers\nKiB Swap:        0 total,        0 used,        0 free.   256648 cached Mem\n\n  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND\n  919 root      20   0  253396  13060   2928 S  0.3  2.6  30:29.73 searchd\n26609 wpdemo    20   0  105636   1888    912 S  0.3  0.4   0:00.45 sshd\n    1 root      20   0   33492   1856    472 S  0.0  0.4   0:13.92 init</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><strong><span style=\"color:rgb(178, 34, 34)\">ps</span></strong>:&nbsp;which means &#39;<span style=\"color:rgb(178, 34, 34)\">process status</span>&#39; to give you a snapshot about the statuses of selected processes</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. show processes&nbsp;associated with the current user and terminal session</span></p>\n\n<pre>\n<code class=\"language-bash\">$ ps\n  PID TTY           TIME CMD\n  352 ttys000    0:00.09 -bash\n 2360 ttys000    0:12.56 /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby bin/rails server webrick -e production\n 5193 ttys000    0:00.46 ssh wpdemo@ckdemo.io\n  365 ttys001    0:00.21 -bash\n  372 ttys002    0:00.01 -bash\n  375 ttys003    0:00.01 -bash\n  378 ttys004    0:00.01 -bash\n 9026 ttys004    0:00.21 ssh statsit@statsit117</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. show info for all running processes</span></p>\n\n<pre>\n<code class=\"language-bash\"># there are two ways of doing so\n$ ps aux | less\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot         1  0.0  0.3  33492  1856 ?        Ss   Nov21   0:13 /sbin/init\nroot         2  0.0  0.0      0     0 ?        S    Nov21   0:00 [kthreadd]\nroot         3  0.0  0.0      0     0 ?        S    Nov21   0:00 [ksoftirqd/0]\nroot         5  0.0  0.0      0     0 ?        S&lt;   Nov21   0:00 [kworker/0:0H]\nroot         7  0.0  0.0      0     0 ?        S    Nov21   0:09 [rcu_sched]\nroot         8  0.0  0.0      0     0 ?        S    Nov21   0:11 [rcuos/0]\n#ax means to show all processes including the ones without any terminal\n#u means to show username owning the processes\n\n# second way\n$ ps -ef | less\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot         1     0  0 Nov21 ?        00:00:13 /sbin/init\nroot         2     0  0 Nov21 ?        00:00:00 [kthreadd]\nroot         3     2  0 Nov21 ?        00:00:00 [ksoftirqd/0]\nroot         5     2  0 Nov21 ?        00:00:00 [kworker/0:0H]\nroot         7     2  0 Nov21 ?        00:00:09 [rcu_sched]\n#-e means all processes\n#-f means to do full-format listing\n\n# show process order by start time\nps -ef --sort=start_time | less</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3. Filter the processes you want to show</span></p>\n\n<p>we need to use <span style=\"color:rgb(178, 34, 34)\">grep</span> command to filter the processes which match the pattern given to grep</p>\n\n<pre>\n<code class=\"language-bash\"># filter processes match \'searchd\' or \'PPID\'\n$ ps -ef | grep -v grep | grep -Ei --color \'searchd|PPID\'\n  UID   PID  PPID   C STIME   TTY           TIME CMD\n  501  8703     1   0 11:52AM ??         0:00.00 searchd\n  501  8704  8703   0 11:52AM ??         0:09.29 searchd\n# -v means to exclude the processes which match the pattern\n# -i means to do matching case-insensitive\n# --color means to highlight the pattern in matched results\n# -E means to use extended mode to support multiple patterns without adding slash between them\n\n# if you want to match exact words, then use -w \n$ ps -ef | grep -v grep | grep -Ewi --color \'search|PPID\'\n  UID   PID  PPID   C STIME   TTY           TIME CMD\n$ ps -ef | grep -v grep | grep -Ei --color \'search|PPID\'\n  UID   PID  PPID   C STIME   TTY           TIME CMD\n  501  8703     1   0 11:52AM ??         0:00.00 searchd\n  501  8704  8703   0 11:52AM ??         0:09.96 searchd</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4. Fetch process ID(PID) and&nbsp;Show process&nbsp;with specified PID</span></p>\n\n<pre>\n<code class=\"language-bash\">#use pgrep to get PID according to process name\n$ pgrep searchd\n919\n#show process detail with given PID, -p means selected by PID\n$ ps -fp 919\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot       919     1  0 Nov21 ?        00:30:32 /usr/bin/searchd --nodetach</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">5. Check process tree which show relations between parent and child processes with their PID</span></p>\n\n<pre>\n<code class=\"language-bash\"># not working in Mac OS X(Ei Capitan) by default\n$ pstree -p | grep -E --color \'searchd|indexer\' | less\n|-crond(6312)-+-crond(10084)---sh(10094)---php(10097)---indexer(11806)\n|             |-crond(18221)---sh(18228)---php(18235)---indexer(11643)\n|-searchd(6404)---{searchd}(6414)\n|-searchd(6677)---{searchd}(6679)</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">6. Check elapsed time since a process starts</span></p>\n\n<pre>\n<code class=\"language-bash\">ps -p 22625 -o etime=\n17-05:42:50 # means 17 days 5 hours 42 minutes and 50 seconds\n\nps -p 22625 -o stime,etime\nSTIME     ELAPSED\nOct22 17-05:44:27 # show both when it starts and how long elapses since then</code></pre>\n\n<p>&nbsp;</p>','2016-11-25 13:20:29',21),(69,'Linux','Scripts','Grep + Pgrep + Pkill','<p><strong><span style=\"color:rgb(178, 34, 34)\">grep &amp; egrep(extended grep)</span></strong> are used to filter content which matches a pattern or patterns, it is very useful to used as a pipe to get the exact content we need from big dataset.</p>\n\n<p>We have doc with content as below to be used as an example</p>\n\n<pre>\n<code class=\"language-bash\">cat test.php\n#!/usr/bin/php -q\n&lt;?php\n echo &quot;I am PHP!&quot;;\n echo &quot;I am Kan&quot;;\n?&gt;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. case sensititve and insensitive</span></p>\n\n<pre>\n<code class=\"language-bash\"># -i means insensitive\n$ grep PHP test.php\n echo &quot;I am PHP!&quot;;\n$ grep -i PHP test.php\n#!/usr/bin/php -q\n&lt;?php\n echo &quot;I am PHP!&quot;;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. match everything except a pattern</span></p>\n\n<pre>\n<code class=\"language-bash\"># -v to exclude patterns to match\n$ grep -iv php test.php\n echo &quot;I am Kan&quot;;\n?&gt;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3. match any one patterns given</span></p>\n\n<pre>\n<code class=\"language-bash\"># for standard grep, you need to add &#39;&#39; between patterns\ngrep -i &#39;echo|am&#39; test.php\n echo &quot;I am PHP!&quot;;\n echo &quot;I am Kan&quot;;\n# or remove slash by adding -E which means grep in extended mode\n$ grep -Ei &#39;echo|am&#39; test.php\n echo &quot;I am PHP!&quot;;\n echo &quot;I am Kan&quot;;\n# or directly use egrep(extended grep)\n$ egrep -i &#39;echo|am&#39; test.php\n echo &quot;I am PHP!&quot;;\n echo &quot;I am Kan&quot;;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4. match all given patterns</span></p>\n\n<pre>\n<code class=\"language-bash\">$ egrep -i &#39;echo.*kan&#39; test.php\n echo &quot;I am Kan&quot;;\n$ grep -Ei &#39;echo.*kan&#39; test.php\n echo &quot;I am Kan&quot;;\n# or use multiple grep to achieve the same effect\n$ grep -i &#39;echo&#39; test.php | grep -i &#39;kan&#39;\n echo &quot;I am Kan&quot;;</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>pgrep &amp; pkill</strong></span></p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">pgrep</span> is&nbsp;very handy to <span style=\"color:rgb(178, 34, 34)\">search processes based on process name</span> or even command name</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">pkill</span> uses the same way to search processes, and <span style=\"color:rgb(178, 34, 34)\">it will send kill signal to these processes, </span>so it is very useful to kill bunch of processes matching the same name pattern</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. Main useful options</span></p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">-l</span>: it is used to list searched results with not only PID but also process names and process commands</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">-f</span>: it is used to allow you to search by command keywords in addition to by process name</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. Some examples</span></p>\n\n<pre>\n<code class=\"language-bash\">pgrep -lf &quot;searchd&quot;\n#54615 searchd\n#54616 searchd\npkill -lf &quot;searchd&quot;\n#kill -15 54615\n#kill -15 54616</code></pre>','2016-06-27 11:48:15',24),(70,'Linux','Scripts','Process & Signal','<p>Let us explain <span style=\"color:rgb(178, 34, 34)\">process</span> and <span style=\"color:rgb(178, 34, 34)\">signals</span> ahead of detail to use <span style=\"color:rgb(178, 34, 34)\">kill</span> command:</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>A process</strong></span>, also referred to as a&nbsp;task, is an&nbsp;executing&nbsp;(i.e., running) instance of a&nbsp;program. Each process is automatically assigned a unique&nbsp;process identification number&nbsp;(PID) when it is created for use by the system to reference the process.</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">A&nbsp;signal</span></strong>&nbsp;is <span style=\"color:rgb(178, 34, 34)\">a software interrupt</span> delivered to a process. The operating system uses signals to report exceptional situations to an executing program.&nbsp;In general, the events that generate signals fall into three major categories: <span style=\"color:rgb(178, 34, 34)\">errors</span>, <span style=\"color:rgb(178, 34, 34)\">external events</span>, and <span style=\"color:rgb(178, 34, 34)\">explicit requests</span>.</p>\n\n<ul>\n	<li>An <span style=\"color:rgb(178, 34, 34)\">error</span> means that a program has done something invalid and cannot continue execution. But not all kinds of errors generate signals&mdash;in fact, most do not. For example, opening a nonexistent file is an error, but it does not raise a signal; instead,open&nbsp;returns&nbsp;-1.&nbsp;</li>\n	<li>An <span style=\"color:rgb(178, 34, 34)\">external event</span> generally has to do with I/O or other processes. These include the arrival of input, the expiration of a timer, and the termination of a child process.</li>\n	<li>An<span style=\"color:rgb(178, 34, 34)\"> <strong>explicit request</strong></span> means the use of a library function <span style=\"color:rgb(178, 34, 34)\"><strong>such as&nbsp;<code>kill</code>&nbsp;whose purpose is specifically to generate a signal.</strong></span></li>\n	<li>When a signal is generated, it becomes&nbsp;pending. Normally it remains pending for just a short period of time and then is&nbsp;delivered&nbsp;to the process that was signaled. However, if that kind of signal is currently&nbsp;blocked, it may remain pending indefinitely&mdash;until signals of that kind are&nbsp;unblocked. Once unblocked, it will be delivered immediately.</li>\n	<li>When the signal is delivered, whether right away or after a long delay, the&nbsp;specified action&nbsp;for that signal is taken. For certain signals, such is&nbsp;<span style=\"color:rgb(178, 34, 34)\">SIGKILL&nbsp;and&nbsp;SIGSTOP</span>, the action is fixed, but for most signals, the program has a choice: ignore the signal, specify a&nbsp;handler function, or accept the&nbsp;default action&nbsp;for that kind of signal. The program specifies its choice using functions such as&nbsp;signal&nbsp;or&nbsp;sigaction&nbsp;(see&nbsp;Signal Actions). We sometimes say that a handler&nbsp;catches&nbsp;the signal. While the handler is running, that particular signal is normally blocked.</li>\n	<li>If the specified action for a kind of signal is to ignore it, then any such signal which is generated is discarded immediately. This happens even if the signal is also blocked at the time. A signal discarded in this way will never be delivered, not even if the program subsequently specifies a different action for that kind of signal and then unblocks it.</li>\n	<li>If a signal arrives which the program has neither handled nor ignored, its&nbsp;default action&nbsp;takes place. Each kind of signal has its own default action.&nbsp;For most kinds of signals, the default action is to terminate the process. For certain kinds of signals that represent &ldquo;harmless&rdquo; events, the default action is to do nothing.</li>\n</ul>\n\n<p>Each signal name is <span style=\"color:rgb(178, 34, 34)\">a macro which stands for a positive integer</span>&mdash;the&nbsp;<em>signal number</em>&nbsp;for that kind of signal.&nbsp;<span style=\"color:rgb(178, 34, 34)\"><strong>Types of termination signals</strong></span>:</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. SIGTERM</strong></span></p>\n\n<ul>\n	<li>The&nbsp;SIGTERM&nbsp;signal is a generic signal used to cause program termination. Unlike&nbsp;SIGKILL, this signal can be blocked, handled, and ignored. It is the normal way to politely ask a program to terminate.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">The shell command&nbsp;kill&nbsp;generates&nbsp;SIGTERM&nbsp;by default</span>.</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. SIGINT</strong></span></p>\n\n<ul>\n	<li>The&nbsp;SIGINT&nbsp;(&ldquo;program interrupt&rdquo;) signal is sent when the user types the INTR character (normally <strong><span style=\"color:rgb(178, 34, 34)\">ctrl+c</span></strong>).</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3. SIGKILL</strong></span></p>\n\n<ul>\n	<li>The&nbsp;SIGKILL&nbsp;signal is used to cause immediate program termination. <span style=\"color:rgb(178, 34, 34)\">It cannot be handled or ignored</span>, and is therefore always fatal. <span style=\"color:rgb(178, 34, 34)\">It is also not possible to block this signal</span>.</li>\n	<li>This signal is usually generated only by <span style=\"color:rgb(178, 34, 34)\">explicit request.</span> Since it cannot be handled, you should generate it only <span style=\"color:rgb(178, 34, 34)\">as a last resort</span>, after first trying a less drastic method such as&nbsp;C-c&nbsp;or&nbsp;SIGTERM. If a process does not respond to any other termination signals, sending it a&nbsp;SIGKILL&nbsp;signal will almost always cause it to go away.</li>\n	<li>In fact, if&nbsp;SIGKILL&nbsp;fails to terminate a process, that by itself constitutes an operating system bug which you should report.</li>\n	<li>The system will generate&nbsp;SIGKILL&nbsp;for a process itself under some unusual conditions where the program cannot possibly continue to run (even to run a signal handler).</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>4. SIGHUP</strong></span></p>\n\n<ul>\n	<li>The&nbsp;SIGHUP&nbsp;(&ldquo;<span style=\"color:rgb(178, 34, 34)\">hang-up</span>&rdquo;) signal is used to report that the <span style=\"color:rgb(178, 34, 34)\">user&rsquo;s terminal is disconnected</span>, perhaps because a network or telephone connection was broken.</li>\n	<li>This signal is also used to report the termination of the controlling process on a terminal to jobs associated with that session; this termination effectively disconnects all processes in the session from the controlling terminal.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\"><strong>In order to avoid termination of processes related to you remote terminal due to a network error, we can use &#39;nohup&#39; ahead of the command you want to execute</strong></span></li>\n</ul>','2016-01-03 22:41:23',8),(71,'Linux','Commands','Kill','<p>The&nbsp;<span style=\"color:rgb(178, 34, 34)\"><strong>kill</strong></span>&nbsp;command&nbsp;is used on&nbsp;Linux&nbsp;and other&nbsp;Unix-like&nbsp;operating systems&nbsp;to terminate&nbsp;processes&nbsp;without having to log out or&nbsp;reboot&nbsp;(i.e., restart) the computer. Thus, it is particularly important to the stability of such systems.</p>\n\n<ul>\n	<li>Like introduced in &#39;signal&#39; section, <span style=\"color:rgb(178, 34, 34)\">kill</span> command actually is type of <span style=\"color:rgb(178, 34, 34)\">&#39;explicit request</span>&#39; to send signal to process.</li>\n	<li>The syntax for kill is:&nbsp;<strong><span style=\"color:rgb(178, 34, 34)\">kill [signal&nbsp;or&nbsp;option] PID(s)</span></strong></li>\n	<li>The only&nbsp;argument&nbsp;(i.e., input) that is required is a PID, and as many PIDs as desired can be used in a single command. Typically no signal or&nbsp;option&nbsp;is used.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">signal is given in kill command to send specified signal to process, all supported signal can be listed by&nbsp;</span></li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">$ kill -l\n 1) SIGHUP	 2) SIGINT	 3) SIGQUIT	 4) SIGILL\n 5) SIGTRAP	 6) SIGABRT	 7) SIGEMT	 8) SIGFPE\n 9) SIGKILL	10) SIGBUS	11) SIGSEGV	12) SIGSYS\n13) SIGPIPE	14) SIGALRM	15) SIGTERM	16) SIGURG\n17) SIGSTOP	18) SIGTSTP	19) SIGCONT	20) SIGCHLD\n21) SIGTTIN	22) SIGTTOU	23) SIGIO	24) SIGXCPU\n25) SIGXFSZ	26) SIGVTALRM	27) SIGPROF	28) SIGWINCH\n29) SIGINFO	30) SIGUSR1	31) SIGUSR2</code></pre>\n\n<ul>\n	<li>both the digit and signal name can be used in kill command</li>\n	<li>if no signal is explicitly given, <span style=\"color:rgb(178, 34, 34)\">the signal SIGTERM is used by default</span></li>\n</ul>\n\n<p>Some examples of using <span style=\"color:rgb(178, 34, 34)\">kill</span></p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">kill process implicitly with SIGTERM</span></li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">ps -ef | grep -v grep | grep -Ei --color \'searchd|PPID\'\n  UID   PID  PPID   C STIME   TTY  TIME CMD\n  501  8703     1   0 11:52AM ??   0:00.00 searchd\n  501  8704  8703   0 11:52AM ??   0:36.35 searchd\n$ kill 8704\n$ ps -ef | grep -v grep | grep -Ei --color \'searchd|PPID\'\n  UID   PID  PPID   C STIME   TTY  TIME CMD\n</code></pre>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">kill process explicitly with SIGTERM</span></li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">ps -ef | grep -v grep | grep -Ei --color \'searchd|PPID\'\n  UID   PID  PPID   C STIME   TTY  TIME CMD\n  501 20458     1   0 5:50PM  ??   0:00.00 searchd\n  501 20459 20458   0 5:50PM  ??   0:00.08 searchd\n$ kill -TERM 20459\n$ ps -ef | grep -v grep | grep -Ei --color \'searchd|PPID\'\n  UID   PID  PPID   C STIME   TTY  TIME CMD</code></pre>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">kill process explicitly with SIGTERM&nbsp;</span></li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">ps -ef | grep -v grep | grep -Ei --color \'searchd|PPID\'\n  UID   PID  PPID   C STIME   TTY           TIME CMD\n  501 20512     1   0  5:51PM ??         0:00.00 searchd\n  501 20513 20512   0  5:51PM ??         0:00.05 searchd\n$ kill -15 20513\n$ ps -ef | grep -v grep | grep -Ei --color \'searchd|PPID\'\n  UID   PID  PPID   C STIME   TTY           TIME CMD</code></pre>\n\n<ul>\n	<li><strong><span style=\"color:#B22222\">Kill multiple processes in a batch</span></strong></li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">kill pid1 pid2 pid3 ...</code></pre>','2017-09-13 18:12:16',14),(72,'Linux','Commands','Locate + Which + Whereis','<p>These three commands help you locate path of named documents or application.</p>\n\n<p><span style=\"color:#B22222\"><strong>locate [filename]</strong></span></p>\n\n<ul>\n	<li>this locate the path of a given file name and return to stdout</li>\n	<li>it uses <span style=\"color:#B22222\">locatedb</span> command which indexes all pathes that can be publicly accessed in the system</li>\n	<li>in linux, you can set locatedb as a cron job to periodically update the index</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">$ locate sphinx.conf\n/usr/local/Cellar/sphinx/2.2.9_1/etc/sphinx.conf\n/usr/local/Cellar/sphinx/2.2.9_1/etc/sphinx.conf.dist\n/usr/local/Cellar/sphinx/2.2.9_1/etc/sphinx.conf.production\n/usr/local/etc/sphinx.conf.dist</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>which [app_name]</strong></span></p>\n\n<ul>\n	<li>it will search your $PATH (&quot;echo $PATH&quot;) for a given command and return the first match - the one that will be run if you specify the command without a path</li>\n	<li>as its name implies, its handy to use <span style=\"color:#B22222\">which</span> to check which&nbsp;command the system is using by default&nbsp;if you have multiple versions installed for a command.</li>\n</ul>\n\n<pre>\n<code>$ which searchd\n/usr/local/bin/searchd</code></pre>\n\n<p><strong><span style=\"color:#B22222\">whereis&nbsp;[app_name]</span></strong></p>\n\n<ul>\n	<li>will return any and all binaries, sources and man pages associated with the argument you give it.</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">$ whereis searchd\nsearchd: /usr/bin/searchd /usr/share/man/man1/searchd.1.gz</code></pre>\n\n<p>&nbsp;</p>','2015-12-02 20:20:31',1),(73,'Mac OS X','App Install','Redmine','<p>As to Ei Capitan&nbsp;with a new security feature protecting core system files called &ldquo;<span style=\"color:rgb(178, 34, 34)\">System Integrity Protection</span>&rdquo; (SIP).You will face errors when loading redmine because the &#39;libsqlclient18.dylib&#39; cannot be loaded correctly, the workaround solutions is to run following command</p>\n\n<pre>\n<code class=\"language-bash\">sudo install_name_tool -change libmysqlclient.18.dylib /Applications/XAMPP/xamppfiles/lib/libmysqlclient.18.dylib /Library/Ruby/Gems/2.0.0/gems/mysql2-0.3.20/lib/mysql2/mysql2.bundle\n</code></pre>','2016-01-02 00:50:28',1),(74,'Linux','Commands','Netstat + Lsof + Fuser','<p>Use these the following two&nbsp;commands to check the meta data of the ports which are being listened by programmes.</p>\n\n<p><span style=\"color:#B22222\"><strong>netstat(for linux dist)</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">$ sudo netstat -ltnp | grep -E \'searchd|PID\'\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp        0      0 0.0.0.0:9306            0.0.0.0:*               LISTEN      336/searchd\ntcp        0      0 0.0.0.0:9307            0.0.0.0:*               LISTEN      25554/searchd\ntcp        0      0 0.0.0.0:9310            0.0.0.0:*               LISTEN      25554/searchd\ntcp        0      0 0.0.0.0:9312            0.0.0.0:*               LISTEN      336/searchd</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>lsof(for linux dist and mac os x Ei Capitan)</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">$ sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -Ei --color \'searchd|mysql|PID\'\nCOMMAND   PID   USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME\nsearchd   336   root    7u  IPv4  940828      0t0  TCP *:9312 (LISTEN)\nsearchd   336   root    8u  IPv4  940829      0t0  TCP *:9306 (LISTEN)\nmysqld   1001  mysql   10u  IPv4   10007      0t0  TCP 127.0.0.1:3306 (LISTEN)\nsearchd 25554   root    7u  IPv4 1040470      0t0  TCP *:9310 (LISTEN)\nsearchd 25554   root    8u  IPv4 1040471      0t0  TCP *:9307 (LISTEN)</code></pre>\n\n<ul>\n	<li>-s means to choose states of protocol</li>\n	<li>-n means to not show host name instead of ip address</li>\n	<li>-P means to not show port name instead of port name</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\"># if -s is not supported when you are using older versions of lsof, then\n$ sudo lsof -iTCP -n | grep -E \'searchd.*LISTEN|PID\'\nCOMMAND   PID   USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME\nsearchd   336   root    7u  IPv4  940828      0t0  TCP *:9312 (LISTEN)\nsearchd   336   root    8u  IPv4  940829      0t0  TCP *:9306 (LISTEN)\nsearchd 25554   root    7u  IPv4 1040470      0t0  TCP *:9310 (LISTEN)\nsearchd 25554   root    8u  IPv4 1040471      0t0  TCP *:9307 (LISTEN)</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>If you want to know which programme is listening on a specified port, then we can use fuser command.</p>\n\n<p><span style=\"color:#B22222\"><strong>fuser</strong></span>:&nbsp;Show which processes (process id) use the named files, sockets, or filesystems.</p>\n\n<pre>\n<code class=\"language-bash\">$ sudo fuser -u -n tcp 3306\n3306/tcp:             1001(mysql)</code></pre>\n\n<ul>\n	<li>&#39;-n tcp&#39; means to search tcp sockets</li>\n	<li>-u means to add the user id who has&nbsp;the process listening on the specified port</li>\n</ul>\n\n<p>&nbsp;</p>','2015-12-03 19:08:06',7),(75,'Linux','Concept','Shell','<p><span style=\"color:#B22222\"><strong>1. What is a shell?</strong></span></p>\n\n<ul>\n	<li>Traditionally, when you log into a Unix system, the system would start one program for you. That program is a shell, i.e., a program designed to start other programs.</li>\n	<li>It&#39;s a command line shell: you start another program by typing its name.</li>\n	<li>The default shell, a Bourne shell, reads commands from ~/.profile when it is invoked as the login shell.</li>\n</ul>\n\n<p><span style=\"color:#B22222\"><strong>2. What is Bash?</strong></span></p>\n\n<ul>\n	<li>Bash is a Bourne-like shell.</li>\n	<li>It reads commands from ~/.bash_profile when it is invoked as the login shell,</li>\n	<li>and if that file doesn&#39;t exist, it tries reading ~/.profile instead.</li>\n	<li>You can invoke a shell directly at any time, for example by launching a terminal emulator inside a GUI environment.</li>\n	<li>If the shell is not a login shell, it doesn&#39;t read ~/.profile.</li>\n	<li>When you start bash as an <span style=\"color:#B22222\">interactive shell</span> (i.e.not to run a script), it reads ~/.bashrc (except when invoked as a login shell, then it only reads ~/.bash_profile or ~/.profile).&nbsp;</li>\n</ul>\n\n<p><span style=\"color:#B22222\"><strong>3. What is a login shell&nbsp;</strong></span></p>\n\n<ul>\n	<li>if you open a shell or terminal (or switch to one), and it asks you to log in (Username? Password?) before it gives you a prompt, it&#39;s a login shell.</li>\n	<li>if it doesn&#39;t (like gnome-terminal), and lets you use it straight away, it&#39;s a non-login shell.</li>\n	<li>if you are a normal user of Ubuntu Desktop, the only login shell is...your desktop (you type a password to get in, right ;)? Well, technically it&#39;s a login shell that starts a GUI, but that&#39;s getting in to jargon. And yes, it will read the settings in .profile)</li>\n</ul>\n\n<p><span style=\"color:#B22222\"><strong>4. Difference between shell profile files</strong></span></p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\"><strong>~/.profile</strong></span> is the place to put stuff that applies to your whole session, such as programs that you want to start when you log in (but not graphical programs, they go into a different file), and environment variable definitions.</li>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">~/.bashrc</span></strong> is the place to put stuff that applies only to bash itself, such as alias and function definitions, shell options, and prompt settings. (You could also put key bindings there, but for bash they normally go into ~/.inputrc.)</li>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">~/.bash_profile</span></strong> can be used instead of ~/.profile, but it is read by bash only, not by any other shell. (This is mostly a concern if you want your initialization files to work on multiple machines and your login shell isn&#39;t bash on all of them.) <span style=\"color:#B22222\">This is a logical place to include ~/.bashrc if the shell is interactive</span>.&nbsp; &nbsp;&nbsp;</li>\n</ul>\n\n<p>On modern unices, there&#39;s an added complication related to ~/.profile. If you log in in a graphical environment (that is, if the program where you type your password is running in graphics mode), you don&#39;t automatically get a login shell that reads ~/.profile. Depending on the graphical login program, on the window manager or desktop environment you run afterwards, and on how your distribution configured these programs, your ~/.profile may or may not be read. If it&#39;s not, there&#39;s usually another place where you can define environment variables and programs to launch when you log in, but there is unfortunately no standard location.</p>\n\n<p>Note that you may see here and there recommendations to either put environment variable definitions in ~/.bashrc or always launch login shells in terminals. Both are bad ideas. The most common problem with either of these ideas is that your environment variables will only be set in programs launched via the terminal, not in programs started directly with an icon or menu or keyboard shortcut.</p>\n\n<p>&sup1; For completeness, by request: if .bash_profile doesn&#39;t exist, bash also tries .bash_login before falling back to .profile. Feel free to forget it exists.<br />\n&nbsp;</p>','2016-01-02 01:08:10',1),(76,'Sphinx Search','Searchd','Tips','<p><strong><span style=\"color:#B22222\">1. Check Sphinx Version</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">searchd --help</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Add or remove index by rotate without restarting searchd</span></strong></p>\n\n<ul>\n	<li>After adding a new index to conf, you have to do <span style=\"color:rgb(178, 34, 34)\">--rotate --all</span> or <span style=\"color:rgb(178, 34, 34)\">--rotate new_index</span> to let searchd to serve the new index</li>\n	<li>After&nbsp;removing an old index from conf, any first following&nbsp;<span style=\"color:rgb(178, 34, 34)\">--rotate</span> command will also remove the index from searchd as well, makes sense since it is no way for indexer to index a non-existed index in order to tell searchd that this index is no longer needed.</li>\n</ul>','2015-12-14 23:12:35',1),(77,'Sphinx Search','Indexer','Tips','<p><span style=\"color:#B22222\"><strong>1. Index NULL value</strong></span></p>\n\n<ul>\n	<li>If a NULL value is returned to sql_attr_timestamp attribute, indexer will store it as 0 in final index.</li>\n	<li>If a NULL value is returned to sql_attr_string attribute, indexer will make the field empty(not null, but empty) in final index</li>\n</ul>','2015-12-05 18:34:59',0),(78,'Sphinx Search','Sphinx.conf','Source Setting','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1.&nbsp;sql_query_post_index</strong></span></p>\n\n<p>Post-index query. Optional, default value is empty. Applies to SQL source types (mysql,&nbsp;pgsql,&nbsp;mssql) only.</p>\n\n<p>This query is executed when indexing is fully and successfully completed. If this query produces errors, they are reported as warnings, but indexing is&nbsp;not&nbsp;terminated. It&#39;s result set is ignored.&nbsp;<span style=\"color:rgb(178, 34, 34)\">$maxid&nbsp;macro</span> can be used in its text; it will be expanded to maximum document ID which was actually fetched from the database during indexing. If no documents were indexed, <span style=\"color:rgb(178, 34, 34)\">$maxid will be expanded to 0.</span></p>','2015-12-14 22:49:39',2),(79,'Linux','Commands','Find','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. find a filename in a given directory</strong></span></p>\n\n<pre>\n<code class=\"language-bash\"># find filename in current folder\n$ find . -name sphinx.conf.0.php\n./sphinx.conf.0.php\n#use quotes if using wildcard symbol\n$ find . -name \'sphinx.conf*\'\n./sphinx.conf.0.php\n./sphinx.conf.1.php\n./sphinx.conf.2.php\n./sphinx.conf.3.php\n./sphinx.conf.4.php\n# another option is to use grep pipe together with find\n$ find . | grep \'sphinx.conf\'\n./sphinx.conf.0.php\n./sphinx.conf.1.php\n./sphinx.conf.2.php\n./sphinx.conf.3.php\n./sphinx.conf.4.php\n# find in case-insensitive mode\n$ find . -name \"sphinxdb*\"\n$ find . -iname \"sphinxdb*\"\n./SphinxDB.class.php</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">&nbsp;2. calculate how many files exist beneath a direcotry</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">$ find . -type f | wc -l\n83\n# f means only files\n# wc means word counts\n# l means only count number of lines</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3. find if a child directory exists beneath a directory</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">$ find . -type d -name \'statsit_*\'\n./statsit_alerts\n./statsit_backup\n./statsit_production\n./statsit_scraping\n./statsit_sphinx\n# -type is used to define type of targets to find\n# d means directory, f means files \n# if -type not given explicitly, -type f is used by default\n</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">4. find files based on modification time of the file</span></strong></p>\n\n<p>&nbsp;use the &#39;<strong><span style=\"color:rgb(178, 34, 34)\">mmin</span></strong>&#39; option, the following value&#39;s unit is minute</p>\n\n<pre>\n<code class=\"language-bash\">find . -mmin 20 #modified exactly 20 minutes ago\nfind . -mmin -20 #modified less than 20 minutes\nfind . -mmin +20 #modified more than 20 minutes</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">5. execute commands based on the find results</span></strong></p>\n\n<p>Against all found directories:</p>\n\n<pre>\n<code class=\"language-bash\"># change permission for all directories within current folder\nsudo find . -type d -exec chmod 700 {} \\;</code></pre>\n\n<p>Against all found files:</p>\n\n<pre>\n<code class=\"language-bash\"># change permission for all files within current folder\nsudo find . -type f -exec chmod 600 {} \\;</code></pre>','2017-11-05 23:37:46',20),(81,'JQuery','Functions','Event Trigger','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. trigger(event, event_obj, [param1, param2, param3, ...])</strong></span></p>\n\n<p>trigger() is used to automatically trigger an even over an element without touching the webpage, <span style=\"color:rgb(178, 34, 34)\">it is quite useful together with custom event which is created by developers,</span> e.g.</p>\n\n<pre>\n<code class=\"language-javascript\">//define a custom even and trigger it \n$(&#39;#triggerMe&#39;).on(&#39;customEvent&#39;, function(event, fstnm, lstnm){\n  console.log(&#39;I am &#39; + fstnm +&#39; &#39; + lstnm + &#39;, custom event feels cool!&#39;);\n});\n$(&#39;#triggerMe&#39;).trigger(&#39;customEvent&#39;, [&#39;Kan&#39;, &#39;Cong&#39;]);\n//&quot;I am Kan Cong, custom event feels cool!&quot;</code></pre>\n\n<ul>\n	<li>Note that you have to <span style=\"color:rgb(178, 34, 34)\">put all parameters into an array</span> which can be skipped if there is only one paramter</li>\n	<li>remember to <span style=\"color:rgb(178, 34, 34)\">make&nbsp;&#39;event&#39; be&nbsp;the first parameter&nbsp;of the event function</span>, otherwise following parameters won&#39;t work</li>\n</ul>','2016-05-25 18:08:32',5),(82,'JQuery','Selector',':hidden & :visible','<p>These are two handy selectors to find elements which are <span style=\"color:rgb(178, 34, 34)\"><strong>hidden or visble</strong></span>. For example:</p>\n\n<pre>\n<code class=\"language-javascript\">$(&#39;p:hidden&#39;).show();\n$(&#39;div:visible&#39;).slideUp();</code></pre>\n\n<p>And it is quite useful together with<strong><span style=\"color:rgb(178, 34, 34)\"> is() </span></strong>function to check whether an element is hidden or visible, e.g.</p>\n\n<pre>\n<code class=\"language-javascript\">if($(&#39;#hide_me&#39;).is(&#39;:visible&#39;)){\n  $(&#39;#hide_me&#39;).hide();\n}</code></pre>','2015-12-12 23:55:21',7),(83,'JQuery','Properties','JQuery Object','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. $object.length</strong></span></p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">.length</span> show number of matched elements in a jQuery object.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">.size()</span> is equivalent to .lengh, however is has been deprecated as jQuery version 1.8</li>\n</ul>\n\n<pre>\n<code class=\"language-html\">&lt;!-- html elements --&gt;\n&lt;div class=\'a\'&gt;&lt;/div&gt;\n&lt;div class=\'a\'&gt;&lt;/div&gt;\n&lt;div class=\'b\'&gt;&lt;/div&gt;\n&lt;div class=\'c\'&gt;&lt;/div&gt;\n&lt;div class=\'c\'&gt;&lt;/div&gt;\n&lt;!-- jquery --&gt;\n&lt;script&gt;\nvar a = $(\'.a\').length;\nvar b = $(\'.b\').length;\nvar c = $(\'.c\').length;\nconsole.log(\"There are \"+a+\" class a elements\");\nconsole.log(\"There are \"+b+\" class b elements\");\nconsole.log(\"There are \"+c+\" class c elements\");\n&lt;/script&gt;\n&lt;!-- results in console --&gt;\n\"There are 2 class a elements\"\n\"There are 1 class b elements\"\n\"There are 2 class c elements\"</code></pre>\n\n<p>&nbsp;</p>','2015-12-10 23:11:51',0),(84,'JavaScript','Object Properties','String Object','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. string.length</strong></span></p>\n\n<ul>\n	<li>return the number of characters in a string</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">var s = &#39;I am Kan&#39;;\nconsole.log(s.length);\n//8</code></pre>\n\n<p>&nbsp;</p>','2015-12-12 21:45:50',0),(85,'JavaScript','Object Properties','Array Object','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. array.length</strong></span></p>\n\n<ul>\n	<li>return the number of elements in an array</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">var a = [1,2,3,4,5]; \nconsole.log(a.length);\n//5</code></pre>\n\n<p>&nbsp;</p>','2015-12-12 21:46:15',0),(86,'PHP','Array Functions','Add & Remove Element','<p><span style=\"color:#B22222\"><strong><span style=\"font-size:14px\">Add new element(s) to the end or&nbsp;beginning of an array</span></strong></span></p>\n\n<p><span style=\"color:#B22222\">1.&nbsp;array_push(&amp;$array, $value1, $value2, ...)</span></p>\n\n<ul>\n	<li>Push one or more elements onto the end of array</li>\n	<li>Has the same effect as:</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">$array[] = $var;</code></pre>\n\n<ul>\n	<li>If you use&nbsp;array_push()&nbsp;to add one element to the array it&#39;s better to use&nbsp;$array[] =&nbsp;because in that way there is no overhead of calling a function.</li>\n	<li>\n	<p>This function operates directly on the original array <strong><span style=\"color:#B22222\">via reference&nbsp;without creating a new one</span></strong>, and returns the&nbsp;number of elements in the&nbsp;array after the operation</p>\n	</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-php\">$a = array(1,2,3);\n$b = array_push($a, 4, 5);\nvar_dump($a);\n//array(5) { [0]=&gt; int(1) [1]=&gt; int(2) [2]=&gt; int(3) [3]=&gt; int(4) [4]=&gt; int(5) } \nvar_dump($b);\n//int(5)</code></pre>\n\n<p><span style=\"color:#B22222\">2. array_unshift(&amp;$array, $value1, $value2, ...)</span></p>\n\n<ul>\n	<li>prepends passed elements to the front of the&nbsp;array</li>\n	<li>that the list of elements is prepended as a whole, so that the <span style=\"color:#B22222\">prepended elements stay in the same order</span></li>\n	<li>All numerical array keys will be modified to <span style=\"color:#B22222\">start counting from zero while literal keys won&#39;t be touched</span></li>\n	<li>This function operates directly on the original array <strong><span style=\"color:#B22222\">via reference without creating a new one</span></strong>, and returns the&nbsp;number of elements in the&nbsp;array after the operation</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-php\">$a = array(1,2,3);\n$b = array_unshift($a, 4, 5);\nvar_dump($a);\n//array(5) { [0]=&gt; int(4) [1]=&gt; int(5) [2]=&gt; int(1) [3]=&gt; int(2) [4]=&gt; int(3) } \nvar_dump($b);\n//int(5)</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><span style=\"color:#B22222\"><strong><span style=\"font-size:14px\">Remove element(s) from the end or&nbsp;beginning of an array</span></strong></span></p>\n\n<p><span style=\"color:#B22222\">1.&nbsp;array_pop(&amp;$array)</span></p>\n\n<ul>\n	<li>remove the last element from an array,&nbsp;shortening the&nbsp;array&nbsp;by one element.</li>\n	<li>and returns the <span style=\"color:#B22222\">value but not key </span>of the&nbsp;removed element&nbsp;of the&nbsp;array,&nbsp;NULL&nbsp;if&nbsp;array&nbsp;is empty or is not an array.</li>\n	<li>This function operates directly on the original array <strong><span style=\"color:#B22222\">via reference without creating a new one</span></strong></li>\n	<li>This function will&nbsp;<span style=\"color:#B22222\">reset()&nbsp;the&nbsp;array&nbsp;pointer of the input array</span> to the first element after use.</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-php\">$a = array(1,2,3,4,\'Kan\'=&gt;\'Cong\');\n$pop = array_pop($a);\nvar_dump($a);\n//array(4) { [0]=&gt; int(1) [1]=&gt; int(2) [2]=&gt; int(3) [3]=&gt; int(4) }\nvar_dump($pop);\n//string(4) \"Cong\"</code></pre>\n\n<p><span style=\"color:#B22222\">2. array_shift(&amp;$array)</span></p>\n\n<ul>\n	<li>Remove the first element off the beginning of array</li>\n	<li>and returns the <span style=\"color:#B22222\">value but not key </span>of the&nbsp;removed element&nbsp;of the&nbsp;array,&nbsp;NULL&nbsp;if&nbsp;array&nbsp;is empty or is not an array.</li>\n	<li>All <span style=\"color:#B22222\">numerical array keys will be modified to start counting from zero while literal keys won&#39;t be touched</span>.</li>\n	<li>This function operates directly on the original array <strong><span style=\"color:#B22222\">via reference without creating a new one.</span></strong></li>\n	<li>This function will&nbsp;<span style=\"color:#B22222\">reset()&nbsp;the&nbsp;array&nbsp;pointer of the input array</span> to the first element after use.</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-php\">$a = array(1,2,3,4,\'Kan\'=&gt;\'Cong\');\n$shift = array_shift($a);\nvar_dump($a);\n//array(4) { [0]=&gt; int(2) [1]=&gt; int(3) [2]=&gt; int(4) [\"Kan\"]=&gt; string(4) \"Cong\" }\nvar_dump($shift);\n//int(1)</code></pre>\n\n<p>&nbsp;</p>','2015-12-12 13:00:25',2),(87,'JavaScript','Array Object Methods','Add & Remove Elements','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. array.push(element1, element2,...)</span></strong></p>\n\n<ul>\n	<li>Add element(s) into the end of an array</li>\n	<li>Return the new length of array after the operation</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-javascript\">var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nvar new_length = fruits.push(\"Kiwi\");\nconsole.log(fruits);\n//[\"Banana\", \"Orange\", \"Apple\", \"Mango\", \"Kiwi\"]\nconsole.log(new_length);\n//5</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. array.unshift(element1, element2,...)</span></strong></p>\n\n<ul>\n	<li>Add element(s) into the beginning&nbsp;of an array</li>\n	<li>Return the new length of array after the operation</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">and numerical keys will be recalculated from zero, not influence literal keys</span></li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-javascript\">var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nvar new_length = fruits.unshift(\"Kiwi\");\nconsole.log(fruits);\n//[\"Kiwi\", \"Banana\", \"Orange\", \"Apple\", \"Mango\"]\nconsole.log(new_length);\n//5\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3. array.pop()</strong></span></p>\n\n<ul>\n	<li>Remove the last element of an array</li>\n	<li>and return the poped element</li>\n	<li>This method changes the length of an array</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-javascript\">var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nvar abandoned_ele = fruits.pop();\nconsole.log(fruits);\n//[\"Banana\", \"Orange\", \"Apple\"]\nconsole.log(abandoned_ele);\n//\"Mango\"</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">4. array.shift()</span></strong></p>\n\n<ul>\n	<li>Remove the first element off of an array</li>\n	<li>and return the shifted element</li>\n	<li>This method changes the length of an array</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">and numerical keys will be recalculated from zero, not influence literal key</span></li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-javascript\">var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nvar abandoned_ele = fruits.shift();\nconsole.log(fruits);\n//[\"Orange\", \"Apple\", \"Mango\"]\nconsole.log(abandoned_ele);\n//\"Banana\"</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">5. array.splice()</span></strong></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">5.1 remove element with specific index</span></p>\n\n<p>array.splice(a, b)</p>\n\n<ul>\n	<li>a means <span style=\"color:#00A8FF\">index</span> to start remove</li>\n	<li>b means <span style=\"color:#52bb5d\">number of elements</span> to remove</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">var array1 = [1, 2, 3, 4, 5];\narray1.splice(2, 1);\nconsole.log(array1);\n//[1, 2, 4, 5]</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">5.2 insert element after specific index</span></p>\n\n<p>array.splice(a, b, c)</p>\n\n<ul>\n	<li>a means the <span style=\"color:#00A8FF\">index after which you insert new element</span></li>\n	<li>if <span style=\"color:#52bb5d\">b is set to 0,</span> then we can set element to insert by set c</li>\n	<li>c is the element to insert&nbsp;</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">var array1 = [1, 2, 3, 4, 5];\narray1.splice(2, 0, 33);\nconsole.log(array1);\n//[1, 2, 3, 33, 4, 5]</code></pre>\n\n<p>&nbsp;</p>','2016-01-28 20:09:30',4),(88,'Statsit','Work-Flow','ListenR','<table align=\"center\" border=\"1\" cellpadding=\"10\" cellspacing=\"0\" style=\"margin-bottom:5px; width:600px\">\n	<caption>\n	<p><strong><span style=\"color:rgb(178, 34, 34)\">Input Fields Mapping</span></strong></p>\n	</caption>\n	<tbody>\n		<tr>\n			<td style=\"text-align:center\"><span style=\"color:rgb(178, 34, 34)\">ID</span></td>\n			<td style=\"text-align:center\">Purpose</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#txtDateRange</td>\n			<td style=\"text-align:center\">Time scope of search</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#lstSavedSearch</td>\n			<td style=\"text-align:center\">Select Saved Search</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#txtKeywords1</td>\n			<td style=\"text-align:center\">Columns</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#txtKeywords2</td>\n			<td style=\"text-align:center\">Rows</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#txtkeywordExclude</td>\n			<td style=\"text-align:center\">Negative</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#txtKeywords3</td>\n			<td style=\"text-align:center\">Within Proximity of</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#txtProximityRange</td>\n			<td style=\"text-align:center\">No. of Words</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#lstDataType</td>\n			<td style=\"text-align:center\">Data Format(list, table)</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#txtSnippetSize</td>\n			<td style=\"text-align:center\">Snippet size</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#txtDomain</td>\n			<td style=\"text-align:center\">Domains</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#txtCountry</td>\n			<td style=\"text-align:center\">Countries</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#txtLimit</td>\n			<td style=\"text-align:center\">Row Limit(50 by default)</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#txtOffset</td>\n			<td style=\"text-align:center\">Rows starting from(0 by default)</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#intUniqueAuthor</td>\n			<td style=\"text-align:center\">Independent Sampling(Twitter Only)</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#intRandomize</td>\n			<td style=\"text-align:center\">Sorting(random, reactions, author, etc)</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#2ndReportType</td>\n			<td style=\"text-align:center\">All Conversations, source, author, platform, etc</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#lstReportType (hidden input)</td>\n			<td style=\"text-align:center\">Types of Report(snippets, number, etc)</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#exportType</td>\n			<td style=\"text-align:center\">Types of Report Output(html, csv, etc)</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#txtTitle</td>\n			<td style=\"text-align:center\">Email Alerts Title</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#lstAlertType</td>\n			<td style=\"text-align:center\">Weekly, Monthly, Daily</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#txtEmails</td>\n			<td style=\"text-align:center\">Email addreses for alerts</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">lstAccount(name of input field)</td>\n			<td style=\"text-align:center\">holde the value of currently seleted sample ID</td>\n		</tr>\n		<tr>\n			<td style=\"text-align:center\">#lstDateType</td>\n			<td style=\"text-align:center\">Time Series(Aggregate Data, Monthly, Weekly, Daily)</td>\n		</tr>\n	</tbody>\n</table>\n\n<div style=\"clear: both; margin-bottom: 5px;\">&nbsp;</div>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><span style=\"font-size:22px\"><span style=\"color:rgb(178, 34, 34)\"><strong>Work-flow(in page custom.php)</strong></span></span></p>\n\n<p style=\"text-align:center\">&nbsp;</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>A .When clicking &quot;Search&quot; button, JS will</strong></span></p>\n\n<ol>\n	<li>check if required fields of search form are filled</li>\n	<li>and confirm the filled values are all acceptable</li>\n	<li>After confirmation passes, the original <span style=\"color:rgb(178, 34, 34)\">url of the page</span>, i.e. custom.php will be passed as the<span style=\"color:rgb(178, 34, 34)\"> value of attribute &quot;action&quot; </span>for form&nbsp;<span style=\"color:rgb(178, 34, 34)\">#form1&nbsp;</span>with POST method</li>\n</ol>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">B. Instantiate Request class</span></strong></p>\n\n<ol>\n	<li>if <span style=\"color:rgb(178, 34, 34)\">$_SERVER[&#39;REQUEST_METHOD&#39;]</span> is set, then\n\n	<ul>\n		<li>fill <span style=\"color:rgb(178, 34, 34)\">$this-&gt;mixPropertyArray</span> with key-value pairs from elements of $_SERVER</li>\n		<li>fill <span style=\"color:rgb(178, 34, 34)\">$this-&gt;mixPostArray</span> with key-value pairs from elements of $_POST</li>\n		<li>fill <span style=\"color:rgb(178, 34, 34)\">$this-&gt;mixGetArray</span> with key-value pairs from elements of $_GET</li>\n		<li>fill <span style=\"color:rgb(178, 34, 34)\">$this-&gt;mixParamArray</span> with key-value pairs from elements of $_REQUEST</li>\n	</ul>\n	</li>\n	<li>run&nbsp;<span style=\"color:rgb(178, 34, 34)\">RequestRegistry::SetRequest($this)</span> which uses Request object defined above&nbsp;as the argument\n	<ul>\n		<li>which will instantiate RequestRegistry</li>\n		<li>and set <span style=\"color:rgb(178, 34, 34)\">$this-&gt;mixValueArray(&#39;request&#39;) =&nbsp;Request_object</span></li>\n	</ul>\n	</li>\n</ol>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>C. Call&nbsp;RequestRegistry::GetRequest()</strong></span></p>\n\n<ol>\n	<li>to set <span style=\"color:rgb(178, 34, 34)\">$objRequest =&nbsp;RequestRegistry_instance-&gt;mixValueArray(&#39;request&#39;) </span>defined in above step</li>\n</ol>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>D. Instantiate ReportManager class with $objRequest as the argument</strong></span></p>\n\n<ol>\n	<li>set <span style=\"color:rgb(178, 34, 34)\">$this-&gt;objStatsitApi</span> a new instance of StatsitApi class</li>\n	<li>set <span style=\"color:rgb(178, 34, 34)\">$this-&gt;objRequest = $objRequest</span>&nbsp;which is defined in Step C</li>\n	<li>Instantiate&nbsp;<span style=\"color:rgb(178, 34, 34)\">SearchOptions()</span> class\n	<ul>\n		<li>with&nbsp;<span style=\"color:rgb(178, 34, 34)\">$objRequest</span> as the argument which is defined in Step C</li>\n		<li>if $objRequest is an instance of Request class, then&nbsp;\n		<ul>\n			<li><span style=\"color:rgb(178, 34, 34)\">$this-&gt;mixPropertyArray[$strName]</span> = $objRequest-&gt;GetPost($strName)</li>\n			<li>if any GET values exits in $objRequest, then GET value will override POST value when they share the same key:&nbsp;<span style=\"color:rgb(178, 34, 34)\">$this-&gt;mixPropertyArray[$strName] </span>= $objRequest-&gt;GetGet($strName)</li>\n		</ul>\n		</li>\n		<li>assign email alert name to&nbsp;<span style=\"color:rgb(178, 34, 34)\">$this-&gt;strTitle = $objRequest-&gt;GetPost(&#39;txtTitle&#39;)</span></li>\n		<li>assign current user id to&nbsp;<span style=\"color:rgb(178, 34, 34)\">$this-&gt;intUserId = $objRequest-&gt;GetPost(&#39;intUserId&#39;)</span>​</li>\n	</ul>\n	</li>\n	<li>And then Assign the instance of SearchOptions()<span style=\"color:rgb(178, 34, 34)\">​​</span>&nbsp;to&nbsp;<span style=\"color:rgb(178, 34, 34)\">$this-&gt;objSearchOptions</span>&nbsp;</li>\n</ol>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>E. Assign the instance of ReportManager class defined above&nbsp;to variable&nbsp;$objReportManager</strong></span></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>F. Call ProcessForm() function on $objectReportManager to generate the report</strong></span></p>\n\n<ol>\n	<li>&nbsp;</li>\n</ol>\n\n<p>&nbsp;</p>','2016-01-01 19:57:32',1),(89,'JavaScript','String Object Methods','Basics','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. string.indexOf(needle)</strong></span></p>\n\n<ul>\n	<li>returns the position of the first occurrence of a specified value in a string</li>\n	<li>returns -1 if the value to search for never occurs.</li>\n	<li>The indexOf() method is <span style=\"color:rgb(178, 34, 34)\">case sensitive</span></li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">var s = \'I am Kan\';\nconsole.log(s.indexOf(\'am\')); // 2\nconsole.log(s.indexOf(\'Am\')); // -1</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. string.lastIndexOf(needle)</strong></span></p>\n\n<ul>\n	<li>returns the position of the last occurrence of a specified value in a string</li>\n	<li>The string is searched from the end to the beginning, but returns the index starting at the beginning, at postion 0.</li>\n	<li>returns -1 if the value to search for never occurs.</li>\n	<li>The indexOf() method is <span style=\"color:rgb(178, 34, 34)\">case sensitive</span></li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">var s = \'I am Kan, Who am I?\';\nconsole.log(s.lastIndexOf(\'am\')); // 14\nconsole.log(s.lastIndexOf(\'Am\')); // -1</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3. string.split(separator)</strong></span></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">string.split()</span>&nbsp;method in JS is similar to <span style=\"color:rgb(178, 34, 34)\">explode()</span> function in PHP to split a string into substrings according to separator, and each of which is saved as an element in&nbsp;an array.</p>\n\n<pre>\n<code class=\"language-javascript\">var string1 = \'Hello World\';\nvar array1 = string1.split(\' \');\nconsole.log(array1);\n//[\"Hello\", \"World\"]</code></pre>\n\n<p>Note: <span style=\"color:rgb(0, 168, 255)\">array.join()</span> in JS is like <span style=\"color:rgb(82, 187, 93)\">implode()</span> in php to <span style=\"background-color:rgb(230, 222, 34); color:black\">convert array elements into a string</span></p>\n\n<p><strong><span style=\"color:#B22222\">4. string.replace(search, replace)</span></strong></p>\n\n<p><span style=\"color:#B22222\">4.1 default behave</span></p>\n\n<ul>\n	<li>by default, only the first occurance of search string will be replaced.</li>\n	<li>it will returned the replaced string</li>\n	<li><span style=\"background-color:#FFEC00\">the original string won&#39;t be touched</span></li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">var a = \'I am female\';\nvar b = a.replace(\'female\', \'male\');\nconsole.log(a);// \"I am female\"\nconsole.log(b);// \"I am male\"</code></pre>\n\n<p><span style=\"color:#B22222\">4.2 replace globally</span></p>\n\n<ul>\n	<li>put search string inside slashes &quot;//&quot;</li>\n	<li>use &#39;g&#39; as the surfix to do global search and replace</li>\n	<li>use &#39;i&#39; as surfix to do case-insensative search and replace</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">var a = \'hello_world/morning red\';\nvar b = a.replace(//| |_|&amp;/g, \'-\');//replace \'/\', \' \', \'_\' or \'&amp;\' with \'-\'\nconsole.log(b);//\"hello-world-morning-red\"</code></pre>\n\n<p>&nbsp;</p>','2016-10-17 18:09:40',1),(90,'JavaScript','Array Object Methods','Index','<p><span style=\"color:#B22222\"><strong>1. array.indexOf(value, start_position)</strong></span></p>\n\n<ul>\n	<li>Searches the array for the specified item, and returns its position</li>\n	<li>The search will start at the specified position(optional), or at the beginning if no start position is specified, and end the search at the end of the array</li>\n	<li><span style=\"color:#B22222\">Returns -1 if the item is not found</span></li>\n	<li>If the item is present more than once, the indexOf method returns the position of the <span style=\"color:#B22222\">first occurence</span></li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\", \"Banana\", \"Orange\", \"Apple\"];\nvar a = fruits.indexOf(\"Apple\", 4);\nconsole.log(a);// 6</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>1. array.lastIndexOf(value, start_position)</strong></span></p>\n\n<ul>\n	<li>Searches the array for the specified item, and returns its position</li>\n	<li>The search will start at the specified position(optional), or at the end if no start position is specified, and end the search at the beginning of the array</li>\n	<li><span style=\"color:#B22222\">Returns -1 if the item is not found</span></li>\n	<li>If the item is present more than once, the indexOf method returns the position of the <span style=\"color:#B22222\">last occurence</span></li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\", \"Banana\", \"Orange\", \"Apple\"];\nvar a = fruits.lastIndexOf(\"Banana\", 5);\nconsole.log(a);// 5</code></pre>\n\n<p>&nbsp;</p>','2015-12-12 22:01:44',0),(91,'JavaScript','Misc','Array & Object','<p><strong><span style=\"color:rgb(178, 34, 34)\">Note</span>: </strong></p>\n\n<ul>\n	<li>In PHP where array can have numerical key-value pair or literal key-value pair mixed together, so array functions available for both type of array elements in PHP.</li>\n	<li>But in JavaScript, array element can only have numerical key-value pair elements, and literal key-value pair only can be defined in Object, i.e. json. <span style=\"background-color:rgb(230, 222, 34); color:black\">So&nbsp;array methods can not be applied to object but only for array(even thought everything in JS is an object)</span>.&nbsp;</li>\n</ul>','2016-01-30 11:04:59',2),(92,'Sphinx Search','SphinxQL','Full-Text Match Syntax','<p><span style=\"color:rgb(178, 34, 34)\"><strong>For example we have an index named &quot;test1&quot; which indexed the &quot;documents&quot; SQL table&nbsp;</strong></span></p>\n\n<pre>\n<code class=\"language-sql\">\"test1\":\n+------------+-----------+\n| Field      | Type      |\n+------------+-----------+\n| id         | bigint    |\n| title      | field     |\n| content    | field     |\n| group_id   | uint      |\n| date_added | timestamp |\n+------------+-----------+\n\n\"documents\":\n+----+----------+-----------+---------------------+-----------------+---------------------------------------------------------------------------+\n| id | group_id | group_id2 | date_added          | title           | content                                                                   |\n+----+----------+-----------+---------------------+-----------------+---------------------------------------------------------------------------+\n|  1 |        1 |         5 | 2015-08-11 18:23:50 | test one        | this is my test document number one. also checking search within phrases. |\n|  2 |        1 |         6 | 2015-08-11 18:23:50 | test two        | this is my test document number two                                       |\n|  3 |        2 |         7 | 2015-08-11 18:23:50 | another doc     | this is another group                                                     |\n|  4 |        2 |         8 | 2015-08-11 18:23:50 | doc number four | this is to test groups                                                    |\n|  5 |        3 |         9 | 2015-10-22 15:59:41 | doc number five | this is to try MAYBE groups                                               |\n+----+----------+-----------+---------------------+-----------------+---------------------------------------------------------------------------+\n</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Syntax and examples</span></strong></p>\n\n<pre>\n<code class=\"language-sql\">1. OR (|)\n\nselect * from test1 where match (\'test | groups\');\n+------+----------+------------+\n| id   | group_id | date_added |\n+------+----------+------------+\n|    4 |        2 | 1439306630 |\n|    1 |        1 | 1439306630 |\n|    2 |        1 | 1439306630 |\n|    5 |        3 | 1445518781 |\n+------+----------+------------+\n\n2. MAYBE which is different from OR, the query word on the left side must be matched, the right side is optional\n\nselect * from test1 where match (\'test MAYBE groups\');\n+------+----------+------------+\n| id   | group_id | date_added |\n+------+----------+------------+\n|    4 |        2 | 1439306630 |\n|    1 |        1 | 1439306630 |\n|    2 |        1 | 1439306630 |\n+------+----------+------------+\n\n3. NOT (- or !)\n\nselect * from test1 where match (\'groups -test\');\n+------+----------+------------+\n| id   | group_id | date_added |\n+------+----------+------------+\n|    5 |        3 | 1445518781 |\n+------+----------+------------+\n\n4. Field search @fieldname and @!fieldname (except this field)\n\nselect * from test1 where match (\'@title (four | five) @content \"MAYBE\"\');\n+------+----------+------------+\n| id   | group_id | date_added |\n+------+----------+------------+\n|    5 |        3 | 1445518781 |\n+------+----------+------------+\nselect * from test1 where match (\'@!content groups\');\nEmpty set (0.00 sec)\n\n5. Field search position limit @fieldname[limit]: limit means number of words to search from the beginning of the field content\n\nselect * from test1 where match (\'@content[5] groups\');\n+------+----------+------------+\n| id   | group_id | date_added |\n+------+----------+------------+\n|    4 |        2 | 1439306630 |\n+------+----------+------------+\nselect * from test1 where match (\'@content[6] groups\');\n+------+----------+------------+\n| id   | group_id | date_added |\n+------+----------+------------+\n|    4 |        2 | 1439306630 |\n|    5 |        3 | 1445518781 |\n+------+----------+------------+\n\n6. Multi-fields search @(fieldname1,fieldname2) and @!(fieldname1,fieldname2), notice no space between fields, otherwise causes error\n\nselect * from test1 where match (\'@(title,content) four test groups\');\n+------+----------+------------+\n| id   | group_id | date_added |\n+------+----------+------------+\n|    4 |        2 | 1439306630 |\n+------+----------+------------+\n\n7. All fields search @*\n\nselect * from test1 where match (\'@* try\');\n+------+----------+------------+\n| id   | group_id | date_added |\n+------+----------+------------+\n|    5 |        3 | 1445518781 |\n+------+----------+------------+\n\n8. Phrase search \"phrase insde by double quotes\" to have perfect match\n\nselect * from test1 where match (\'try groups\');\n+------+----------+------------+\n| id   | group_id | date_added |\n+------+----------+------------+\n|    5 |        3 | 1445518781 |\n+------+----------+------------+\nselect * from test1 where match (\'\"try groups\"\');\nEmpty set (0.00 sec)\n\n9. Proximity search \"query words\"~distance: it means the query words must be found within less than (number of query words + distance) words, the same as NEAR operator\n\nselect * from test1 where match (\'\"is groups\"~3\');\n+------+----------+------------+\n| id   | group_id | date_added |\n+------+----------+------------+\n|    4 |        2 | 1439306630 |\n+------+----------+------------+\nselect * from test1 where match (\'\"is groups\"~4\');\n+------+----------+------------+\n| id   | group_id | date_added |\n+------+----------+------------+\n|    4 |        2 | 1439306630 |\n|    5 |        3 | 1445518781 |\n+------+----------+------------+\n\n10. Quorum(minimum threshold) match \"query words\"/number: it means at least number of \"query words\" must be matched in a given document\n\nselect * from test1 where match (\'\"I love to test document groups\"/4\');\nEmpty set (0.00 sec)\nselect * from test1 where match (\'\"I love to test document groups\"/3\');\n+------+----------+------------+\n| id   | group_id | date_added |\n+------+----------+------------+\n|    4 |        2 | 1439306630 |\n+------+----------+------------+\n\n11. Strict Order &lt;&lt; (before)\n\nselect * from test1 where match (\'one test\');\n+------+----------+------------+\n| id   | group_id | date_added |\n+------+----------+------------+\n|    1 |        1 | 1439306630 |\n+------+----------+------------+\nselect * from test1 where match (\'one &lt;&lt; test\');\nEmpty set (0.01 sec)\n\n12. Exact form modifier(=): this is introduced to avoid stemmed keywords match, e.g. \'run\' will match \'running\' or \'runs\' in default matching mode, if you use \"=run\", then only \"run\" in document will be a valid match\n\n\n13. Field start(^) and field end($), just like in regular expression, query word with this operator must be positioned at start or end of a full-text field\n\nselect * from test1 where match (\'^doc\');\n+------+----------+------------+\n| id   | group_id | date_added |\n+------+----------+------------+\n|    4 |        2 | 1439306630 |\n|    5 |        3 | 1445518781 |\n+------+----------+------------+\nselect * from test1 where match (\'doc$\');\n+------+----------+------------+\n| id   | group_id | date_added |\n+------+----------+------------+\n|    3 |        2 | 1439306630 |\n+------+----------+------------+\n\n14. NEAR operator(A NEAR/number B), which means B must be prior to or next to A within number words\n\nselect * from test1 where match (\'this NEAR/4 groups\');\n+------+----------+------------+\n| id   | group_id | date_added |\n+------+----------+------------+\n|    4 |        2 | 1439306630 |\n+------+----------+------------+\nselect * from test1 where match (\'this NEAR/5 groups\');\n+------+----------+------------+\n| id   | group_id | date_added |\n+------+----------+------------+\n|    4 |        2 | 1439306630 |\n|    5 |        3 | 1445518781 |\n+------+----------+------------+\n\n(one NEAR/7 two NEAR/7 three) query using NEAR is not really equivalent to a (\"one two three\"~7) one using keyword proximity operator. The difference here is that the proximity operator allows for up to 6 non-matching words between all the 3 matching words, but the version with NEAR is less restrictive: it would allow for up to 6 words between \'one\' and \'two\' and then for up to 6 more between that two-word matching and a \'three\' keyword.</code></pre>','2017-09-26 20:50:13',5),(93,'Sphinx Search','SphinxQL','Snippets','<pre>\n<code class=\"language-sql\">1. group same retweets by id of referenced tweet and only leave the latest retweet in query result with meta info like: total reach value, retweets count, retweets ids, etc.\nSELECT *, COUNT(*) AS repeats, GROUP_CONCAT(id) AS ids, SUM(reach) AS total_reach FROM test1 WHERE is_retweet = 1 GROUP BY original_id WITHIN GROUP ORDER BY datetime DESC ORDER BY original_id DESC;\n\n2. use interal() to categorize rows in sections related to given set of values, e.g.\nselect *, interval(date_added, NOW()-90*86400, NOW()-30*86400, NOW()-7*86400, NOW()) as period from test1;\n+------+----------+------------+-----------------+--------+\n| id   | group_id | date_added | title           | period |\n+------+----------+------------+-----------------+--------+\n|    1 |        1 | 1439306630 | test one        |      1 | created within 3 monthes\n|    2 |        1 | 1439306630 | test two        |      1 |\n|    3 |        2 | 1439306630 | another doc     |      1 |\n|    4 |        2 | 1439306630 | doc number four |      1 |\n|    5 |        3 | 1445518781 | doc number five |      3 | created within 1 week\n+------+----------+------------+-----------------+--------+\n</code></pre>\n\n<p>&nbsp;</p>','2015-12-14 22:32:13',0),(94,'Sphinx Search','Indexer','Reindex Step','<pre>\n<code class=\"language-bash\">#how to reindex the search\n\n#1.In Mac OS X\nsearchd --stop # to stop the search dameon to lock resource in /usr/local/var/data/ \nsudo indexer --all # to rebuild all indexes\nsearchd # open the daemon to precache all indexes for search\n\n#2. In Ubuntu\nservice sphinxsearch stop # to stop the search dameon to lock resource in /usr/local/var/data/ \nsudo indexer --all # to rebuild all indexes\nservice sphinxsearch start # open the daemon to precache all indexes for search\n\n#3 or use option rotate to more simply update the indexes on the fly\n# --rotate creates a second index, parallel to the first (in the same place, simply including .new in the filenames). Once complete, indexer notifies searchd via sending the SIGHUP signal, and searchd will attempt to rename the indexes (renaming the existing ones to include .old and renaming the .new to replace them), and then start serving from the newer files.\nsudo indexer --rotate --all \n</code></pre>\n\n<p>&nbsp;</p>','2015-12-14 22:38:45',0),(95,'Sphinx Search','Wiki','Basic Concepts','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. What is data source, document and fields</strong></span></p>\n\n<p>From Sphinx point of view, the data it indexes is a set of structured documents, each of which has the same set of fields and attributes. This is similar to SQL, where each row would correspond to a document, and each column to either a field or an attribute.</p>\n\n<p>Depending on what source Sphinx should get the data from, different code is required to fetch the data and prepare it for indexing. This code is called data source driver (or simply driver or data source for brevity).</p>\n\n<p>There can be as many sources per index as necessary. They will be sequentially processed in the very same order which was specified in index definition. All the documents coming from those sources will be merged as if they were coming from a single source.</p>\n\n<p>##########################################################</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. Full-text Fields Search</strong></span></p>\n\n<p>Full-text fields (or just fields for brevity) are the textual document contents that get indexed by Sphinx, and can be (quickly) searched for keywords.</p>\n\n<p>Fields are named, and you can limit your searches to a single field (eg. search through &quot;title&quot; only) or a subset of fields (eg. to &quot;title&quot; and &quot;abstract&quot; only). Sphinx index format generally supports up to 256 fields.</p>\n\n<p>Note that the original contents of the fields are not stored in the Sphinx index. The text that you send to Sphinx gets processed, and a full-text index (a special data structure that enables quick searches for a keyword) gets built from that text. But the original text contents are then simply discarded. Sphinx assumes that you store those contents elsewhere anyway.</p>\n\n<p>Moreover, it is impossible to fully reconstruct the original text, because the specific whitespace, capitalization, punctuation, etc will all be lost during indexing.</p>\n\n<p>##########################################################</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. What is attribute in Sphinx</span></strong></p>\n\n<p>Attributes are additional values associated with each document(row, tuple) that can be used to perform additional filtering and sorting during search.</p>\n\n<p>For instance, one might need to sort news search results by date and then relevance, or search through products within specified price range, or limit blog search to posts made by selected users, or group results by month. To do that efficiently, Sphinx allows to attach a number of additional attributes to each document, and store their values in the full-text index. It&#39;s then possible to use stored values to filter, sort, or group full-text matches.</p>\n\n<p>Attributes, unlike the fields, are not full-text indexed. They are stored in the index, but it is not possible to search them as full-text, and attempting to do so results in an error.</p>\n\n<p>Additionally, attributes are returned from the search daemon, while the indexed text is not.</p>\n\n<p>For example in sphinx.conf:<br />\n.......<br />\nsql_query = SELECT id, title, content,<br />\n&nbsp; &nbsp; author_id, forum_id, post_date FROM my_forum_posts<br />\nsql_attr_uint = author_id<br />\nsql_attr_uint = forum_id<br />\nsql_attr_timestamp = post_date<br />\n.......</p>\n\n<p>Currently supported attribute types are:<br />\n- unsigned integers (1-bit to 32-bit wide);<br />\n- UNIX timestamps;<br />\n- floating point values (32-bit, IEEE 754 single precision);<br />\n- strings (since 1.10-beta);<br />\n- JSON (since 2.1.1-beta);<br />\n- MVA, multi-value attributes (variable-length lists of 32-bit unsigned integers).</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3.1 docinfo&nbsp;</span></p>\n\n<p>The complete set of per-document attribute values is sometimes referred to as docinfo. Docinfos can either be stored separately from the main full-text index data (&quot;extern&quot; storage, in .spa file), or attached to each occurrence of document ID in full-text index data (&quot;inline&quot; storage, in .spd file).</p>\n\n<p>When using extern storage, a copy of .spa file (with all the attribute values for all the documents) is kept in RAM by searchd at all times. This is for performance reasons; random disk I/O would be too slow. On the contrary, inline storage does not require any additional RAM at all, but that comes at the cost of greatly inflating the index size.</p>\n\n<p>##########################################################</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>4. What is Indexes in Sphinx</strong></span></p>\n\n<p>To be able to answer full-text search queries fast, Sphinx needs to build a special data structure optimized for such queries from your text data. This structure is called index; and the process of building index from text is called indexing.</p>\n\n<p>Different index types are well suited for different tasks, Sphinx architecture allows internally for different index types(i.e. backends), to be implemented comparatively easily.</p>\n\n<p>Sphinx provides 2 different backends: a disk index backend, and a RT (realtime) index backend.</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4.1 Disk indexes&nbsp;</span><br />\nDisk indexes are designed to provide maximum indexing and searching speed, while keeping the RAM footprint as low as possible. That comes at a cost of text index updates. You can not update an existing document or incrementally add a new document to a disk index. You only can batch rebuild the entire disk index from scratch. (Note that you still can update document&#39;s attributes on the fly, even with the disk indexes.)</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4.2 RT indexes</span><br />\nRT indexes enable you to implement dynamic updates and incremental additions to the full text index. RT stands for Real Time and they are indeed &quot;soft realtime&quot; in terms of writes, meaning that most index changes become available for searching as quick as 1 millisecond or less</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4.3 Distributed indexes</span><br />\nCompared to disk and RT indexes, those are not a real physical backend, but rather just lists of either local or remote indexes that can be searched transparently to the application, with Sphinx doing all the chores of sending search requests to remote machines in the cluster, aggregating the result sets, retrying the failed requests, and even doing some load balancing.</p>\n\n<p>##########################################################</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">5. Important restrictions on source data</span></strong></p>\n\n<p>There are a few different restrictions imposed on the source data which is going to be indexed by Sphinx, of which the single most important one is:</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">ALL DOCUMENT IDS MUST BE UNIQUE UNSIGNED NON-ZERO INTEGER NUMBERS (32-BIT OR 64-BIT, DEPENDING ON BUILD TIME SETTINGS).</span></p>\n\n<p>##########################################################</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>6. Charset table, case folding, translation tables and replacement rules</strong></span></p>\n\n<p>When indexing some index, Sphinx fetches documents from the specified sources, splits the text into words, and does case folding so that &quot;Abc&quot;, &quot;ABC&quot; and &quot;abc&quot; would be treated as the same word (or, to be pedantic, term).</p>\n\n<p>To do that properly, Sphinx needs to know<br />\n- what encoding is the source text in (and this encoding should always be UTF-8);<br />\n- what characters are letters and what are not;<br />\n- what letters should be folded to what letters.</p>\n\n<p>This should be configured on a per-index basis using charset_table option. charset_table specifies the table that maps letter characters to their case folded versions. The characters that are not in the table are considered to be non-letters and will be treated as word separators when indexing or searching through this index.</p>\n\n<p>Default tables currently include English and Russian characters.</p>\n\n<p>you can also specify text pattern replacement rules. For example, given the rules</p>\n\n<p>regexp_filter = b(d+)&quot; =&gt; 1 inch<br />\nregexp_filter = (BLUE|RED) =&gt; COLOR</p>\n\n<p>the text &#39;RED TUBE 5&quot; LONG&#39; would be indexed as &#39;COLOR TUBE 5 INCH LONG&#39;, and &#39;PLANK 2&quot; x 4&quot;&#39; as &#39;PLANK 2 INCH x 4 INCH&#39;. Rules are applied in the given order. Text in queries is also replaced; a search for &quot;BLUE TUBE&quot; would actually become a search for &quot;COLOR TUBE&quot;. Note that Sphinx must be built with the --with-re2 option to use this feature.</p>\n\n<p>##########################################################</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>7. Indexing workflow</strong></span></p>\n\n<p>With all the SQL drivers, indexing generally works as follows.<br />\n- connection to the database is established;<br />\n- pre-query executed to perform any necessary initial setup, such as setting per-connection encoding with MySQL;<br />\n- main query is executed and the rows it returns are indexed;<br />\n- post-query is executed to perform any necessary cleanup;<br />\n- connection to the database is closed;<br />\n- indexer does the sorting phase (to be pedantic, index-type specific post-processing);<br />\n- connection to the database is established again;<br />\n- post-index query is executed to perform any necessary final cleanup;<br />\n- connection to the database is closed again.</p>\n\n<p>The difference between post-query and post-index query is in that post-query is run immediately when Sphinx received all the documents, but further indexing may still fail for some other reason. On the contrary, by the time the post-index query gets executed, it is guaranteed that the indexing was successful. Database connection is dropped and re-established because sorting phase can be very lengthy and would just timeout otherwise.</p>\n\n<p>##########################################################</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>8. Two main approaches to enable full-text index up-to-date</strong></span></p>\n\n<p>There are two major approaches to maintaining the full-text index contents up to date. Note, however, that both these approaches deal with the task of full-text data updates, and not attribute updates.</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">8.1 Live index update</span></p>\n\n<p>You can use disk-based indexes, partition them manually, and only rebuild the smaller partitions (so-called &quot;deltas&quot;) frequently.</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">8.1.1 Delta index update</span></p>\n\n<p>There&#39;s a frequent situation when the total dataset is too big to be reindexed from scratch often, but the amount of new records is rather small. Example: a forum with a 1,000,000 archived posts, but only 1,000 new posts per day.</p>\n\n<p>In this case, &quot;live&quot; (almost real time) index updates could be implemented using so called &quot;main+delta&quot; scheme. The idea is to set up two sources and two indexes, with one &quot;main&quot; index for the data which only changes rarely (if ever), and one &quot;delta&quot; for the new documents. In the example above, 1,000,000 archived posts would go to the main index, and newly inserted 1,000 posts/day would go to the delta index. Delta index could then be reindexed very frequently, and the documents can be made available to search in a matter of minutes.</p>\n\n<p>Specifying which documents should go to what index and reindexing main index could also be made fully automatic. One option would be to make a counter table which would track the ID which would split the documents, and update it whenever the main index is reindexed.</p>\n\n<p>Example 3.3. Fully automated live updates</p>\n\n<p># in MySQL<br />\nCREATE TABLE sph_counter<br />\n(<br />\n&nbsp; &nbsp; counter_id INTEGER PRIMARY KEY NOT NULL,<br />\n&nbsp; &nbsp; max_doc_id INTEGER NOT NULL<br />\n);</p>\n\n<p># in sphinx.conf<br />\nsource main<br />\n{<br />\n&nbsp; &nbsp; # ...<br />\n&nbsp; &nbsp; sql_query_pre = SET NAMES utf8<br />\n&nbsp; &nbsp; sql_query_pre = REPLACE INTO sph_counter SELECT 1, MAX(id) FROM documents<br />\n&nbsp; &nbsp; sql_query = SELECT id, title, body FROM documents<br />\n&nbsp; &nbsp; &nbsp; &nbsp; WHERE id&lt;=( SELECT max_doc_id FROM sph_counter WHERE counter_id=1 )<br />\n}</p>\n\n<p>source delta : main<br />\n{<br />\n&nbsp; &nbsp; sql_query_pre = SET NAMES utf8<br />\n&nbsp; &nbsp; sql_query = SELECT id, title, body FROM documents<br />\n&nbsp; &nbsp; &nbsp; &nbsp; WHERE id&gt;( SELECT max_doc_id FROM sph_counter WHERE counter_id=1 )<br />\n}</p>\n\n<p>index main<br />\n{<br />\n&nbsp; &nbsp; source = main<br />\n&nbsp; &nbsp; path = /path/to/main<br />\n&nbsp; &nbsp; # ... all the other settings<br />\n}</p>\n\n<p># note how all other settings are copied from main,<br />\n# but source and path are overridden (they MUST be)<br />\nindex delta : main<br />\n{<br />\n&nbsp; &nbsp; source = delta<br />\n&nbsp; &nbsp; path = /path/to/delta<br />\n}</p>\n\n<p>Note how we&#39;re overriding sql_query_pre in the delta source. We need to explicitly have that override. Otherwise REPLACE query would be run when indexing delta source too, effectively nullifying it. However, when we issue the directive in the inherited source for the first time, it removes all inherited values, so the encoding setup is also lost. So sql_query_pre in the delta can not just be empty; and we need to issue the encoding setup query explicitly once again.</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">8.2 RT(RealTime) index update</span></p>\n\n<p>Real-time indexes (or RT indexes for brevity) are a new backend that lets you insert, update, or delete documents (rows) on the fly. While querying of RT indexes is possible using any of the SphinxAPI, SphinxQL, or SphinxSE, updating them is only possible via SphinxQL at the moment.</p>\n\n<p>RT indexes should be declared in sphinx.conf, just as every other index type. Notable differences from the regular, disk-based indexes are:<br />\na) data sources are not required and ignored<br />\nb) you should explicitly enumerate all the text fields, not just attributes. Here&#39;s an example:</p>\n\n<p>Example 4.1. RT index declaration</p>\n\n<p>index rt<br />\n{<br />\n&nbsp; &nbsp; type = rt<br />\n&nbsp; &nbsp; path = /usr/local/sphinx/data/rt<br />\n&nbsp; &nbsp; rt_field = title<br />\n&nbsp; &nbsp; rt_field = content<br />\n&nbsp; &nbsp; rt_attr_uint = gid<br />\n}</p>\n\n<p>RT index can be accessed using MySQL protocol. INSERT, REPLACE, DELETE, and SELECT statements against RT index are supported. Both partial and batch INSERT syntaxes are supported, ie. you can specify a subset of columns, and insert several rows at a time. Deletions are also possible using DELETE statement; the only currently supported syntax is DELETE FROM &lt;index&gt; WHERE id=&lt;id&gt;. REPLACE(works the same as INSERT, except that it will override the old column with the same ID or primary key) is also supported, enabling you to implement updates.</p>\n\n<p>##########################################################</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>9. What is Ranking and Ranker in Sphinx</strong></span></p>\n\n<p>Ranking (aka weighting) of the search results can be defined as a process of computing a so-called relevance (aka weight) for every given matched document with regards to a given query that matched it. So relevance is in the end just a number attached to every document that estimates how relevant the document is to the query. Search results can then be sorted based on this number and/or some additional parameters, so that the most sought after results would come up higher on the results page.</p>\n\n<p>There is no single standard one-size-fits-all way to rank any document in any scenario. Moreover, there can not ever be such a way, because relevance is subjective. As in, what seems relevant to you might not seem relevant to me. Hence, in general case it&#39;s not just hard to compute, it&#39;s theoretically impossible.</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">9.1 Ranker</span></p>\n\n<p>So ranking in Sphinx is configurable. It has a notion of a so-called ranker. A ranker can formally be defined as a function that takes document and query as its input and produces a relevance value as output. In layman&#39;s terms, a ranker controls exactly how (using which specific algorithm) will Sphinx assign weights to the document.</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">9.2 Some Generally Used Built-in Rankers</span></p>\n\n<p>Sphinx ships with a number of built-in rankers suited for different purposes. A number of them uses two factors:<br />\n- phrase proximity (aka Longest Common Subsequence)<br />\n- BM25. (BM means best matching)</p>\n\n<p>Phrase proximity works on the keyword positions, while BM25 works on the keyword frequencies. Basically, the better the degree of the phrase match between the document body and the query, the higher is the phrase proximity (it maxes out when the document contains the entire query as a verbatim quote). And BM25 is higher when the document contains more rare words. We&#39;ll save the detailed discussion for later.</p>\n\n<p>BM25 is a bag-of-words retrieval function that ranks a set of documents based on the query terms appearing in each document, regardless of the inter-relationship between the query terms within a document (e.g., their relative proximity).</p>\n\n<p>##########################################################</p>','2015-12-14 22:52:22',2),(96,'Sphinx Search','Wiki','Ranking Theory','<p><span style=\"color:rgb(178, 34, 34)\"><strong>IDF and TF</strong></span></p>\n\n<p>IDF evaluates the level of commonness of a keyword, if the keyword appears in more documents, then IDF is smaller, if the keyword shows in fewer documents, then IDF is higher.<br />\nTF is the Term Frequency, the number of matched keyword occurrences in the field divided by number of all words in the field.<br />\nIDF and TF drag each other, so for the field level ranking factor &quot;tf_idf&quot;, if it&#39;s higher for a keyword, the field matches the keyword more than others.</p>\n\n<p><br />\n<span style=\"color:rgb(178, 34, 34)\"><strong>LCS</strong></span></p>\n\n<p>lcs (integer), the length of a maximum <span style=\"color:rgb(178, 34, 34)\">verbatim(means exactly)</span> match between the document and the query, counted in words. LCS stands for Longest Common Subsequence (or Subset). Takes a minimum value of 1 when only stray keywords were matched in a field, and a maximum value of query keywords count when the entire query was matched in a field verbatim (in the exact query keywords order). For example, if the query is &#39;hello world&#39; and the field contains these two words quoted from the query (that is, adjacent to each other, and exactly in the query order), lcs will be 2. For example, if the query is &#39;hello world program&#39; and the field contains &#39;hello world&#39;, lcs will be 2. Note that any subset of the query keyword works, not just a subset of adjacent keywords. For example, if the query is &#39;hello world program&#39; and the field contains &#39;hello (test program)&#39;, lcs will be 2 just as well, because both &#39;hello&#39; and &#39;program&#39; matched in the same respective positions as they were in the query. Finally, if the query is &#39;hello world program&#39; and the field contains &#39;hello world program&#39;, lcs will be 3.</p>','2015-12-14 23:14:24',0),(97,'Sphinx Search','Installation','Fix For Mac','<p>You might face issues if using XAMPP as the mysql server.&nbsp;What I have done to fix sphinx installation problem including:</p>\n\n<p>1. XAMPP is missing mysql-devel package which includes some libraries sphinx need, so download the mysql community server with the same version as in XAMPP, and copy the include folder into /Applications/XAMPP/xamppfiles/</p>\n\n<p>2. It is needed to do the following, otherwise the sphinx indexer will cause error because the library cannot be loaded</p>\n\n<pre>\n<code class=\"language-bash\">sudo ln -s /Applications/XAMPP/xamppfiles/lib/libmysqlclient.18.dylib /usr/local/lib/libmysqlclient.18.dylib\n</code></pre>\n\n<p>3. Install via Homebrew</p>\n\n<pre>\n<code class=\"language-bash\">brew install sphinx --with-mysql</code></pre>\n\n<p>4. Then create the sphinx configuration file</p>\n\n<pre>\n<code class=\"language-bash\">cd /usr/local/Cellar/sphinx/verion_name/etc/\ncp sphinx.conf.dist sphinx .conf</code></pre>\n\n<p>5. And edit the configuration file</p>\n\n<pre>\n<code class=\"language-bash\">sql_host        = localhost\nsql_user        = root\nsql_pass        =\nsql_db          = test\nsql_port        = 3306    # optional, default is 3306\nsql_sock        = /Applications/XAMPP/xamppfiles/var/mysql/mysql.sock\n</code></pre>\n\n<p>6. try to run the indexer to generate indexes to search by sphinx</p>\n\n<pre>\n<code class=\"language-bash\">cd /usr/local/Cellar/sphinx/verion/bin/\nindexer --all</code></pre>\n\n<p>7. run searchd to enable the sphinx searching</p>\n\n<pre>\n<code class=\"language-bash\">searchd /path/to/sphinx.conf</code></pre>\n\n<p>8. now connect to the mysql server to use SphinxQL to search index</p>\n\n<pre>\n<code class=\"language-sql\">mysql -h0 -P9306</code></pre>\n\n<p>&nbsp;</p>','2015-12-14 23:07:46',1),(98,'Sphinx Search','SphinxAPI','Basic Usage','<pre>\n<code class=\"language-php\">&lt;?php\n\nrequire &quot;./sphinxapi.php&quot;;\n\n$sp = new SphinxClient();\n\n$sp-&gt;SetServer(&#39;localhost&#39;, 9312);//9312 is for SphinxAPI, 9306 is for SphinxQL\n$sp-&gt;SetRetries(5, 100);\n$sp-&gt;SetArrayResult(false);\n$sp-&gt;SetLimits(0, 100);\n$sp-&gt;SetMaxQueryTime(0);\n// $sp-&gt;SetMatchMode(SPH_MATCH_EXTENDED); Deprecated\n$sp-&gt;SetRankingMode(SPH_RANK_PROXIMITY_BM25);\n\n$sp-&gt;SetSelect(&#39;id, group_id, title&#39;);\n$sp-&gt;SetFilter(&#39;group_id&#39;, array(1, 2, 3, 4, 5, 6), false);//like sphinxql &quot;WHERE grouo_id in (1, 2, 3, 4, 5, 6)&quot;\n$sp-&gt;SetFilterRange(&#39;group_id&#39;, 1, 6, false);//like sphinxql &quot;WHERE grouo_id BETWEEN 1 AND 6&quot;\n$sp-&gt;SetFilterString (&#39;title&#39;, &#39;test one&#39;, false);\n$sp-&gt;SetGroupBy(&#39;date_added&#39;, SPH_GROUPBY_YEAR, &#39;@count asc&#39;); // means &quot;group by group_id order by count(*) asc&quot;\n$sp-&gt;SetSortMode(SPH_SORT_EXTENDED, &#39;date_added desc&#39;);//like sphinxql &quot;within group order by date_added desc&quot;\n$results1 = $sp-&gt;Query(&#39;document&#39;, &#39;test1&#39;);//individual query \n$sp-&gt;AddQuery(&#39;@title test&#39;, &#39;test1&#39;);// like sphinxql &quot;FROM &#39;test1&#39; WHERE MATCH (&#39;@title test&#39;)&quot;\n$sp-&gt;AddQuery(&#39;test&#39;, &#39;test1&#39;);// like sphinxql &quot;FROM &#39;test1&#39; WHERE MATCH (&#39;test&#39;)&quot;\n$results2 = $sp-&gt;RunQueries();// used when AddQuery() is called ahead\n\n?&gt;\n</code></pre>','2016-12-06 10:49:32',0),(99,'Statsit','Work-Flow','Scrape & Process(Twitter)','<p>How web scraping works, make twitter as example to show the workflow:</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>testScrapingTwitter</strong></span></p>\n\n<ol>\n	<li>Run getSlotScrapingInfo() to fetch info of sample and keyword to search</li>\n	<li>Call <span style=\"color:rgb(178, 34, 34)\">iterate_process()</span> from process_twitter_machine</li>\n</ol>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>Process_twitter_machine</strong></span></p>\n\n<ol>\n	<li>Run <span style=\"color:rgb(178, 34, 34)\">iterate_process() </span>to scrape posts iterately, i.e.&nbsp;<span style=\"color:rgb(178, 34, 34)\">1 page(100 posts) per time</span>\n\n	<ul>\n		<li>Run twitter_api() to fetch JSON data from Twitter API&nbsp;and save them into mentionsInfo array. <span style=\"background-color:#FFEC00\">Geocode(latitude, longitude and radius) of given markets is fetched from global variable $geocde defined inside geocode.php file.</span></li>\n		<li>Call startProcessing() from aux_machine to implement database checking and saving actions</li>\n	</ul>\n	</li>\n</ol>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>Aux_machine (</strong>1 page(100 posts) per time)</span></p>\n\n<ol>\n	<li>Run getDuplicateKeys() to check if fetched results already existed in DB and filter out only new ones to continue</li>\n	<li>Run registerMentionAndGetId() to write all twitter ids of fetched results into mention_ids table and update the id element of each item in mentionsInfo array with its related mention_id in mention_ids table</li>\n	<li>Run createDPStartFile() to save each mentionsinfo of one page twitter api results into /shared/statsit_var/pool/&nbsp; in json format file and return the file path. In case any page of results cannot be written into disk, the mention ids of this page of results will be removed from mention_ids table of related Mmonitor database, so it is possible to re-scrape these tweets again in the future without losing these data forever</li>\n	<li>End of startProcessing() which executes &quot;nohup /usr/local/bin/php /shared/statsit/medmon/processing/dp.moderator.machine.php <span style=\"color:rgb(178, 34, 34)\">$slot_id $platform_name&nbsp;$infofilepath</span>&nbsp;&quot;</li>\n</ol>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">dp.moderator.machine.php (</span></strong><span style=\"color:rgb(178, 34, 34)\">1 page(100 posts) per time)</span></p>\n\n<ol>\n	<li>Call isProcessingAllowed() to check if this sample($slot_id) needs to be processed</li>\n	<li>Fetch <span style=\"color:rgb(178, 34, 34)\">all posts of one page</span> from the json file saved before in Aux_machine</li>\n	<li>Make a new instance of MentionAnalyzer class</li>\n</ol>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>Mention.analyzer.php (</strong>1 page(100 posts) per time<strong>)</strong></span></p>\n\n<ol>\n	<li>Set $this-&gt;account_id with $slot_id and $this-&gt;setting (setting field in account_info table in new_mm_pool database in 117 ) which is the sample&#39;s setting made via &#39;Sample Admin Panel&#39;</li>\n	<li>Call start_process() to begin process mentions</li>\n	<li>Inside start_process(),\n	<ul>\n		<li>call prepareAndValidateMentionsInfo()\n		<ul>\n			<li>Call storeMentionsPoolValue() to set data ready to write into mentions_pool table if\n			<ol>\n				<li>In the setting of this sample, &quot;publish_date&quot; is less than &quot;freeze_timestamp&quot;(if it exists)</li>\n				<li>This sample belongs to special group</li>\n			</ol>\n			</li>\n			<li>Call processMentionsDomains()&nbsp; to give &#39;domain_id&#39; value (from MMonitor_dbname.domains)&nbsp; for each mention in mentionsinfo</li>\n		</ul>\n		</li>\n		<li>For twitter, make new instance of UserAnalyzerTwitterNew class(from user_analyzer_machine.php)\n		<ul>\n			<li>Call processUserData() to count number of mentions for the same twitter user included in the current mentionsinfo</li>\n		</ul>\n		</li>\n		<li>For twitter, duplicate mention[&#39;description&#39;] into mention[&#39;html&#39;] for each mention in mentionsinfo</li>\n		<li>Call analyzeMention() for <span style=\"color:rgb(178, 34, 34)\">each mention</span>\n		<ul>\n			<li>Call run_post_analysis() to generate analysis data(three new columns &#39;relevancy&#39;, &#39;sentences&#39;, &#39;count&#39;) for current mention</li>\n			<li>Get another analysis data column &#39;bittags_sum&#39; for current mention by calling twitteAnalyzer-&gt;getBitTagsSum()</li>\n			<li>Call get_mention_data() to:\n			<ol>\n				<li>Set &#39;relevancy&#39;, &#39;bittags_sum&#39; for current mention by using analysis_data array got above</li>\n				<li>Set &#39;language&#39;, &#39;lookup_country&#39;, &#39;country&#39;, &#39;continent&#39;, &#39;no_views&#39;, &#39;no_comments&#39;, &#39;no_duggs&#39;, &#39;alexa_reach&#39;</li>\n				<li>Set &#39;reach&#39; by calling calculate_reach()</li>\n				<li>Set &#39;inlinks&#39; with the value of &#39;retweet_count&#39; if current mention is a non-retweet tweet</li>\n				<li>Set &#39;source_id&#39; with the value of twitter id</li>\n				<li>Set rest of columns in current mention with their original value</li>\n				<li>Return the completed mention_info for current mention</li>\n			</ol>\n			</li>\n			<li>Call storeMentionsValue() to place values of columns of current mention as an new element of array mentionsValues</li>\n			<li>Call storeMentionsPoolValue() to place values of columns of current mention as an new element of array mentionsPoolValues</li>\n		</ul>\n		</li>\n		<li>Call writeMentionsToDatabase() to (<span style=\"color:rgb(178, 34, 34)\">1 page(100 posts) per time</span>)\n		<ul>\n			<li>insert mentionsValues and mentionsPoolValues into mentions and mentions_pool tables repectively for this sample</li>\n			<li>Update sphinx2.sphinx_index tabe to set &#39;data_added_since&#39; to now() for this sample and set data_ready = 1 which is used to prioritize in the waiting list to get indexed by sphinx</li>\n			<li>Update users table in this sample&#39;s database to update count of posts of each user</li>\n		</ul>\n		</li>\n	</ul>\n	</li>\n	<li>Goes back to dp.moderator.machine.php&nbsp;</li>\n</ol>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">dp.moderator.machine.php(</span></strong><span style=\"color:rgb(178, 34, 34)\">1 page(100 posts) per time</span><strong><span style=\"color:rgb(178, 34, 34)\">)</span></strong></p>\n\n<ol>\n	<li>After finishing mentions processing, <span style=\"color:rgb(178, 34, 34)\">delete the related json file from disk</span></li>\n	<li>Back to&nbsp;-&gt;Aux_machine-&gt;Process_twitter_machine</li>\n</ol>\n\n<p>​<span style=\"color:rgb(178, 34, 34)\"><strong>Process_twitter_machine(</strong></span><span style=\"color:rgb(178, 34, 34)\">1 page(100 posts) per time</span><span style=\"color:rgb(178, 34, 34)\"><strong>)</strong></span></p>\n\n<ol>\n	<li>Update account_brand table in new_mm_pool for last_twitter_entry_str and last_twitter_scanned</li>\n	<li>Return $scrapingStats array which includes meta data of query including total_found, new_found and so on to testScrapingTwitter</li>\n</ol>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>testScrapingTwitter</strong></span></p>\n\n<ol>\n	<li>var_dump the $scrapingStats and finish unit test</li>\n</ol>','2017-02-08 17:00:12',2),(100,'PHP','Functions','New Function Learned','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. session_write_close()</strong></span></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. register_shutdown_function()</strong></span></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3.&nbsp;http_build_query()</strong></span></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>4. extract()</strong></span></p>\n\n<ul>\n	<li>Import variables from an array into the current symbol table.</li>\n	<li>Checks each key to see whether it has a valid variable name. It also checks for collisions with existing variables in the symbol table.</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">5.&nbsp;func_get_args()</span></strong></p>\n\n<ul>\n	<li>\n	<p>Returns an array comprising a function&#39;s argument list</p>\n	</li>\n</ul>','2016-01-06 19:22:43',0),(101,'Sphinx Search','SphinxAPI','Internal Attributes','<p><span style=\"color:rgb(178, 34, 34)\"><strong>Internal Attributes</strong></span></p>\n\n<p>Which are the attributes not defined by users in configuration but&nbsp;<span style=\"color:rgb(178, 34, 34)\">computed by the sphinx engine on the fly</span>. The list of internal Attributes are:</p>\n\n<ul>\n	<li>@id (match ID)</li>\n	<li>@weight (match weight)</li>\n	<li>@rank (match weight)</li>\n	<li>@relevance (match weight)</li>\n	<li>@random (return results in random order)</li>\n	<li>@group (groupby function value)</li>\n	<li>@count (amount of matches in group)</li>\n</ul>\n\n<p>@rank&nbsp;and&nbsp;@relevance&nbsp;are just additional aliases to&nbsp;@weight.</p>\n\n<p>If you use recent enough version of Sphinx, <span style=\"color:rgb(178, 34, 34)\">these internal attributes are deprecated if you use SphinxQL</span>, for example</p>\n\n<ul>\n	<li>Use WEIGHT() instead of @weight</li>\n	<li>Use RAND() instead of @random</li>\n	<li>Use COUNT() instead of @count</li>\n</ul>','2015-12-16 11:02:14',0),(102,'Sphinx Search','SphinxQL','Having Clause Syntax','<p><span style=\"color:#B22222\"><strong>HAVING clause</strong></span></p>\n\n<ul>\n	<li>works quite similar to the filters&nbsp;in WHERE clause to filter the result sets</li>\n	<li>however <span style=\"color:#B22222\">it&nbsp;is used to filter on GROUP BY values</span>.</li>\n	<li>It was added in 2.2.1-beta. Currently supports only one filtering condition.</li>\n</ul>\n\n<pre>\n<code class=\"language-sql\">SELECT id FROM plain GROUP BY title HAVING group_id=16; \nSELECT id FROM plain GROUP BY attribute HAVING COUNT(*)&gt;1;\n</code></pre>\n\n<p>Because of HAVING is implemented as a whole result set post-processing, result set for query with HAVING could be less than&nbsp;max_matches&nbsp;allows.</p>','2015-12-16 10:28:05',0),(103,'Statsit','StatsitAPI','API Pattern','<p>Examples of the original api:</p>\n\n<p><span style=\"color:#B22222\">1. List Most Popular Conversation / Show More</span><br />\nhttp://statsitapis.com/api/conversations/list.json?sample=10813&amp;key=test0123&amp;project_id=5&amp;since=2016-06-16&amp;until=2016-06-23&amp;extq=type:share-of-voice,nolabel:1,country:IN,select_label:HDFC&amp;sortby=inlinks&amp;platform=8,9&amp;limit=5</p>\n\n<p><span style=\"color:#B22222\">2. Count of a brand</span><br />\nhttp://statsitapis.com/api/conversations/count.json?sample=10813&amp;key=test0123&amp;project_id=5&amp;since=2016-06-14&amp;until=2016-06-21&amp;extq=type:share-of-voice,country:IN,select_label:ICICI&amp;platform=6,9</p>\n\n<p><span style=\"color:#B22222\">3. Share of brands</span><br />\nhttp://statsitapis.com/api/conversations/count.json?sample=10813&amp;key=test0123&amp;project_id=5&amp;since=2016-06-14&amp;until=2016-06-21&amp;extq=type:share-of-voice,country:IN&amp;platform=6,9</p>\n\n<p><span style=\"color:#B22222\">4. Conversation count overtime</span><br />\nhttp://statsitapis.com/api/conversations/count.json?sample=10813&amp;key=test0123&amp;project_id=5&amp;since=2016-06-14&amp;until=2016-06-21&amp;extq=type:share-of-voice,country:IN&amp;timeseries=daily&amp;platform=6,9&nbsp;</p>\n\n<p><span style=\"color:#B22222\">5. Count of categories of a brand</span><br />\nhttp://statsitapis.com/api/conversations/count.json?sample=10813&amp;key=test0123&amp;project_id=5&amp;since=2016-05-22&amp;until=2016-06-22&amp;extq=type:brand-equity,country:IN,and_label:HDFC&amp;platform=6</p>\n\n<p><span style=\"color:#B22222\">6. List sentimental mentions of a brand(&#39;Neutral&#39;)</span><br />\nhttp://statsitapis.com/api/conversations/list.json?sample=10813&amp;key=test0123&amp;project_id=5&amp;since=2016-05-22&amp;until=2016-06-22&amp;extq=type:share-of-voice,country:IN,select_label:HDFC&amp;sortby=inlinks&amp;sentiment=1&amp;platform=6</p>\n\n<p><span style=\"color:#B22222\">7. Count of Campaign-related mentions of a brand</span><br />\nhttp://statsitapis.com/api/conversations/count.json?sample=10785&amp;key=test0123&amp;project_id=2&amp;since=2015-06-21&amp;until=2016-06-21&amp;extq=type:campaign-messages,country:ID,brand:BCA,and_label:BCA&amp;platform=6</p>\n\n<p><span style=\"color:#B22222\">8. Data point coversation</span><br />\nhttp://statsitapis.com/api/conversations/list.json?sample=10813&amp;key=test0123&amp;project_id=5&amp;since=2015-05-22&amp;until=2016-06-22&amp;extq=type:share-of-voice,nolabel:1,country:IN,select_label:HDFC&amp;sortby=inlinks&amp;platform=9&amp;limit=2</p>\n\n<p><span style=\"color:#B22222\">9. Sentiment count</span><br />\nhttp://statsitapis.com/api/conversations/count_by_sentiment.json?sample=10813&amp;key=test0123&amp;project_id=5&amp;since=2016-05-30&amp;until=2016-06-29&amp;extq=type:share-of-voice,country:IN,select_label:ICICI&amp;sentiment=0&amp;platform=7,5</p>','2016-08-18 16:17:47',0),(104,'Apache','Basics','Start & Stop','<p><span style=\"color:#B22222\"><span style=\"font-size:22px\"><strong>For Ubuntu</strong></span></span></p>\n\n<p><span style=\"color:#B22222\">1. Start, stop and restart apache</span></p>\n\n<pre>\n<code class=\"language-bash\">## start\nsudo service apache2 start\n## stop\nsudo service apache2 stop\n## restart\nsudo service apache2 restart\n## check status\nservice apache2 status</code></pre>\n\n<p><span style=\"color:#B22222\">2. How to remove apache from startup list</span></p>\n\n<p>If you don&#39;t want ubuntu to launch apache when booting, then do as follows:</p>\n\n<pre>\n<code class=\"language-bash\">sudo update-rc.d apache2 disable</code></pre>\n\n<p>which will mark&nbsp;<span style=\"color:#B22222\">/etc/init.d/apache2</span> to not be started when initiate system.</p>\n\n<p>To change it back,&nbsp;</p>\n\n<pre>\n<code class=\"language-bash\">sudo update-rc.d apache2 enable</code></pre>\n\n<p>&nbsp;</p>','2015-12-21 18:39:39',3),(105,'Apache','Basics','Name-based Virtual Host','<p># In order to enable apache to host multiple sites which use different directories locally, we need to set virtual hosts</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">1. enable virtual host in the httpd.conf file</span></strong></p>\n\n<pre>\n<code class=\"language-apache\"># Virtual hosts\nInclude etc/extra/httpd-vhosts.conf</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. edit the httpd-vhosts.conf</span></strong></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2.1 add the default localhost</span></p>\n\n<pre>\n<code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n&nbsp; &nbsp; ServerName localhost\n&nbsp; &nbsp; DocumentRoot &quot;/Applications/XAMPP/xamppfiles/htdocs&quot;\n&nbsp; &nbsp; &lt;Directory &quot;/Applications/XAMPP/xamppfiles/htdocs&quot;&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; Options Indexes FollowSymLinks Includes execCGI\n&nbsp; &nbsp; &nbsp; &nbsp; AllowOverride All\n&nbsp; &nbsp; &nbsp; &nbsp; Require all granted\n&nbsp; &nbsp; &lt;/Directory&gt;\n&lt;/VirtualHost&gt;\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2.2 add the virtual host as you like, e.g.</span></p>\n\n<pre>\n<code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n&nbsp; &nbsp; ServerName one-drive.io\n&nbsp; &nbsp; ServerAlias www.one-drive.io\n&nbsp; &nbsp; DocumentRoot &quot;/Users/counterall/Documents/OneDrive/practice projects&quot;\n&nbsp; &nbsp; &lt;Directory &quot;/Users/counterall/Documents/OneDrive/practice projects&quot;&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; Options Indexes FollowSymLinks Includes ExecCGI\n&nbsp; &nbsp; &nbsp; &nbsp; AllowOverride All\n&nbsp; &nbsp; &nbsp; &nbsp; Require all granted\n&nbsp; &nbsp; &lt;/Directory&gt;\n&nbsp; &nbsp; ErrorLog &quot;logs/one-drive.io-error_log&quot;\n&nbsp; &nbsp; CustomLog &quot;logs/one-drive.io-access_log&quot; common\n&lt;/VirtualHost&gt;\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3. edit the /etc/hosts</span></p>\n\n<pre>\n<code class=\"language-bash\">127.0.0.1 &nbsp;one-drive.io</code></pre>\n\n<p>&nbsp;</p>','2017-07-19 20:38:40',6),(106,'Sphinx Search','Sphinx.Conf','Example Conf','<p><span style=\"color:#B22222\"><strong>1. Source</strong></span></p>\n\n<pre>\n<code class=\"language-bash\"># source for Note\nsource note {\n        type                    = mysql\n        sql_host                = localhost\n        sql_user                = root\n        sql_pass                =\n        sql_db                  = cknote\n        sql_port                = 3306  # optional, default is 3306\n        # main document fetch query\n        # mandatory, integer document ID field MUST be the first selected column\n        sql_query       = SELECT id, category, sub_cat, title, content, UNIX_TIMESTAMP(datetime) AS timestamp, visits FROM notes\n        sql_attr_uint                           = visits\n        sql_field_string                        = category\n        sql_field_string                        = sub_cat\n        sql_field_string                        = title\n        sql_attr_timestamp                      = timestamp\n}</code></pre>\n\n<p><strong><span style=\"color:#B22222\">2. Index</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">index note_index{\n    source                  = note\n    path                    = /usr/local/var/data/note_index\n    docinfo                 = extern\n    dict                    = keywords\n    mlock                   = 0\n    morphology              = none\n    min_word_len            = 1\n}</code></pre>\n\n<p>&nbsp;</p>','2015-12-21 19:54:15',0),(107,'PHP','Functions','Json','<p><strong>It is quite useful to use<span style=\"color:rgb(178, 34, 34)\"> json_encode()</span> and <span style=\"color:rgb(178, 34, 34)\">json_decode()</span> to deal with api requesting results, e.g.</strong></p>\n\n<ul>\n	<li>You can convert a normal PHP array into a json formatted string via <span style=\"color:rgb(178, 34, 34)\">json_encode()</span></li>\n	<li>You can covert a json-like string into a PHP object or associative array via<span style=\"color:rgb(178, 34, 34)\"> json_decode()</span></li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-php\">$s = array(\n	&#39;a&#39;=&gt; &#39;Hello&#39;,\n	&#39;name&#39;=&gt; array(&#39;firstname&#39;=&gt;&#39;Kan&#39;, &#39;lastname&#39;=&gt;&#39;Cong&#39;)\n);\n$s1 = json_encode($s);\n//with true added, the result will be an associative array instead of an object\n$s2 = json_decode($s1, true);\n$s3 = json_decode($s1);\necho &quot;&lt;pre&gt;&quot;.var_dump($s2).&quot;&lt;/pre&gt;&quot;;\necho &quot;&lt;pre&gt;&quot;.var_dump($s3).&quot;&lt;/pre&gt;&quot;;</code></pre>\n\n<p>The output would be&nbsp;</p>\n\n<pre>\n<code class=\"language-php\">array(2) {\n  [&quot;a&quot;]=&gt;\n  string(5) &quot;Hello&quot;\n  [&quot;name&quot;]=&gt;\n  array(2) {\n    [&quot;firstname&quot;]=&gt;\n    string(3) &quot;Kan&quot;\n    [&quot;lastname&quot;]=&gt;\n    string(4) &quot;Cong&quot;\n  }\n}\nobject(stdClass)#1 (2) {\n  [&quot;a&quot;]=&gt;\n  string(5) &quot;Hello&quot;\n  [&quot;name&quot;]=&gt;\n  object(stdClass)#2 (2) {\n    [&quot;firstname&quot;]=&gt;\n    string(3) &quot;Kan&quot;\n    [&quot;lastname&quot;]=&gt;\n    string(4) &quot;Cong&quot;\n  }\n}</code></pre>','2016-01-10 11:07:52',4),(108,'JavaScript','Js In One Video','Number Object','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. toFixed(digit)</strong></span></p>\n\n<ul>\n	<li>The toFixed() method converts a number into a string</li>\n	<li>keeping a specified number of decimals.</li>\n</ul>\n\n<p>For example</p>\n\n<pre>\n<code class=\"language-javascript\">var num = 1000;\nvar str = (num/13).toFixed(3);\nconsole.log(str);\n//&quot;76.923&quot;\nvar str = (num/13).toFixed();\nconsole.log(str);\n//&quot;77&quot;\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. Math.pow(a, b)</strong></span></p>\n\n<ul>\n	<li>power, ç”¨æ¥è®¡ç®—açš„bæ¬¡æ–¹</li>\n</ul>\n\n<p>For example</p>\n\n<pre>\n<code class=\"language-javascript\">var a = 3;\nvar b = 4;\nconsole.log(Math.pow(a,b));\n//81</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. Math.sqrt(a, b)</span></strong></p>\n\n<ul>\n	<li>square root,&nbsp;ç”¨æ¥è®¡ç®—açš„2æ¬¡æ–¹</li>\n</ul>\n\n<p>For example</p>\n\n<pre>\n<code class=\"language-javascript\">var a = 9;\nconsole.log(Math.sqrt(a));\n//3</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>4. Type conversion between Number and String</strong></span></p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">Number()&nbsp;</span>and <span style=\"color:rgb(178, 34, 34)\">String()</span> will convert object&#39;s value into number and string respectively</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">parseInt()</span> and&nbsp;<span style=\"color:rgb(178, 34, 34)\">parseFloat()</span> will parses a string into an integer or floating point number respectively</li>\n</ul>\n\n<p>For example</p>\n\n<pre>\n<code class=\"language-javascript\">//string to number\nvar a = &#39;3.1415926&#39;;\nconsole.log(Number(a));\n//3.1415926\nconsole.log(parseInt(a));\n//3\nconsole.log(parseFloat(a));\n//3.1415926\n\n//Number to string\nvar b = &#39;5.12&#39;;\nconsole.log(String(b));\n//&quot;5.12&quot;</code></pre>\n\n<p>&nbsp;</p>','2015-12-24 21:52:18',1),(109,'JavaScript','Js In One Video','String Object','<p>Let us use a serious of examples against the same string to show the usage of different string functions in JS.</p>\n\n<p><span style=\"color:#B22222\"><strong>1. work with the content of a string</strong></span></p>\n\n<pre>\n<code class=\"language-javascript\">// the samples string is \nvar str = \"LG ultrawide monitor is beyond amazing, it is an unbelievable joy to use it whenever you are working or entertaining\";\n\n//length(): length of the string\nconsole.log(str.length);\n116\n\n//indexOf(): index of characters\nconsole.log(str.indexOf(\'amazing\'));\n31\n\n//slice(start_index, stop_index): take a slice of the string\nconsole.log(str.slice(31, 38));\n\"amazing\"\n\n//substr(start_index, length): take part of a string\nconsole.log(str.substr(31, 7));\n\"amazing\"\n\n//replace(needle, replacement): replace part of the string with given one\nconsole.log(str.replace(\'LG\', \'Samsung\'));\n\"Samsung ultrawide monitor is beyond amazing, it is an unbelievable joy to use it whenever you are working or entertaining\"\n\n//charAt(index): show the character at a specified index\nconsole.log(str.charAt(0));\n\"L\"\n\n//split(delimiter): split a string into elements of an array by specified delimiter\nconsole.log(str.split(\', \'));\n[\"LG ultrawide monitor is beyond amazing\", \"it is an unbelievable joy to use it whenever you are working or entertaining\"]</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>2. work with the style of the string</strong></span></p>\n\n<pre>\n<code class=\"language-javascript\"> // the sample string\n  var str = \"style me, please\";\n  document.write(\'Origin: \', str, \"&lt;br&gt;\");\n  document.write(\"Big: \", str.big(), \"&lt;br&gt;\");\n  document.write(\"Bold: \" + str.bold(), \"&lt;br&gt;\");\n  document.write(\"Color: \" + str.fontcolor(\'red\'), \"&lt;br&gt;\");\n  document.write(\"Size: \" + str.fontsize(\"2em\"), \"&lt;br&gt;\");\n  document.write(\"Italics: \" + str.italics(), \"&lt;br&gt;\");\n  document.write(\"Link: \" + str.link(\'twitch.com\'), \"&lt;br&gt;\");\n  document.write(\"Small: \" + str.small(), \"&lt;br&gt;\");\n  document.write(\"Strike: \" + str.strike(), \"&lt;br&gt;\");\n  document.write(\"Sub: \" + str.sub(), \"&lt;br&gt;\");\n  document.write(\"Sup: \" + str.sup(), \"&lt;br&gt;\");</code></pre>\n\n<p>You will get following results:</p>\n\n<p>Origin: style me, please<br />\nBig:&nbsp;<big>style me, please</big><br />\nBold:&nbsp;<strong>style me, please</strong><br />\nColor:&nbsp;<span style=\"color:red\">style me, please</span><br />\nSize:&nbsp;<span style=\"font-size:2em\">style me, please</span><br />\nItalics:&nbsp;<em>style me, please</em><br />\nLink:&nbsp;<a href=\"http://null.jsbin.com/twitch.com\">style me, please</a><br />\nSmall:&nbsp;<small>style me, please</small><br />\nStrike:&nbsp;<s>style me, please</s><br />\nSub:&nbsp;<sub>style me, please</sub><br />\nSup:&nbsp;<sup>style me, please</sup></p>','2015-12-24 21:51:56',5),(110,'JavaScript','Js In One Video','Flow Control','<p>1.<span style=\"color:#B22222\"><strong> foreach alternative</strong></span> in Javascript</p>\n\n<p>Just lik foreach in PHP, you can you <span style=\"color:#B22222\">&quot;for...in&quot; loop</span> to do the similar&nbsp;task in JS,</p>\n\n<ul>\n	<li>Dislike in foreach in PHP which has alias for both index and value of each element in an array, for/in loop in JS only has alias of index, so you need to use array[index] to represents value of an element in for/in loop</li>\n</ul>\n\n<p>For example</p>\n\n<pre>\n<code class=\"language-javascript\">  var a = [1,2,3,4,5];\n  for(index in a){\n   document.write(index, \": \", a[index], \", \");\n  }\n  //0: 1, 1: 2, 2: 3, 3: 4, 4: 5,\n  var b = {\n    Michael: \"Jordan\",\n    Kobe: \"Bryant\",\n    Tracy: \"McGrady\"\n  };\n  for(name in b){\n   document.write(name,\" \", b[name], \",\");\n  }\n  //Michael Jordan,Kobe Bryant,Tracy McGrady,</code></pre>\n\n<p>&nbsp;</p>','2015-12-26 18:30:39',1),(111,'JavaScript','Js In One Video','Array Object','<p><span style=\"color:#B22222\"><strong>1. array.splice(index, howmany, new_element1, .... new_elementX)</strong></span></p>\n\n<ul>\n	<li>Used to remove or/and add new elements into an array</li>\n	<li>&#39;index&#39; defines from which index from which the remove starts</li>\n	<li>&#39;howmany&#39; means number of elements to remove starting from index</li>\n	<li>new_element(s) are the elements to occupy the removed index</li>\n	<li>finally return the removed elements</li>\n</ul>\n\n<p>For example</p>\n\n<pre>\n<code class=\"language-javascript\">var a = [1,2,3,4,5];\nvar b = a.splice(1, 3);\ndocument.write(\"a: \", a, \"&lt;br&gt;\", \"b: \", b);\n//a: 1,5\n//b: 2,3,4</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>2. array.valueOf()</strong></span></p>\n\n<ul>\n	<li>This is the default method of array object</li>\n	<li>It will return the same as plain Array</li>\n	<li>It will not change the original array</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-javascript\">var a = [1,2,3,4,5];\ndocument.write(\"array.valueOf(): \", a.valueOf(), \"&lt;br&gt;\", \"array: \", a);\n//array.valueOf(): 1,2,3,4,5\n//array: 1,2,3,4,5</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>3. array.join(separater)</strong></span></p>\n\n<ul>\n	<li>It is just like implode() in PHP to joins all elements of an array into a string</li>\n	<li>separator is optional. using comma by default if not specified</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-javascript\">var a = [\"Kobe\", \"Bryant\", \'is\', \'the GOAT!\'];\ndocument.write(\"array.join(\' \'): \", a.join(\' \'));\n//array.join(\' \'): Kobe Bryant is the GOAT!</code></pre>\n\n<p><strong><span style=\"color:#B22222\">4. array_a.concat(array_b)</span></strong></p>\n\n<ul>\n	<li>It is used to combine two or more arrays together into an newly created array</li>\n	<li>and return the new array without affecting original arrays</li>\n	<li>just like array_merge() function in PHP</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">var a = [\"Kobe\", \"Bryant\"]\nvar b = [\'is\', \'the GOAT!\'];\nvar c = a.concat(b);\ndocument.write(\"array_a.concat(\'array_b\'): \", c.join(\' \'));\n//array_a.concat(\'array_b\'): Kobe Bryant is the GOAT!</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>5. array.sort(compareFunction)</strong></span></p>\n\n<ul>\n	<li>It is used to sort elements in an array</li>\n	<li>By default, it sort alphabetically in ascending order, if you need sort alphabetically&nbsp;in descending order, then add reverse() after sort()</li>\n	<li>You need to have compare Function if you want to sort elements numerically</li>\n	<li>It directly acts on the original array which will be changed after running this function</li>\n</ul>\n\n<p>For example</p>\n\n<pre>\n<code class=\"language-javascript\">var a = [\"Kobe\", \"Bryant\", \'is\', \'the GOAT!\'];\ndocument.write(\"Alphabetic Asc\", a.sort(), \'&lt;br&gt;\');\n//array.sort(): Bryant,Kobe,is,the GOAT!\ndocument.write(\"Alphabetic Desc: \", a.reverse());\n//array.sort(): the GOAT!,is,Kobe,Bryant</code></pre>\n\n<pre>\n<code class=\"language-javascript\">var a = [1, 2, 3, 4, 5];\ndocument.write(\"Numeric Asc: \", a.sort(function(x,y){return x-y;}), \'&lt;br&gt;\');\n//Numeric Asc: 1,2,3,4,5\ndocument.write(\"Numeric Desc: \", a.sort(function(x,y){return y-x;}), \'&lt;br&gt;\');\n//Numeric Desc: 5,4,3,2,1</code></pre>\n\n<p>&nbsp;</p>','2015-12-26 19:24:39',8),(112,'JavaScript','Js In One Video','Functions Tricks','<p><span style=\"color:#B22222\"><strong>1. functions without knowing numbers of paramenters in advance</strong></span></p>\n\n<ul>\n	<li>\n	<p>JavaScript functions have a built-in object called the<span style=\"color:#B22222\"> arguments object.</span></p>\n	</li>\n	<li>\n	<p>The <span style=\"color:#B22222\">arguments object</span> contains an array of the arguments used when the function was called (invoked).</p>\n	</li>\n	<li>\n	<p>So we can take advantage of <span style=\"color:#B22222\">argument objects</span> to find out detail of given parameters</p>\n	</li>\n</ul>\n\n<p><span style=\"line-height:1.6\">For example</span></p>\n\n<pre>\n<code class=\"language-javascript\">function howManyParas(){\n    for(var i = 1; i &lt;= arguments.length; i++){\n    }\n    document.write(\"Number of arguments: \", i-1, \'&lt;br&gt;\');\n  }\nhowManyParas(1,2,34,5,5,6,7,7);\n//Number of arguments: 8\n</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>2. recursive function</strong></span></p>\n\n<ul>\n	<li>which means a function which will call itself recursively</li>\n</ul>\n\n<p>Make calculation of <span style=\"color:#B22222\"><strong>factorial(é˜¶ä¹˜)</strong></span> as an example</p>\n\n<pre>\n<code class=\"language-javascript\">function factorial(num){\n    if(num &gt; 1){\n      return num * factorial(num - 1);\n    }else{\n      return num;\n    }\n  }\ndocument.write(\"6 factorial: \", factorial(6))\n//6 factorial: 720</code></pre>\n\n<p>&nbsp;</p>','2015-12-26 20:32:29',6),(113,'JavaScript','Js In One Video','Inline JS Tricks','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. void operator</strong></span></p>\n\n<ul>\n	<li>The&nbsp;void&nbsp;operator evaluates an expression and returns&nbsp;<span style=\"color:rgb(178, 34, 34)\"><strong>undefined value</strong></span></li>\n	<li>It is often used to gain a undefined value by using void(0)</li>\n	<li>It is quite useful when evaluating an expression without using the returned value</li>\n</ul>\n\n<p>For example</p>\n\n<pre>\n<code class=\"language-javascript\">console.log(void(0));\n//undefined\nvar a = 10;\nconsole.log(void(a));\n//undefined</code></pre>\n\n<p>An inline JS example of using void(0)</p>\n\n<pre>\n<code class=\"language-html\">//page will be reloaded after click the link\n&lt;a href=\"\" onclick=\"alert(\"Hello\")\"&gt;Say Hello&lt;/a&gt;\n//prevent page from reloading after clicking the link by using void(0)\n//i.e. make it a useless link\n&lt;a href=\"javascript:void(0)\" onclick=\"alert(\"Hello\")\"&gt;Say Hello&lt;/a&gt;\n</code></pre>','2017-03-09 12:39:49',7),(114,'JavaScript','Js In One Video','Object-Oriented JS: Constructor','<p>In Javascript, everything is an object, so it is an object oriented programming lanugage for sure. However it does not have the explicit &quot;Class&quot; concept similar to PHP or Java in which all instantiated objects are inherited from class object. Javascript uses two other ways to define an object including its properties and methods.</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. Individual Object(i.e. neither&nbsp;inherited from nor spawn child objects)</strong></span></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">Define an object with properties and methods:</span></p>\n\n<pre>\n<code class=\"language-javascript\">var obj1 = {\n    last_name: \"Cong\",\n    first_name: \"Kan\",\n    age: function(age){\n      if (age &lt;= 35) {\n        document.write(this.first_name +\" \" + this.last_name, \", you are still young!&lt;br /&gt;\");\n      }else{\n        document.write(this.first_name +\" \" + this.last_name, \", you are not young any more!&lt;br /&gt;\");\n      }\n    }\n  };\nobj1.age(32);\n//Kan Cong, you are still young!\nobj1.last_name = \"Bryant\";\nobj1.first_name = \'Kobe\';\nobj1.age(37);\n//Kobe Bryant, you are not young any more!\nobj1.profession = function(prof){\n  document.write(this.first_name +\" \" + this.last_name, \" is a \", prof, \"!&lt;br /&gt;\");\n}\nobj1.profession(\"Basketball Player\");\n//Kobe Bryant is a Basketball Player!</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">You will get error if you try to inherited from this object</span></p>\n\n<pre>\n<code class=\"language-javascript\">var obj2 = new obj1;\n//error: obj1 is not a function\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. Use &quot;Constructor&quot; functions in JS to work as &quot;Class&quot; in other oo programming languages</strong></span></p>\n\n<p>First&nbsp;two snippets(<strong><span style=\"color:rgb(178, 34, 34)\">JS and PHP</span></strong>)&nbsp;have the same output.&nbsp;JS <span style=\"color:rgb(178, 34, 34)\">constructor </span>functions works just like PHP<span style=\"color:rgb(178, 34, 34)\"> __construct </span>function inside a class, however some noticeable differences can be found:</p>\n\n<ul>\n	<li>in JS, both properties and functions are defined inside the <span style=\"color:rgb(178, 34, 34)\">constructor</span> function which is the context of all given parameters when instantiating&nbsp;new instance, which means,<span style=\"color:rgb(178, 34, 34)\"> all functions can directly use these given parameters</span>. Check snippets 3.</li>\n	<li>in PHP, all definitions of functions are outside __construct function,<span style=\"color:rgb(178, 34, 34)\"> it is not able to define&nbsp;new function inside the __construct function</span>,&nbsp;which means only __construct function can use the given parameters when initiate the instance, <span style=\"color:rgb(178, 34, 34)\">all other functions cannot directly use given parameters</span> when they are called <span style=\"color:rgb(178, 34, 34)\">except&nbsp;they are called inside the __construct function</span>, i.e. <span style=\"color:rgb(178, 34, 34)\">__construct function is the context or scope of given parameters when creating an new instance in PHP!!!. </span>Check snippets 4.</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Snippets 1: Javascript &quot;class&quot; definition</span></strong></p>\n\n<pre>\n<code class=\"language-javascript\">function constructor1(first_name, last_name, age, profession){\n    this.first_name = first_name;\n    this.last_name = last_name;\n    this.age = age;\n    this.profession = profession;\n    this.young = function (){\n      if (this.age &lt;= 35) {\n      document.write(this.first_name, \" \", this.last_name, \", you are still young!&lt;br /&gt;\");\n      }else{\n      document.write(this.first_name, \" \", this.last_name, \", you are not young any more!&lt;br /&gt;\");\n      }\n    };\n    this.prof = function(){\n      document.write(this.first_name, \" \", this.last_name, \" is a \", this.profession, \"!&lt;br /&gt;\");\n    };\n  }\n\nvar myself = new constructor1(\"Kan\", \"Cong\", 32, \"Software Engineer\");\nmyself.young();\n//Kan Cong, you are still young!\nmyself.prof();\n//Kan Cong is a Software Engineer!</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Snippets 2: PHP class definition</span></strong></p>\n\n<pre>\n<code class=\"language-php\">class Profile {\n	public $last_name;\n	public $first_name;\n	public $full_name;\n	public $age;\n	public $profession;	\n	public function __construct($first_name, $last_name, $age, $profession){\n		$this-&gt;last_name = $last_name;\n		$this-&gt;first_name = $first_name;\n		$this-&gt;full_name = $first_name.\" \".$last_name;\n		$this-&gt;age = $age;\n		$this-&gt;profession = $profession;\n	}	\n	public function young(){\n		if(this-&gt;age &lt;= 35){\n			echo $this-&gt;full_name.\", you are still young!&lt;br /&gt;\";\n		}else{\n			echo $this-&gt;full_name.\", You are not young any more!&lt;br /&gt;\";\n		}	\n	}\n}\n$myself = new Profile(\"Kan\", \"Cong\", 32, \"Software Engineer\");\n$myself-&gt;young();\n//Kan Cong, you are still young!</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>Snippets 3: functions can directly use given parameters in JS</strong></span></p>\n\n<pre>\n<code class=\"language-javascript\">function constructor1(first_name, last_name, age, profession){\n    this.first_name = first_name;\n    this.last_name = last_name;\n    this.age = age;\n    this.profession = profession;\n    this.young = function (){\n      if (age &lt;= 35) {\n      document.write(first_name, \" \", last_name, \", you are still young!&lt;br /&gt;\");\n      }else{\n      document.write(first_name, \" \", last_name, \", you are not young any more!&lt;br /&gt;\");\n      }\n    };\n    this.prof = function(){\n      document.write(first_name, \" \", last_name, \" is a \", profession, \"!&lt;br /&gt;\");\n    };\n  }\nvar myself = new constructor1(\"Kan\", \"Cong\", 32, \"Software Engineer\");\nmyself.young();\n//Kan Cong, you are still young!\nmyself.prof();\n//Kan Cong is a Software Engineer!</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>Snippets 4: functions cannot be defined but can be called&nbsp;inside __construct function in PHP</strong></span></p>\n\n<pre>\n<code class=\"language-php\">class Profile {\n	public $last_name;\n	public $first_name;\n	public $full_name;\n	public $age;\n	public $profession;	\n	public function __construct($first_name, $last_name, $age, $profession){\n		$this-&gt;last_name = $last_name;\n		$this-&gt;first_name = $first_name;\n		$this-&gt;full_name = $first_name.\" \".$last_name;\n		$this-&gt;age = $age;\n		$this-&gt;profession = $profession;\n		$this-&gt;prof($profession);//Kan Cong is a Software Engineer!\n		function welcome(){\n			echo \"Welcome, $first_name!\";\n		}\n	}	\n	public function young(){\n		if($this-&gt;age &lt;= 35){\n			echo $this-&gt;full_name.\", you are still young!&lt;br /&gt;\";\n		}else{\n			echo $this-&gt;full_name.\", You are not young any more!&lt;br /&gt;\";\n		}	\n	}\n	\n	public function prof($profession){\n		echo $this-&gt;full_name.\" is a \".$profession.\"!&lt;br /&gt;\";\n	}\n}\n$myself = new Profile(\"Kan\", \"Cong\", 32, \"Software Engineer\");\n$myself-&gt;young();\n//Kan Cong, you are still young!\n$myself-&gt;prof(\'IT Manager\');\n//Kan Cong is a IT Manager!\n$myself-&gt;welcome();\n//E_ERROR : type 1 -- Call to undefined method Profile::welcome() \n</code></pre>\n\n<p>&nbsp;</p>','2015-12-28 11:47:25',3),(115,'JavaScript','Js In One Video','Object-Oriented JS: Prototype','<p><span style=\"color:rgb(178, 34, 34)\"><strong>Everything in JavaScript is Object. But only Function(both constructor functions and normal functions) objects contain&nbsp;Prototype property, other type of Objects do&nbsp;not have Prototype property!</strong></span></p>\n\n<pre>\n<code class=\"language-javascript\">function class1(){\n  this.prop1 = \'Hello World\';\n}\n\nfunction func1(){\n  console.log(\'Hello, world!\');\n}\n\nvar obj2 = {\n  prop1: \'Hello Finland\'\n};\n\nvar myString = \'hello\';\n\nvar myNumber = 10;\n\nvar myArray = [1,2,3];\n\nvar myBoolean = true;\n\nconsole.log(class1.prototype);//[object Object] { ... }\nconsole.log(func1.prototype);// [object Object] { ... }\nconsole.log(obj2.prototype);//undefined\nconsole.log(myString.prototype);//undefined\nconsole.log(myNumber.prototype);//undefined\nconsole.log(myArray.prototype);//undefined\nconsole.log(myBoolean.prototype);//undefined</code></pre>\n\n<p>1. check number of arguments of function via using<em><strong><span style=\"color:rgb(178, 34, 34)\"> length property of function</span></strong></em></p>\n\n<pre>\n<code class=\"language-javascript\">function checkArgs(arg1, arg2, arg3) {\n  return arg1 + arg2 + arg3;\n}\ndocument.write(\"No of Arguments of checkArgs() is \", checkArgs.length, \"&lt;br /&gt;\");\n//No of Arguments of checkArgs() is 3</code></pre>\n\n<p>2. add new properties or methods<em><strong><span style=\"color:rgb(178, 34, 34)\"> without directly modifying the constructor function</span></strong></em> via prototype</p>\n\n<ul>\n	<li>properties and methods defined inside prototype<em><span style=\"color:rgb(178, 34, 34)\"> are inherited automatically by constructor functions</span></em> and its child objects</li>\n	<li>however, properties and methods in prototype&nbsp;<span style=\"color:rgb(178, 34, 34)\"><em>will be overrode by the counterparts with the same names&nbsp;in constructor function</em></span>&nbsp;</li>\n	<li>it is not able to add new arguments for constructor function by using prototype</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">function myProfile(firstname, lastname, age, profession) {\n  this.firstname = firstname;\n  this.lastname = lastname;\n  this.age = age;\n  this.profession = profession;\n  this.whoami = function(){\n  document.write(\"I am \", this.firstname, \" \", this.lastname, \", \", this.age, \" years old!\", \"&lt;br /&gt;\");\n  }\n}\nvar me = new myProfile(\"Kan\", \"Cong\", 32, \"Software Engineer\");\nme.whoami();\n//I am Kan Cong, 32 years old!\nmyProfile.prototype.address = \"Helsinki, Finland\";\nmyProfile.prototype.whoami = function(){\n  document.write(\"I am \", this.firstname, \" \", this.lastname, \", \", this.age, \" years old \", this.profession, \", now living in \", this.address, \".&lt;br /&gt;\");\n}\nmyProfile.prototype.whoami2 = function(){\n  document.write(\"I am \", this.firstname, \" \", this.lastname, \", \", this.age, \" years old \", this.profession, \", now living in \", this.address, \".&lt;br /&gt;\");\n}\nme.whoami();\n//it overrides prototype methods, so no changes here\n//I am Kan Cong, 32 years old!\nme.whoami2();\n//I am Kan Cong, 32 years old Software Engineer, now living in Helsinki, Finland.</code></pre>','2016-05-27 17:27:11',8),(116,'Statsit','Cron Job','Server 108','<p>Scraper for panels actually is triggered in server 108</p>\n\n<pre>\n<code class=\"language-bash\">#Panel scrapers\n*/5 * * * * /usr/local/bin/php /shared/public_html_beta/public_html/core/mediamonitor/collection4/process_whitelist.php &gt; /dev/null 2&gt;&amp;1\n*/15 * * * * /usr/local/bin/php /shared/statsit/tools/remove_cookies.php &gt; /dev/null 2&gt;&amp;1\n\n#panel streaming\n0 */4 * * * /usr/local/bin/python2.7 /shared/statsit/python/PanelUtils.py rotateretweets &gt; /dev/null 2&gt;&amp;1\n\n#Running weibo scraper scripts\n*/10 * * * * /usr/local/bin/php /shared/statsit/medmon/scraping/scripts/scraping.daemon.php 108 weibo &gt;&gt; /shared/statsit_var/logs/scraping/scraping.daemon.108_weibo.log\n#run monitoring for proxy blocked - JIACANG, 19.09.2012\n5 */6 * * * /usr/local/bin/php /shared/statsit/medmon/common/system.monitors.php test &gt; /dev/null 2&gt;&amp;1\n</code></pre>\n\n<p>&nbsp;</p>','2015-12-30 20:06:57',0),(117,'Statsit','Cron Job','Server 117','<p>Scrapers fro non-panel samples</p>\n\n<pre>\n<code class=\"language-bash\">#Running non-weibo scraper scripts\n*/1 * * * * /usr/local/bin/php /shared/statsit/medmon/scraping/scripts/scraping.daemon.php 117 &gt;&gt; /shared/statsit_var/logs/scraping/scraping.daemon.117.log\n\n#Running youtube scraper scripts - Added by Jiacang, 2013-11-25\n*/10 * * * * /usr/local/bin/php /shared/statsit/medmon/scraping/scripts/scraping.daemon.youtube.php &gt;&gt; /shared/statsit_var/logs/scraping/scraping.daemon.youtube.log</code></pre>\n\n<p>Other jobs</p>\n\n<pre>\n<code class=\"language-bash\"># delete slots marked for deletion\n0 14 * * 6 /usr/local/bin/php /shared/statsit/tools/maintenance/archive_delete_slots/delete_scheduled-to-delete_slots.php delete\n\n#automated alerts, ordered from custom tool\n*/10 * * * * /usr/local/bin/php /shared/statsit/tools/alerts/do-queries.php</code></pre>\n\n<p>&nbsp;</p>','2015-12-29 18:09:40',1),(118,'PHP','String Functions','Strstr & Strpos','<p>Syntax of <span style=\"color:rgb(178, 34, 34)\"><strong>strstr(case-sensitive)</strong></span></p>\n\n<pre>\n<code class=\"language-php\">string strstr ( string $haystack , mixed $needle [, bool $before_needle = false ] )</code></pre>\n\n<ul>\n	<li>Returns part of&nbsp;haystack&nbsp;string starting from and <span style=\"color:rgb(178, 34, 34)\">including the first occurrence of&nbsp;needle</span>&nbsp;to the end of haystack.</li>\n	<li>Return&nbsp;<span style=\"color:rgb(178, 34, 34)\">FALSE if needle is not found in haystack</span></li>\n	<li>if $before_needle is set to true, then it returns the part of haystack before the first occurrence of the needle <span style=\"color:rgb(178, 34, 34)\">excluding the needle itself</span>.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">stristr() </span>is the case-insensitive version</li>\n</ul>\n\n<p>For example</p>\n\n<pre>\n<code class=\"language-php\">$s = \"kcongmj23@gmail.com\";\n$before = strstr($s, \"@\", true);\n$after = strstr($s, \"@\");\necho $before . \"&lt;br /&gt;\";\n//kcongmj23\necho $after;\n//@gmail.com</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>Syntax of <strong><span style=\"color:rgb(178, 34, 34)\">strpos(case-sensative)</span></strong></p>\n\n<pre>\n<code class=\"language-php\">mixed strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )</code></pre>\n\n<ul>\n	<li>Find the position of the <span style=\"color:rgb(178, 34, 34)\">first occurrence</span> of a substring in haystack</li>\n	<li>If <span style=\"color:rgb(178, 34, 34)\">$offset</span> is specified, search will start this number of characters counted from the beginning of the string,&nbsp;Unlike&nbsp;<span style=\"color:rgb(178, 34, 34)\">strrpos()</span>&nbsp;and&nbsp;<span style=\"color:rgb(178, 34, 34)\">strripos()</span>, the offset cannot be negative.</li>\n	<li>Returns the position of where the needle exists relative to the beginning of the&nbsp;haystack&nbsp;string <span style=\"color:rgb(178, 34, 34)\">(independent of offset), starting from 0</span>.</li>\n	<li>Return&nbsp;<span style=\"color:rgb(178, 34, 34)\">FALSE if needle is not found in haystack.&nbsp;</span></li>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">NOTE</span></strong>: This function may return Boolean&nbsp;FALSE, but may also return a non-Boolean value which evaluates to&nbsp;FALSE. Use&nbsp;the <span style=\"color:rgb(178, 34, 34)\">=== operator</span>&nbsp;for testing the return value of this function.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">stripos()</span> is case-insensitive</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">strrpos() </span>and <span style=\"color:rgb(178, 34, 34)\">strripos() </span>is the reverse operation to find the posiiton of last occurrence of a substring in haystack, they can have <span style=\"color:rgb(178, 34, 34)\">negative $offset</span> which means starting from the end of haycheck</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-php\">$s = \"kcongmj23@gmail.com\";\n$pos1 = strpos($s, \"m\");\n$pos2 = strrpos($s, \"m\");\necho $pos1 . \"&lt;br /&gt;\";\n//5\necho $pos2;\n//18</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">Tricks of checking whether needle exists:</span></p>\n\n<pre>\n<code class=\"language-php\">$needle1 = \'hello\';\n$needle2 = \'world\';\n$haystack = \'world\';\n$pos1 = strpos($haystack, $needle1);\n$pos2 = strpos($haystack, $needle2);\nif($pos2 == false){\n  echo \"Needle2 is found, but position 0 will be regarded as false!\";\n}\nif($pos1 === false){\n  echo \"Needle1 is not found!\";\n}</code></pre>\n\n<p>&nbsp;</p>','2016-02-19 10:59:41',3),(119,'Statsit','Work-Flow','Scrape & Process(Youtube):Deprecated','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1.scraping.daemon.youtube.php</strong></span></p>\n\n<ul>\n	<li>initial the scraping process</li>\n	<li>call&nbsp;<span style=\"color:rgb(178, 34, 34)\">countRunningScripts(&quot;scraping.daemon.youtube.php&quot;)</span>&nbsp;from <span style=\"color:rgb(178, 34, 34)\">aux.system.php</span> to check whether the script is already running(simply using &quot;ps -ef | grep&quot;), if so, then exit, if not then call&nbsp;<span style=\"color:rgb(178, 34, 34)\">startScrapingJobs()</span>;</li>\n	<li>call&nbsp;<span style=\"color:rgb(178, 34, 34)\">getYoutubePages() </span>to do following sql query</li>\n</ul>\n\n<pre>\n<code class=\"language-sql\">-- server 117\nSELECT * FROM new_mm_pool.youtube_pages WHERE UNIX_TIMESTAMP() - scanned &gt; frequency;\n-- this is how youtube_pages table looks like\n+----+---------+-----------------+---------+-----------+---------+\n| id | slot_id | username        | country | frequency | scanned |\n+----+---------+-----------------+---------+-----------+---------+\n|  1 |   10277 | dietpepsiarabia | SA      |     86400 |       0 |\n|  2 |   10277 | pepsiarabia     | SA      |     86400 |       0 |\n|  3 |   10315 | dietpepsiarabia | EG      |     86400 |       0 |\n|  4 |   10315 | pepsiarabia     | EG      |     86400 |       0 |\n|  5 |   10279 | pepsiindia      | IN      |     86400 |       0 |\n|  6 |   10278 | pepsiican       | TH      |     86400 |       0 |\n| 11 |   10354 | pepsiindia      | IN      |     86400 |       0 |\n| 12 |   10354 | pepsiarabia     | IN      |     86400 |       0 |\n| 13 |   10315 | cocacolaegypt   | EG      |     86400 |       0 |\n| 14 |   10278 | iCokeThailand   | TH      |     86400 |       0 |\n| 15 |   10315 | PepsiArabiaTV   | UN      |     43200 |       0 |\n| 16 |   10277 | PepsiArabiaTV   | UN      |     43200 |       0 |\n| 20 |   10277 | pepsiarabia     | SA      |     43200 |       0 |\n| 17 |   10278 | pepsithai       | TH      |     43200 |       0 |\n| 18 |   10279 | pepsiindia      | UN      |     43200 |       0 |\n| 19 |   10315 | pepsimasr       | EG      |     43200 |       0 |\n+----+---------+-----------------+---------+-----------+---------+</code></pre>\n\n<ul>\n	<li>after getting return from database, iterately running script <span style=\"color:rgb(178, 34, 34)\">scraping.runner.youtube.php</span>&nbsp;to scrape youtube pages</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">nohup /usr/local/bin/php /shared/statsit/medmon/scraping/scripts/scraping.runner.youtube.php slot_id id &gt;&gt; /shared/statsit_var/logs/scraping/scraping.runner.youtube.slot_id.log &amp;\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2.&nbsp;scraping.runner.youtube.php</strong></span></p>\n\n<ul>\n	<li>include&nbsp;<span style=\"color:rgb(178, 34, 34)\">process-1-youtube_machine.php</span></li>\n	<li>call&nbsp;<span style=\"color:rgb(178, 34, 34)\">iterate_process($slotScrapingInfo, $youtubetId)</span> from&nbsp;process-1-youtube_machine.php to<span style=\"color:rgb(178, 34, 34)\"> begin the real scraping process,&nbsp;</span>&nbsp;<span style=\"color:rgb(178, 34, 34)\">$slotScrapingInfo</span> is an array saving the info of slot_id</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3.&nbsp;process-1-youtube_machine.php</strong></span></p>\n\n<p>&nbsp;</p>','2017-09-08 10:19:40',3),(120,'PHP','Regex','Special Characters','<p>. *? + [ ] ( ) { } ^ $ &brvbar;<br />\nthese characters need to be escaped when match the meaning of the symbol itself, otherwise it represents&nbsp;special meanings&nbsp;in regular expression</p>','2016-01-01 11:37:46',3),(121,'PHP','Class & Object','Snippets','<p><span style=\"color:#B22222\"><strong>1. class instance as function arguments</strong></span></p>\n\n<pre>\n<code class=\"language-php\">class test {\n	public $a = 10;\n}\n\nfunction usetest(test $test1){\n	echo $test1-&gt;a;\n}\n\n$t1 = new test;\nusetest($t1); // 10</code></pre>\n\n<p>&nbsp;</p>','2016-01-01 11:44:12',0),(122,'PHP','Codecademy','Learning Note','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Switch case &quot;falling through&quot;</span></strong><br />\nWhen you have more cases sharing the same condition, you can use switch &quot;falling through&quot;&nbsp;</p>\n\n<pre>\n<code class=\"language-php\">$x = 5;\nswitch($x){\n  case 0:\n    echo \"x equals to 0\";\n    break;\n  case 1:\n    echo \"x is between 1 to 5\";\n    break;\n  default:\n	echo \"x is less than zero or bigger than 5\";\n	break;\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. &ldquo;While&rdquo; loop</span></strong><br />\nFor example as follows to output flip results until heads are shown 3 times in a row.&nbsp;</p>\n\n<pre>\n<code class=\"language-php\">$headCount = 0;\n$flipCount = 0;\nwhile ($headCount &lt; 3) {\n  $flip = rand(0,1);\n  $flipCount ++;\n  if ($flip){\n 	$headCount ++;\n	echo \"&lt;div class=\"coin\"&gt;H&lt;/div&gt;\";\n  }\n  else {\n	$headCount = 0;\n	echo \"&lt;div class=\"coin\"&gt;T&lt;/div&gt;\";\n  }\n}\necho \"&lt;p&gt;It took {$flipCount} flips!&lt;/p&gt;\";</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3. &quot;do-while&quot; loop</strong></span><br />\nThe main difference between while and do-while is that do-while is initiated by running the block of the code defined in do block before it firstly check the while condition, so do-while at least run once whereas the block code of while function might never be run. For example:</p>\n\n<pre>\n<code class=\"language-php\">$x = 8;\ndo{\n  echo \"Hello, World!\";\n  $x++;\n}while($x&lt;=10);</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>4. Some common functions</strong><br />\n4.1 strtolower &amp; strtoupper &amp; ucfirst</span></p>\n\n<p>As name implies, they convert the string to lowercase or uppercase respectively. For example:</p>\n\n<pre>\n<code class=\"language-php\">$myName = \"Kan Cong\";\n$my_country = \"china\";\necho strtolower($myName); // -&gt; kan cong\necho strtoupper($myName); // -&gt; KAN CONG\necho ucfirst($my_country); // -&gt; China\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4.2 strlen,strpos &amp; substr</span><br />\nstrlen is used to show the length of the string<br />\nstrpos is used to show the position where a specified sub-string is detected.<br />\nsubstr is used to pick up part of the string</p>\n\n<pre>\n<code class=\"language-php\">echo strlen(\"Kan Cong\"); //-&gt; 8\necho strpos(\"Michael\", \"ae\"); // -&gt; 4\necho substr(\"Michael\", 4, 2); // -&gt; ae</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4.3 round</span></p>\n\n<pre>\n<code class=\"language-php\">echo round(1.234); // -&gt; 1\necho round(1.2345, 3); // -&gt; 1.235</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4.4 rand</span><br />\nrand is used to randomly pick up a number from a specified range:</p>\n\n<pre>\n<code class=\"language-php\">// Use your knowledge of strlen(), substr(), and rand() to\n// print a random character from your name to the screen.\n$name = \"Kan\";\n$pickup = rand(0, strlen($name)-1);\necho substr($name, $pickup, 1);</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>5. Array functions</strong><br />\n5.1 array_push</span><br />\nIt is used to add new element in the end of an array:</p>\n\n<pre>\n<code class=\"language-php\">$test = array();\narray_push($test, \"Hello\");\necho $test[0]; // -&gt; Hello</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">5.2 count</span><br />\nIt is used to count the number of element of an array:</p>\n\n<pre>\n<code class=\"language-php\">echo count($name_of_array);</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">5.3 sort,&nbsp;rsort and join</span><br />\nsort is used to sort the array elements in ascending order, rsort does it reversely. join is the alias of implode</p>\n\n<pre>\n<code class=\"language-php\">$array = array(8,2,3,1);\nsort($array);\necho join(\" | \", $array); //-&gt; 1 | 2 | 3 | 8\n// join(glue, array) is used to connect all the array elements in a row with specified glue(e.g. any symbol).\n</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>6. class</strong><br />\n6.0 construct and destruct&nbsp;</span></p>\n\n<pre>\n<code class=\"language-php\">class Person {\n  public $isAlive = true;\n  public $firstname;\n  public $lastname;\n  public $age;\n  public function __construct($firstname, $lastname, $age){ \n  // notice that there are two underscores ahead of constructor\n    $this-&gt;firstname = $firstname;\n    $this-&gt;lastname = $lastname;\n    $this-&gt;age = $age;\n  }\n  public function __destruct(){\n    echo \"This line will be displayed at the end of the php file execution!\";\n  }\n}\n$teacher = new Person(\"boring\", \"12345\", 12345);\n$student = new Person(\"Hi\", \"Noway\", 234);\necho $student-&gt;age; // just the same as instance.function in Ruby\n}\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">6.1 inheritance and override</span></p>\n\n<pre>\n<code class=\"language-php\">class A{\n  public $a = true;\n}\nclass B extends A{\n  public $a = false;\n}</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">6.2 &ldquo;Final&rdquo; keyword</span><br />\nIf you want to prevent subclasses from editing function or property of parent class, then you can add keyword &quot;final&quot; as a prefix, for example:</p>\n\n<pre>\n<code class=\"language-php\">class Vehicle {\n  final public function honk() {\n    return \"HONK HONK!\";\n  }\n}</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">6.3 constant and scope(namespace of constant)</span><br />\nconstant name does not have $ which is used as prefix for variables and classes.</p>\n\n<pre>\n<code class=\"language-php\">class Kan{\n  const name = \"Kan Cong\";\n}\necho Kan::name;// -&gt; Kan Cong</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">6.4 &quot;static&quot; keyword</span></p>\n\n<p>With adding the &quot;static&quot; keyword ahead of the name of property or method:</p>\n\n<ul>\n	<li>the static&nbsp;property or method can be called directly by the class itself&nbsp;without through an class instance.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">the static property cannot be called by class instances,</span> but static method can be called by class instances as well.</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">class King {\n  public static function proclaim() {\n  echo \"A kingly proclamation!\";\n  }\n  public static $hello1 = \"Hello, static!\";\n  public $hello2 = \"Hello, public!\";\n  }\necho King::proclaim().\"&lt;br&gt;\";\n//A kingly proclamation!\necho King::$hello1.\"&lt;br&gt;\";\n//Hello, static!\n$king = new King();\necho $king-&gt;proclaim().\"&lt;br&gt;\";\n//A kingly proclamation!\necho $king-&gt;hello1.\"&lt;br&gt;\";\n//E_NOTICE : type 8 -- Undefined property: King::$hello1\necho $king-&gt;hello2.\"&lt;br&gt;\";\n//Hello, public!</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">6.5 get and set&nbsp;</span><br />\ndata <span style=\"color:rgb(178, 34, 34)\">getter</span> and <span style=\"color:rgb(178, 34, 34)\">setter</span></p>\n\n<pre>\n<code class=\"language-php\">class Example {\n  public $name;\n  public $favorite_food;\n  public $sound;\n  function __get($name){\n	echo \"Asked for \".$name.\"&lt;br/&gt;\";\n	return $this-&gt;$name;\n  }\n  function __set($name, $value){\n	switch ($name){	\n	  case \"name\":\n		$this-&gt;name = $value;\n		break;\n	  case \"favorite_food\":\n		$this-&gt;favorite_food = $value;\n		break;\n	  case \"sound\":\n	  	$this-&gt;sound = $value;\n	  	break;\n	  default:\n		echo $name.\" Not Found!&lt;/br&gt;\";\n    }\n  }\n}\n</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>&nbsp;7. class related methods</strong></span></p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">is_a(name_of_instance, &quot;name_of_class&quot;)</span>: is used to check whether an class is a instance of another class.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">property_exists(&quot;name_of_class&quot; or $object, &quot;name_of_property&quot;)</span>: is used to check whether a class or object has a given property.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">method_exists(&quot;name_of_class&quot; or $object, &quot;name_of_method&quot;)</span>: is used to check whether a class or object has a given method.</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">class Person{\n	public $pub;\n	private $priv;\n	static $stat;\n	static protected $prot;\n	static function stat1(){\n		echo \"I am a static function!&lt;br&gt;\";\n	} \n	public function pub1(){\n		echo \"I am a public function!&lt;br&gt;\";	\n	}\n	private function priv1(){\n		echo \"I am a public function!&lt;br&gt;\";	\n	}\n} \n$me = new Person();\n//check if it is an instance of a specfied class\nvar_dump(is_a($me, \'Person\'));//true\n//check if it is a property of an object\nvar_dump(property_exists($me, \'pub\'));//true\nvar_dump(property_exists($me, \'priv\'));//true\nvar_dump(property_exists($me, \'stat\'));//true\nvar_dump(property_exists($me, \'prot\'));//true\n//check if it is a property of a specfied class\nvar_dump(property_exists(\'Person\', \'pub\'));//true\nvar_dump(property_exists(\'Person\', \'priv\'));//true\nvar_dump(property_exists(\'Person\', \'prot\'));//true\n//check if it is a method of an object\nvar_dump(method_exists($me, \'stat1\'));//true\nvar_dump(method_exists($me, \'pub1\'));//true\nvar_dump(method_exists($me, \'priv1\'));//true\n//check if it is a method of an object\nvar_dump(method_exists(\'Person\', \'stat1\'));//true\nvar_dump(method_exists(\'Person\', \'pub1\'));//true\nvar_dump(method_exists(\'Person\', \'priv1\'));//true</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">7.1 instanceof() and clone()</span></p>\n\n<pre>\n<code class=\"language-php\">$is_it_an_animal = ($animal_one instanceof Dog) ? \"Yes\" : \"Not True\";\necho \"It is \".$is_it_an_animal.\" that $animal_one-&gt;name is an dog!&lt;/br&gt;\";\n$animal_clone = clone $animal_one;</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><strong><span style=\"color:rgb(178, 34, 34)\">8. Associative Arrays or so-called map(like the Hash in Ruby)</span></strong></p>\n\n<pre>\n<code class=\"language-php\">$drink = array(\'lime\'=&gt;\'Coke\', \'wine\'=&gt;\"Great Wall\", \'beer\'=&gt;\'Tingstao\');\nforeach ($drink as $cat=&gt;$name){\n  echo $name.\" is kind of \".$cat.\".\";\n  echo \'&lt;br /&gt;\';\n}</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">&nbsp;</span></strong></p>\n\n<hr />\n<p><strong><span style=\"color:rgb(178, 34, 34)\">9. ++ as prefix and suffix</span></strong></p>\n\n<pre>\n<code class=\"language-php\">$x = 5;\n$y = 5;\necho $x++; // -&gt; 5, this command will be executed first before add 1 to $x itself\necho \"&lt;br/&gt;\";\necho ++$y; // -&gt; 6, this command will be executed after $y add 1 to itself</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><strong><span style=\"color:rgb(178, 34, 34)\">10. trim&nbsp;</span></strong><br />\n&quot;trim&quot; is used to strip the white spaces from beginning or end of a string. For example:</p>\n\n<pre>\n<code class=\"language-php\">$r = \"           12   \";\necho strlen($r).\"&lt;br/&gt;\"; //-&gt; 16\necho strlen(ltrim($r)).\"&lt;br/&gt;\"; // -&gt; 5\necho strlen(rtrim($r)).\"&lt;br/&gt;\"; // -&gt; 13\necho strlen(trim($r)).\"&lt;br/&gt;\"; // -&gt; 2</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><strong><span style=\"color:rgb(178, 34, 34)\">11. printf</span></strong><br />\nIt is used to print out formatted string, for example:</p>\n\n<pre>\n<code class=\"language-php\">$a = 11;\necho \"$a World!\".\"&lt;br/&gt;\"; //-&gt; 11 World!\nprintf (\"%f World! &lt;br/&gt;\", $a);	//-&gt; 11.000000 World!\n// %f means float format for $a\nprintf (\"%.2f World! &lt;/br&gt;\", $a); //-&gt; 11.00 World!</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><strong><span style=\"color:rgb(178, 34, 34)\">12. interface&nbsp;</span></strong></p>\n\n<p>In PHP, class can only extend one and only parent class. However &quot;implements&quot; is another way for class to sort-of inherit from as many &quot;interface&quot; as you want:</p>\n\n<ul>\n	<li>Object interfaces allow you to create code which specifies which methods a class must implement, <span style=\"color:rgb(178, 34, 34)\">without having to define how these methods are handled</span>.</li>\n	<li>All methods declared in an interface <span style=\"color:rgb(178, 34, 34)\">must be public; this is the nature of an interface</span>.</li>\n	<li>Classes may implement more than one interface if desired <span style=\"color:rgb(178, 34, 34)\">by separating each interface with a comma</span></li>\n</ul>\n\n<pre>\n<code class=\"language-php\">interface Profile{\n	public function setAge($age); \n	public function setGender($gender); \n	public function setFirstname($firstname); \n	public function setLastname($lastname); \n}\ninterface Profession{\n	public function setProfession($profession); \n}\nclass Person implements Profile, Profession{\n	public $age;\n	public $gender;\n	public $firstname;\n	public $lastname;\n	public $profession;\n	public function setAge($age){\n		return $this-&gt;age = $age;\n	}\n	public function setGender($gender){\n		return $this-&gt;gender = $gender;\n	}\n	public function setFirstname($firstname){\n		return $this-&gt;firstname = $firstname;\n	} \n	public function setLastname($lastname){\n		return $this-&gt;lastname = $lastname;\n	}\n	public function setProfession($profession){\n		return $this-&gt;profession = $profession;\n	}	\n}\n$me = new Person();\necho $me-&gt;setFirstname(\'Kan\').\" is \".$me-&gt;setAge(32).\" years old \".$me-&gt;setGender(\'male\').\", and a \".$me-&gt;setProfession(\'Software Engineer\').\".\";</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">12.1 class &amp; interface extending</span></p>\n\n<ul>\n	<li>Class cannot extend more than one class, but interface can</li>\n</ul>\n\n<p>For example</p>\n\n<pre>\n<code class=\"language-php\">class Profile{\n  public function setAge($age){\n  } \n}\nclass Profession{\n  public function setProfession($profession){\n  }\n}\n// class cannot extends more than one classes, so this will cause error\nclass Person extends Profile, Profession{\n  static $name = \"Kan\";\n}\n//////////////////////////////////////////////\ninterface a\n{\n  public function foo();\n}\n\ninterface b\n{\n  public function bar();\n}\n//interface can extends multiple interfaces\ninterface c extends a, b\n{\n  public function baz();\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><strong><span style=\"color:rgb(178, 34, 34)\">13. abstract class&nbsp;</span></strong></p>\n\n<p>PHP 5 introduces abstract classes and methods.</p>\n\n<ul>\n	<li>Classes defined as abstract <span style=\"color:rgb(178, 34, 34)\">can not be instantiated</span></li>\n	<li>and any class that <span style=\"color:rgb(178, 34, 34)\">contains at least one abstract method must also be abstract</span>.</li>\n	<li>Methods defined as abstract simply declare the method&#39;s signature - <span style=\"color:rgb(178, 34, 34)\">they cannot define the implementation</span>.</li>\n	<li>When inheriting from an abstract class, all methods marked abstract in the parent&#39;s class declaration <span style=\"color:rgb(178, 34, 34)\">must be defined by the child</span></li>\n	<li>additionally, <span style=\"color:rgb(178, 34, 34)\">these methods must be defined with the same (or a less restricted) visibility</span>.</li>\n</ul>\n\n<p>For example:&nbsp;</p>\n\n<pre>\n<code class=\"language-php\">abstract class AbstractClass\n{\n    // Force Extending class to define this method\n    abstract protected function getValue();\n    abstract protected function prefixValue($prefix);\n\n    // Common method\n    public function printOut() {\n        print $this-&gt;getValue() . \"n\";\n    }\n}\nclass ConcreteClass1 extends AbstractClass\n{\n    protected function getValue() {\n        return \"ConcreteClass1\";\n    }\n    public function prefixValue($prefix) {\n        return \"{$prefix}ConcreteClass1\";\n    }\n}</code></pre>\n\n<p>&nbsp;</p>','2016-01-01 19:12:07',4),(123,'PHP','Class & Object','Constructor & Destructor','<p><span style=\"color:#B22222\"><strong>1. Constructor</strong></span></p>\n\n<p>PHP 5 allows developers to declare <span style=\"color:#B22222\">constructor</span> methods for classes.</p>\n\n<ul>\n	<li>Classes which have a constructor method call this method on each newly-created object, <span style=\"color:#B22222\">so it is suitable for any initialization that the object may need before it is used</span>.</li>\n	<li>Parent constructors are not called implicitly if the <span style=\"color:#B22222\">child class</span> defines a constructor. <span style=\"color:#B22222\">In order to run a parent constructor, a call to parent::__construct() within the child constructor is required.</span></li>\n	<li>If the child class does not define a constructor then it may be inherited from the parent class just like a normal class method (if parent constructor&nbsp;was not declared as private).</li>\n</ul>\n\n<p><span style=\"color:#B22222\">1. 1 constructor is actually the way of running some codes when an new instance is created</span></p>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-php\">class BaseClass {\n  function __construct() {\n    print \"In BaseClass constructorn\";\n  }\n}\nclass SubClass extends BaseClass {\n  function __construct() {\n    parent::__construct();\n    print \"In SubClass constructorn\";\n  }\n}\nclass OtherSubClass extends BaseClass {\n // inherits BaseClass\'s constructor\n}\n// In BaseClass constructor\n$obj = new BaseClass();\n// In BaseClass constructor\n// In SubClass constructor\n$obj = new SubClass();\n// In BaseClass constructor\n$obj = new OtherSubClass();</code></pre>\n\n<p><span style=\"color:#B22222\">2. And the parameters used in __construct need to be given when instantiating the class, e.g.</span></p>\n\n<pre>\n<code class=\"language-php\">class Database {\n  protected $userName;\n  protected $password;\n  protected $dbName;\n  public function __construct ( $UserName, $Password, $DbName ) {\n    $this-&gt;userName = $UserName;\n    $this-&gt;password = $Password;\n    $this-&gt;dbName = $DbName;\n  }\n}\n// and you would use this as:\n$db = new Database ( \'user_name\', \'password\', \'database_name\' );</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><span style=\"color:#B22222\"><strong>2. Destructor</strong></span></p>\n\n<p>PHP 5 introduces a destructor concept similar to that of other object-oriented languages, such as C++.</p>\n\n<ul>\n	<li>The destructor method will be called as soon as there are no other references to a particular object, or in any order during the shutdown sequence.</li>\n	<li><span style=\"color:#B22222\">The destructor will be called even if script execution is stopped using exit()</span>. Calling exit() in a destructor will prevent the remaining shutdown routines from executing.</li>\n	<li>That means as long as there is any reference to an object instance left, the destructor will not be called.</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">class MyDestructableClass {\n  function __construct() {\n    print \"In constructor&lt;br&gt;\";\n    $this-&gt;name = \"MyDestructableClass\";\n  }\n  function __destruct() {\n    print \"Destroying \" . $this-&gt;name . \"&lt;br&gt;\";\n  }\n  function hello(){\n    echo \"Hello, cannot be destructed yet!&lt;br&gt;\";\n  }\n}\n$obj = new MyDestructableClass();\n//In constructor\n$obj-&gt;hello();\n//Hello, cannot be destructed yet!\n//Destroying MyDestructableClass\n\n</code></pre>\n\n<p><br />\n&nbsp;</p>','2016-01-01 19:46:32',4),(124,'PHP','DOM','XPATH','<p>Here I would like to discuss the usage of PHP built-in DOMDocument with DOMXPath classes together to scrape the fetched HTML page</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">1. XPATH</span></strong></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1.1 Addressing</span></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1.1.1 Addressing Elements</span></p>\n\n<p>a) Absolute Addressing</p>\n\n<p>/bookshelf/book/title<br />\nThis will grab a list of all title elements from the document, which are children of a book element, which is a child of a bookshelf element. Overall, it will grab all title elements.</p>\n\n<p>b) Relative Addressing</p>\n\n<p>/bookshelf/book/title/.<br />\nThe first expression will simply select the title elements of the books again. The expression is just an alternative to the expression you already got to know to access the title elements:</p>\n\n<p>/bookshelf/book/title/..<br />\nThe second expression will select the parent elements of the titles. There are the book elements in the example document. The expression would work almost the same as: /bookshelf/book</p>\n\n<p>c) Wildcards Addressing</p>\n\n<p>The wildcard used in XPath is the *, which can be used instead of an element name. This character defines that the name of the element to match does not matter, but there must be an element, e.g.</p>\n\n<p>/bookshelf/*/title<br />\n/*/book/title<br />\n/*/*/title</p>\n\n<p>d) Matching all descendants</p>\n\n<p>you can address all descendant elements of the current context using two slashes instead of a single one, and it is also possible to use a descendants match anywhere in an XPath expression e.g.</p>\n\n<p>//title<br />\n/bookshelf//title<br />\n/bookshelf/book//title</p>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\">1.1.2 Addressing Attributes</span></p>\n\n<p>While element matching in an XPath expression is simply done by using the name of the desired element, attribute matches need to be prefixed by the &quot;@&quot; character. Beside that, such matches are used in an expression not different from element addressing.</p>\n\n<p>a) Basic form<br />\nFor example, it is possible to select all &quot;id&quot; attribute items of book elements, using one of the following expressions</p>\n\n<p>/bookshelf/book/@id<br />\n//book/@id<br />\n//book//@id<br />\n//@id</p>\n\n<p>b) Wildcard form</p>\n\n<p>As already mentioned, attribute matches can also be used together with the * wildcard. This allows you to select all attribute items at once. The following examples illustrate the usage of the wildcard with attributes:</p>\n\n<p>/bookshelf/book/title/@*<br />\n/bookshelf/book//@*</p>\n\n<p>c) Union selections</p>\n\n<p>Sometimes it makes sense to not only select nodes by a single expression, but to union the item sets returned by multiple expressions. Instead of evaluating two or more expressions in a row and work on them separately, you can instruct the XPath engine to unify them in a single return set. You connect two expressions by the pipe char | to have them united, e.g.</p>\n\n<p>/bookshelf/book|/bookshelf/magazine<br />\n/bookshelf/book/title|/bookshelf/book/author</p>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\">1.1.3 XPath axes</span></p>\n\n<p>The following section will cover a more advanced navigating scheme called &quot;XPath Axes&quot;. These axes are similar to axes of a Cartesian coordinate system. Using them it is possible to specify the exact location of any point inside the system. Or in our case the exact location of any element.</p>\n\n<p>The tree is treated as being inside a multi dimensional space, where every axis represents a relation between some of the nodes. The XPath standard defines 13 axes.</p>\n\n<p>1) ancestor: All ancestors of the current node. This includes the parent node, as well as the parent of the parent and so on. Therefore this axis will always include the root node</p>\n\n<p>2) ancestor-or-self: All ancestors, as well as the current node itself</p>\n\n<p>3) attribute: Attributes of the current element. If the current node is not an element this axis will be empty.</p>\n\n<p>4) child: Every direct child of the current node.</p>\n\n<p>5) descendant: Every descendant of the current node. This includes children of children and so on.</p>\n\n<p>6) descendant-or-self: All descendants or the current node itself.</p>\n\n<p>7) following: Every node following the current node. Descendants, attributes and namespace nodes are excluded from this axis</p>\n\n<p>8) following-sibling: All siblings following the current node.</p>\n\n<p>9) namespace: All namespace nodes defined on the current node.</p>\n\n<p>10) parent: The parent node of the current node.</p>\n\n<p>11) preceding: All nodes before the current node. Ancestors, attributes and namespace nodes are excluded</p>\n\n<p>12) preceding-sibling: All siblings preceding the current node</p>\n\n<p>13) self: The current node itself</p>\n\n<p>Every step inside a location specified as an XPath query actually consists of three parts: An axis, a node test and one or more predicates, which are optional and narrow down the node set to a more fine grained subset. Syntax likes:</p>\n\n<p>axisname::nodetest[predicates]</p>\n\n<p>Because in most cases the child axis will be used. Therefore it is defined as the default one. This means if the axis is omitted the child axis will be used automatically. Therefore a simple location like this one.</p>\n\n<p>/bookstore/book/title[@lang=&quot;eng&quot;]<br />\nIs treated like it has been written like this:<br />\n/child::bookstore/child::book/child::title[@lang=&quot;eng&quot;]</p>\n\n<p>a) Ancestor axis<br />\n/groupmembers/member/firstname[text() = &#39;Jakob&#39;]/ancestor::member<br />\nis equal to:<br />\n/groupmembers/member[firstname=&#39;Jakob&#39;]</p>\n\n<p>b) Attribute axis<br />\n/groupmembers/member[firstname = &#39;John&#39; and lastname = &#39;Doe&#39;]/attribute::age</p>\n\n<p>c) Descendant axis<br />\n/groupmembers/member/descendant::*</p>\n\n<p>d) Following axis<br />\n/groupmembers/member[2]/following::member<br />\nThe second member element in the document is selected first. Finally the following axis is used to select all following elements of the type member.</p>\n\n<p>e) Following-sibling axis<br />\n/groupmembers/member[2]/following-sibling::*</p>\n\n<p>f) Parent axis<br />\n/groupmembers/member/firstname[text() = &#39;Jakob&#39;]/parent::*</p>\n\n<p>g) Namespace axis<br />\n/groupmembers/member[firstname = &#39;Jakob&#39;]/nationality/namespace::*</p>\n\n<p>h) Preceding axis<br />\n/groupmembers/member[2]/preceding::member</p>\n\n<p>i) Preceding-sibling axis<br />\n/groupmembers/member[2]/preceding-sibling::*</p>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\">1.1.4 Functions, operators and conditions</span></p>\n\n<p>a) Conditions</p>\n\n<p>/bookshelf/book/author[@id]<br />\nThe condition is given inside of the braces. In the example, the condition is that an attribute (indicated by the @) must be available.</p>\n\n<p>/bookshelf/book/author[@*]<br />\nto match all author elements which have any attributes set.</p>\n\n<p>/bookshelf/book/author[1]<br />\nIn this case, only the first author of every book element is selected.</p>\n\n<p>b) Operators</p>\n\n<p>/bookshelf/book/title[@lang = &#39;de&#39;]/..<br />\nThis expression matches only book titles, which are in German language and returns the book elements, where such a title is found</p>\n\n<p>/bookshelf/book[price &lt; 39]<br />\nUsing this expression you will receive all book elements, which have a price tag as a child, that contains a number that is smaller than 39</p>\n\n<p>/bookshelf/book[@id = 1]/price<br />\n&nbsp;If you want to know the price of book number 1</p>\n\n<p>&nbsp;c) Functions</p>\n\n<p>&nbsp;/bookshelf/book/author[not( @id )]<br />\n&nbsp;This expression returns all &quot;author&quot; elements, that do not have an attribute &quot;id&quot;.</p>\n\n<p>&nbsp;# Node set functions</p>\n\n<p>&nbsp;last(): This function returns the number of the last node of a certain type.<br />\n&nbsp;count(): This function returns the number of nodes in the current context.<br />\n&nbsp;position(): This function does actually not work on a set of nodes, but always returns the position of the current nodes.</p>\n\n<p>&nbsp;/bookshelf/book/author[last() - 1]<br />\n&nbsp;fetch for example only the last author of a book, or the second last one:</p>\n\n<p>&nbsp;/bookshelf/book/author[position() mod 2 = 1]<br />\n&nbsp;Another possibility is to return only the authors at an odd position.</p>\n\n<p>#############################################################################</p>\n\n<p>&nbsp;More functions can be found in PDF full manual</p>','2016-01-01 19:52:53',1),(125,'PHP','Functions','Getusage()','<ol>\n	<li>On unixoid systems (and in php 7.0.0 on Windows as well), you can use getrusage</li>\n	<li>Note that you don&#39;t need to calculate a difference if you are spawning a php instance for every test.</li>\n</ol>\n\n<pre>\n<code class=\"language-php\">// Script start\n$rustart = getrusage();\n// Code ...\n// Script end\nfunction rutime($ru, $rus, $index) {\n  return ($ru[\"ru_$index.tv_sec\"]*1000 + intval($ru[\"ru_$index.tv_usec\"]/1000)) -  ($rus[\"ru_$index.tv_sec\"]*1000 + intval($rus[\"ru_$index.tv_usec\"]/1000));\n}\n$ru = getrusage();\necho \"This process used \" . rutime($ru, $rustart, \"utime\") .\n    \" microsecs for its computationsn\";\necho \"It spent \" . rutime($ru, $rustart, \"stime\") .\n    \" microsecs in system callsn\";</code></pre>','2016-01-01 20:01:25',0),(126,'MySql','Basic Syntax','Mysqli Confusion','<p>PHP provides OOP and procedual ways of connecting MySQL, it is necessary to solve some confusions here:</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. Connection</strong></span></p>\n\n<p>Difference between<span style=\"color:rgb(82, 187, 93)\"> </span><span style=\"color:rgb(0, 168, 255)\">mysqli::__construct() </span>and <span style=\"color:rgb(82, 187, 93)\">mysqli_connect()</span></p>\n\n<ul>\n	<li>they are alias to each other.</li>\n	<li><span style=\"color:rgb(0, 168, 255)\">mysqli::_construct</span> to connect mysql when instantiate <span style=\"background-color:rgb(230, 222, 34); color:black\">mysqli</span> class in OOB way, while <span style=\"color:rgb(82, 187, 93)\">mysqli_connect()</span> is the counterpart in procedual way, for example:</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">$connection1 = new mysqli($host, $username, $password, $db_name); //OOB way\n$connection2 = mysqli_connect($host, $username, $password, $db_name); //procedual way\n</code></pre>\n\n<ul>\n	<li><span style=\"color:rgb(0, 168, 255)\">new mysqli()</span>, <span style=\"color:rgb(82, 187, 93)\">mysqli_init(),</span> <span style=\"color:rgb(0, 168, 255)\">mysqli_options(),</span> &nbsp;<span style=\"color:rgb(82, 187, 93)\">mysqli_real_connect()</span></li>\n	<li>if no parameters given to <span style=\"color:rgb(0, 168, 255)\">new mysqli()</span>, it will equal to <span style=\"color:rgb(82, 187, 93)\">mysqli_init()</span> which does initialization and allow some preparation work(e.g. <span style=\"color:rgb(0, 168, 255)\">mysqli_options()</span>) before really connect to the database by <span style=\"color:rgb(82, 187, 93)\">mysqli_real_connect(),</span> for example:</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">// OOB way\n$database = new mysqli();\n$database-&gt;options(MYSQLI_OPT_CONNECT_TIMEOUT, 5);\n$database-&gt;real_connect($host, $username, $password, $db_name);\n// Procedual way\n$database = mysqli_init();\nmysqli_options($database, MYSQLI_OPT_CONNECT_TIMEOUT, 5);\nmysqli_real_connect($database, $host, $username, $password, $db_name);\n</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. Query results</strong></span></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2.1 mysqli_fetch_array()</span></p>\n\n<ul>\n	<li><span style=\"color:rgb(0, 168, 255)\">mysqli_fetch_array()</span> is an extended version of the <span style=\"color:rgb(82, 187, 93)\">mysqli_fetch_row()</span> function, it additionaly provides way of uses field names of result row as indices to save the result row into an associative array.</li>\n	<li>mysqli_fetch_array(<span style=\"background-color:rgb(230, 222, 34); color:black\">MYSQLI_ASSOC</span>) equals to mysqli_fetch_assoc()</li>\n	<li>mysqli_fetch_array(<span style=\"background-color:rgb(230, 222, 34); color:black\">MYSQLI_NUM</span>) equals to mysqli_fetch_row()</li>\n	<li>mysqli_fetch_array(<span style=\"background-color:rgb(230, 222, 34); color:black\">MYSQLI_BOTH</span>) will create an array with both of above two attributes.</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">$query = \"SELECT Name, CountryCode FROM City ORDER by ID LIMIT 3\";\n$result = $mysqli-&gt;query($query);\n\n$row = $result-&gt;fetch_array(MYSQLI_NUM);\nprintf (\"%s (%s)n\", $row[0], $row[1]);\n\n/* associative array */\n$row = $result-&gt;fetch_array(MYSQLI_ASSOC);\nprintf (\"%s (%s)n\", $row[\"Name\"], $row[\"CountryCode\"]);\n\n/* associative and numeric array */\n$row = $result-&gt;fetch_array(MYSQLI_BOTH);\nprintf (\"%s (%s)n\", $row[0], $row[\"CountryCode\"]);</code></pre>\n\n<p style=\"color:rgb(178, 34, 34)\">2.2 mysqli_fetch_all()</p>\n\n<p>This is useful because it fetches all resultsets in a batch in selected return types(<span style=\"color:rgb(0, 168, 255)\">MYSQLI_ASSOC, MYSQLI_NUM, MYSQLI_BOTH</span>)</p>\n\n<pre>\n<code class=\"language-php\">$connect = new mysqli($host, $username, $passwd, $database);\n$sql = \"SELECT * FROM notes\";\n$result = $connect-&gt;query($sql);\n//take all rows all together\n$rows = $result-&gt;fetch_all(MYSQLI_ASSOC);\n//take all rows all together\n$rows = [];\nwhile($row = $result-&gt;fetch_array(MYSQLI_ASSOC)){\n  $rows[] = $row;\n}\n</code></pre>','2016-01-09 19:59:40',8),(127,'PHP','Class & Object','Visibility','<p>The visibility of a property or method can be defined by prefixing the declaration with the keywords <strong><span style=\"color:rgb(178, 34, 34)\">public</span></strong>, <strong><span style=\"color:rgb(178, 34, 34)\">protected</span></strong> or <strong><span style=\"color:rgb(178, 34, 34)\">private</span></strong>.</p>\n\n<ul>\n	<li>Class members declared as&nbsp;<span style=\"color:rgb(178, 34, 34)\">public</span> can be accessed everywhere.</li>\n	<li>Members declared as&nbsp;<span style=\"color:rgb(178, 34, 34)\">protected</span> can be accessed only within the class itself and by inherited classes.</li>\n	<li>Members declared as <span style=\"color:rgb(178, 34, 34)\">private</span> may only be accessed by the class that defines the member.</li>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">The biggest difference between protected and private is that, protected property or method can be called by the methods defined both in parent and inherited classes, but private counterparts can only be called by parent class&#39;s methods</span></li>\n</ul>\n\n<pre>\n<code class=\"language-php\">class MyClass\n{\n    public $public = \'Public\';\n    protected $protected = \'Protected\';\n    private $private = \'Private\';\n    function printHello()\n    {\n        echo $this-&gt;public . \'&lt;br&gt;\';\n        echo $this-&gt;protected . \'&lt;br&gt;\';\n        echo $this-&gt;private . \'&lt;br&gt;\';\n    }\n}\nclass MyClass2 extends MyClass\n{\n\n    function printHello1()\n    {\n        echo $this-&gt;public . \'&lt;br&gt;\';\n        echo $this-&gt;protected . \'&lt;br&gt;\';\n        echo $this-&gt;private . \'&lt;br&gt;\';\n    }\n}\n$a = new MyClass2();\n$a-&gt;printHello();\n/*\nPublic\nProtected\nPrivate\n*/\n$a-&gt;printHello1();\n/*\nPublic\nProtected\nE_NOTICE : type 8 -- Undefined property: MyClass2::$private\n*/</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. For Properties</strong></span></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>1.1 Calling</strong></span></p>\n\n<ul>\n	<li>Class properties <span style=\"color:rgb(178, 34, 34)\">must</span> be defined <span style=\"color:rgb(178, 34, 34)\">as public, private, or protected</span>.</li>\n	<li>If declared using var, the property will be defined as public.</li>\n	<li>Public property can be directly called by instaniated objects of the class.</li>\n	<li>While protected and private properties can only be called by methods beneath the same class, but cannot be called by instantiated objects of the class directly, e.g.</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">class MyClass\n{\n    public $public = \'Public\';\n    protected $protected = \'Protected\';\n    private $private = \'Private\';\n    function printHello()\n    {\n        echo $this-&gt;public;\n        echo $this-&gt;protected;\n        echo $this-&gt;private;\n    }\n}\n$obj = new MyClass();\necho $obj-&gt;public; // Works\necho $obj-&gt;protected; // Fatal Error\necho $obj-&gt;private; // Fatal Error\n$obj-&gt;printHello(); // Shows Public, Protected and Private\n</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">1.2 Inheritation</span></strong></p>\n\n<ul>\n	<li>Parent private property is exclusive for the parent class defining it, <span style=\"color:rgb(178, 34, 34)\">which means it can be accessed by the functions inherited from the parent class but not by the newly created functions in the extended child class.</span></li>\n	<li>Parent private property <span style=\"color:rgb(178, 34, 34)\">can not be really redeclared by the extended classes</span>, the redeclaration of the property actually create a new property with the same name for the child class defining it <span style=\"color:rgb(178, 34, 34)\">no matter it is public, protected or private.&nbsp;</span><span style=\"color:rgb(178, 34, 34)\">And the redeclared property won&#39;t be accessible by the inhertied parent methods, but only by&nbsp;the newly created methods in the extended class defining it.</span></li>\n	<li>And&nbsp;public and protected properties can be both inherited and redeclared, e.g.</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">class MyClass2 extends MyClass\n{\n    // Redeclare actually means to update the inherited property value which used by inherited methods or newly created methods. We can redeclare the public and protected properties, but not private which is always exclusive for the class defining it.\n    protected $protected = \'Protected2\';\n    // but we can defined a new property with the same name no matter what visibility it is\n	private $private = \"Private2\";\n    function printHello1()\n    {\n        echo $this-&gt;public;\n        echo $this-&gt;protected;\n        echo $this-&gt;private;\n    }\n}\n$obj1 = new MyClass();\n$obj1-&gt;printHello(); //\"Public Protected Private\"\n$obj2 = new MyClass2();\n$obj2-&gt;printHello(); //\"Public Protected2 Private\"\n$obj2-&gt;printHello1();//\'Public Protected2 Private2\'</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. For methods</strong></span></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2.1 Calling</strong></span></p>\n\n<ul>\n	<li>Class methods <span style=\"color:rgb(178, 34, 34)\">may</span> be defined as <span style=\"color:rgb(178, 34, 34)\">public, private, or protected.</span></li>\n	<li>Methods declared without any explicit visibility keyword <span style=\"color:rgb(178, 34, 34)\">are defined as public by default</span>.</li>\n	<li>Same as properties, public method can be directly called by instaniated objects of the class</li>\n	<li>Protected and private properties can only be called by other public methods beneath the same class, but cannot be called by instantiated objects of the class directly, e.g.</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">class MyClass\n{\n    // Declare a public constructor\n    public function __construct() { }\n\n    // Declare a public method\n    public function MyPublic() {echo \"public, \"; }\n\n    // Declare a protected method\n    protected function MyProtected() {echo \"protected, \"; }\n\n    // Declare a private method\n    private function MyPrivate() {echo \"private!\";}\n\n    // This is public\n    function Foo()\n    {\n        $this-&gt;MyPublic();\n        $this-&gt;MyProtected();\n        $this-&gt;MyPrivate();\n    }\n}\n$myclass = new MyClass;\n$myclass-&gt;MyPublic(); // Works\n$myclass-&gt;MyProtected(); // Fatal Error\n$myclass-&gt;MyPrivate(); // Fatal Error\n$myclass-&gt;Foo(); // public, protected, private!</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2.2 Inheritation</strong></span></p>\n\n<ul>\n	<li>Same as property, Private method is exclusive for the class defining it,&nbsp;<span style=\"color:rgb(178, 34, 34)\">which means it can be accessed by the functions inherited from the parent class but not by the newly created functions in the extended child class.</span></li>\n	<li>Parent private method&nbsp;<span style=\"color:rgb(178, 34, 34)\">can not be really redeclared by the extended classes</span>, the redeclaration of the method actually create a new method with the same name for the child class defining it <span style=\"color:rgb(178, 34, 34)\">no matter it is public, protected or private.&nbsp;And the redeclared method won&#39;t be accessible by the inhertied parent methods, but only by&nbsp;the newly created methods in the class defining it.</span></li>\n	<li>And&nbsp;public and protected methods can be both inherited and redeclared, e.g.</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">class MyClass3 extends MyClass\n{\n    // This is public\n    function Foo2()\n    {\n        $this-&gt;MyPublic();\n        $this-&gt;MyProtected();\n        $this-&gt;MyPrivate();\n    }\n	private function MyPrivate(){echo \"New Private!\";}\n}\n\n$myclass2 = new MyClass3;\n//original MyPrivate() is not inherited by extended class, any newly defined methods inside the extended class are not able to access it. So fatal Error occurs when trying to access the original private method uncless MyPrivate() is redeclared inside this extended class, no matter it is public, protected or private.\n//However the instance of extended class still can run public method inherited from parent class to access the private method defined in parent class.\n$myclass2-&gt;Foo2(); // \"Public! Protected! New Private!\"\n$myclass2-&gt;Foo(); // \"Public! Protected! Private!\"\n\n###### More Example #######\nclass Bar\n{\n    public function test() {\n        $this-&gt;testPrivate();\n        $this-&gt;testPublic();\n    }\n\n    public function testPublic() {\n        echo \"Bar::testPublic\";\n    }\n\n    private function testPrivate() {\n        echo \"Bar::testPrivate\";\n    }\n}\nclass Foo extends Bar\n{\n	public function test2(){\n		$this-&gt;testPublic();\n		$this-&gt;testPrivate();\n	}\n	public function testPublic() {\n        echo \"Foo::testPublic\";\n    }\n\n    private function testPrivate() {\n        echo \"Foo::testPrivate\";\n    }\n}\n\n$myFoo = new foo();\n$myFoo-&gt;test(); // Bar::testPrivate\n                // Foo::testPublic\n$myFoo-&gt;test2();// Foo::testPrivate\n                // Foo::testPublic\n</code></pre>','2018-02-02 11:16:00',8),(128,'PHP','Misc','Reference','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. reference symbol &quot;&amp;&quot; </strong></span></p>\n\n<ul>\n	<li>is used to create an alias, i.e. <span style=\"color:rgb(178, 34, 34)\">access point</span>&nbsp;for the same content of a variable</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-php\">$a = \"Hello World!\";\n$b = &amp;$a; //now $b is an access to the content of $a, i.e. it has the same content as $a\n$b .= \" I am Kan!\"; // then the content shared by $b and $a has been modified via $b\necho $a;// finally, output will be \"Hello World! I am Kan!\"</code></pre>\n\n<ul>\n	<li>If a variable is passed to a function as argument and the value of the variable is changed inside the function call, usually the change is only valid inside the function, however, you can pass the variable by reference to the function so the function can modify the variable globally. The syntax is as follows:</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">function foo(&amp;$var1, $var2){\n  $var1++;\n  $var2++;\n}\n$a = 32;\n$b = 32;\nfoo($a, $b);\necho $a; // output is 33\necho $b; // output is 32</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Constant cannot be referenced </span></strong></p>\n\n<pre>\n<code class=\"language-php\">const BIRTHDAY = \"1983-03-08\";\n$b = &amp;BIRTHDAY;\necho $b;//error</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3. Returning References(function that returns a reference of a variable )</strong></span></p>\n\n<pre>\n<code class=\"language-php\">class playRef {\n    public $age = 33;\n\n    public function &amp;getDynamicAge() {\n        return $this-&gt;age;\n    }\n	\n	public function getStaticAge(){\n		return $this-&gt;age;\n	}\n}\n\n$obj = new playRef;\n$dynamicaAge = &amp;$obj-&gt;getDynamicAge();//return the reference of $obj-&gt;age;\n$staticAge = $obj-&gt;getStaticAge();\n$obj-&gt;age = 35;\necho $dynamicaAge; // 35\necho $staticAge; // 33</code></pre>\n\n<p><span style=\"background-color:rgb(122, 255, 145)\">Unlike parameter passing, here you have to use &amp; in both places - to indicate that you want to return by reference, not a copy, and to indicate that reference binding, rather than usual assignment, should be done for $myValue</span>.</p>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">To use the returned reference, you must use reference assigment:</span></p>\n\n<pre>\n<code class=\"language-php\">function &amp;collector() {\n  static $collection = array();\n  return $collection;\n}\n$collection = &amp;collector();\n$collection[] = \'foo\';\nprint_r(collector());//[\'foo\']</code></pre>\n\n<p><span style=\"background-color:#FFEC00\">To pass the returned reference to another function expecting a reference, do not use reference symbol, otherwise will cause fatal error:</span></p>\n\n<pre>\n<code class=\"language-php\">function &amp;collector() {\n  static $collection = array();\n  return $collection;\n}\narray_push(collector(), \"foo\");\nprint_r(collector());//[\"foo\"];</code></pre>\n\n<p>&nbsp;</p>','2016-10-07 23:24:44',4),(129,'PHP','Class & Object','Static','<p><span style=\"color:rgb(178, 34, 34)\"><strong>&quot;Static&quot; keyword</strong></span></p>\n\n<ul>\n	<li>Declaring class properties or methods as static makes them<span style=\"color:rgb(178, 34, 34)\"> accessible directly by class defining it without needing an instantiation of the class.</span></li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. Property</span></p>\n\n<ul>\n	<li>A property declared as static <span style=\"background-color:rgb(230, 222, 34)\">cannot be called unstatically</span> with an instantiated class object(though a static method can).</li>\n	<li>Once static variable is set via object or class, it will be <span style=\"background-color:rgb(230, 222, 34); color:black\">set automatically for all family objects and classes</span>&nbsp;</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">class Foo\n{\n    public static $my_static = \'foo\';\n    public function staticValue() {\n        return self::$my_static;\n    }\n}\nclass Bar extends Foo\n{\n    public function fooStatic() {\n        return parent::$my_static;\n    }\n}\necho Foo::$my_static . \"&lt;br&gt;\";//foo\n$foo = new Foo();\n//object cannot call static variable unstatically\necho $foo-&gt;my_static . \"&lt;br&gt;\";// Undefined \"Property\" my_static \necho $foo-&gt;staticValue() . \"&lt;br&gt;\";//foo\necho $foo::$my_static . \"&lt;br&gt;\";//foo\necho \"------------------------------------------&lt;br&gt;\";\n//use a variable to keep the name of the class\n$classname = \'Foo\';\necho $classname::$my_static . \"&lt;br&gt;\";\necho \"-------------------------------------------&lt;br&gt;\";\n//once static variable is set via object or class, it will be set automatically for all family objects and classes \n$foo::$my_static = 10;\necho $foo::$my_static . \"&lt;br&gt;\";//10\necho Foo::$my_static . \"&lt;br&gt;\";//10\necho Bar::$my_static . \"&lt;br&gt;\";//10\nBar::$my_static = 11;\necho $foo::$my_static . \"&lt;br&gt;\";//11\necho Foo::$my_static . \"&lt;br&gt;\";//11\necho Bar::$my_static . \"&lt;br&gt;\";//11</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. Methods example</span></p>\n\n<ul>\n	<li>the pseudo-variable&nbsp;<span style=\"color:rgb(178, 34, 34)\">$this is not available inside the method declared as static</span></li>\n	<li>it seems calling non-static method statically works, but calling non-static property statically does not work</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">class Test{\n	public static function isStatic(){\n	  echo \"Hello, I am a static method!&lt;br&gt;\";\n	}\n	public function isPublic(){\n	  echo \"Hello, I am a public method!&lt;br&gt;\";\n	}\n	public static $static_var = \"Hello, I am a static property!&lt;br&gt;\";\n	public $public_var = \"Hello, I am a public property!&lt;br&gt;\";\n}\nTest::isStatic();\nTest::isPublic();\necho Test::$static_var;\necho Test::$public_var;\n//Access to undeclared static property: Test::$public_var\n$test = new Test();\n$test::isStatic();\n$test::isPublic();\necho $test::$static_var;\necho $test::$public_var;\n//Access to undeclared static property: Test::$public_var</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Static variable defined in functions(not static properties defined in methods in class)</span></strong></p>\n\n<ul>\n	<li>A static variable exists only in a local function scope, but it does not lose its value when program execution leaves this scope, e.g.</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. This following function is quite useless since every time it is called it sets $a to 0 and prints 0. The $a++ which increments the variable serves no purpose since as soon as the function exits the $a variable disappears.</span>&nbsp;</p>\n\n<pre>\n<code class=\"language-php\">function test()\n{\n  $a = 0;\n  echo $a;\n  $a++;\n}</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2.&nbsp;To make a useful counting function which will not lose track of the current count, the $a variable is declared as static:</span></p>\n\n<pre>\n<code class=\"language-php\">function test1()\n{\n  static $a = 0;\n  echo $a;\n  $a++;\n}\n// Now, $a is initialized only in first call of function and every time the test() function is called it will print the value of $a and increment it.</code></pre>\n\n<p>&nbsp;</p>','2018-08-29 10:47:59',4),(130,'Sphinx Search','Sphinx.Conf','Charset Table','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. UTF8 charset mapping of pinyin</strong></span></p>\n\n<p>&nbsp;ā: U+0101; &aacute;: U+00E1; ǎ: U+01CE; &agrave;: U+00E0</p>\n\n<p>&nbsp;Ā: U+0100; &Aacute;: U+00C1; Ǎ: U+01CD; &Agrave;: U+00C0</p>\n\n<p>&nbsp;ō: U+014D; &oacute;: U+00F3; ǒ: U+01D2; &ograve;: U+00F2</p>\n\n<p>&nbsp;Ō: U+014C; &Oacute;: U+00D3; Ǒ: U+01D1; &Ograve;: U+00D2</p>\n\n<p>&nbsp;ē: U+0113; &eacute;: U+00E9; ě: U+011B; &egrave;: U+00E8</p>\n\n<p>&nbsp;Ē: U+0112; &Eacute;: U+00C9; Ě: U+011A; &Egrave;: U+00C8</p>\n\n<p>&nbsp;ī: U+012B; &iacute;: U+00ED; ǐ: U+01D0; &igrave;: U+00EC</p>\n\n<p>&nbsp;ū: U+016B; &uacute;: U+00FA; ǔ: U+01D4; &ugrave;: U+00F9</p>\n\n<p>&nbsp;ǖ: U+01D6; ǘ: U+01D8; ǚ: U+01DA; ǜ: U+01DC; &uuml;: U+00FC&nbsp;</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. Add the following into charset_table to enable search the pinyin with tone</strong></span></p>\n\n<p>U+0101-&gt;a, U+00E1-&gt;a, U+01CE-&gt;a, U+00E0-&gt;a, U+0100-&gt;a, U+00C1-&gt;a, U+01CD-&gt;a, U+00C0-&gt;a,<br />\nU+014D-&gt;o, U+00F3-&gt;o, U+01D2-&gt;o, U+00F2-&gt;o, U+014C-&gt;o, U+00D3-&gt;o, U+01D1-&gt;o, U+00D2-&gt;o,<br />\nU+0113-&gt;e, U+00E9-&gt;e, U+011B-&gt;e, U+00E8-&gt;e, U+0112-&gt;e, U+00C9-&gt;e, U+011A-&gt;e, U+00C8-&gt;e,<br />\nU+012B-&gt;i, U+00ED-&gt;i, U+01D0-&gt;i, U+00EC-&gt;i, U+016B-&gt;u, U+00FA-&gt;u, U+01D4-&gt;u, U+00F9-&gt;u,<br />\nU+01D6-&gt;v, U+01D8-&gt;v, U+01DA-&gt;v, U+01DC-&gt;v, U+00FC-&gt;v</p>','2016-01-02 00:39:05',0),(131,'NodeJS','Module','Flightplan','<p><span style=\"color:rgb(178, 34, 34)\"><strong>Why use flightplan?</strong></span></p>\n\n<ul>\n	<li>Instead of using unsafe ftp to upload files into server, flightplan is a good way to use SSH connection to do the same task with faster deployment speed due to <span style=\"color:rgb(178, 34, 34)\">usage of rsync</span></li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. install node and then flightplan which is a node library</span></p>\n\n<pre>\n<code class=\"language-bash\">npm install -g flightplan</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. install git and make your project folder a git directory</span></p>\n\n<pre>\n<code class=\"language-bash\">git init</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3. initiate flightplan in your project folder&nbsp;</span></p>\n\n<pre>\n<code class=\"language-bash\">npm install flightplan</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4. create flightplan.js in the root of project folder and edit like below</span></p>\n\n<pre>\n<code class=\"language-javascript\">var plan = require(\'flightplan\');\n// configuration\nplan.target(\'testenv\', [\n  {\n    host: \'statsit117\',\n    username: \'statsit\',\n    port: 22,\n    agent: process.env.SSH_AUTH_SOCK\n  },\n]);\n\nplan.target(\'staging\', [\n  {\n    host: \'statsit117\',\n    username: \'statsit\',\n    port: 22,\n    agent: process.env.SSH_AUTH_SOCK\n  },\n]);\n\n// run commands on localhost\nplan.local(function(local) {\n  // uncomment these if you need to run a build on your machine first\n  // local.log(\'Run build\');\n  // local.exec(\'gulp build\');\n  local.log(\'Copy files to remote hosts\');\n  //\"git ls-files\" ensures that only git commited files will be transferred\n  var filesToCopy = local.exec(\'git ls-files\', {silent: true});\n  // rsync files to all the destination\'s hosts\n  if (plan.runtime.target == \'testenv\') {\n    local.transfer(filesToCopy, \'/shared/public_html/brands.test.env\');\n  }else if(plan.runtime.target == \'staging\'){\n    local.transfer(filesToCopy, \'/shared/public_html/brands.staging.env\');\n  }\n});\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">5. trigger the flightplan in CMD to deploy by specify the target name, e.g. staging, production</span></p>\n\n<pre>\n<code class=\"language-bash\">fly staging</code></pre>','2016-05-26 12:17:57',16),(132,'Mac OS X','App Install','Homebrew','<p><strong><span style=\"color:#B22222\">Basics</span></strong></p>\n\n<pre>\n<code class=\"language-bash\"># check the package info\nbrew info package_name\n# install and remove package\nbrew install/remove package_name\n# check options of package installation\nbrew options package_name</code></pre>\n\n<p>&nbsp;</p>','2016-01-02 00:53:27',0),(133,'Linux','Commands','User And Group','<p><span style=\"color:#B22222\"><strong>First of all, install &quot;adduser&quot; app</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">sudo apt-get install adduser</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>1. Create user and group</strong></span></p>\n\n<p><span style=\"color:#B22222\">1.1 create a new user with a new group whose name share the same name of the user by default</span></p>\n\n<pre>\n<code class=\"language-bash\">adduser new_user_name \n##both user \"new_user_name\" and group \"new_user_name\" will be created\n</code></pre>\n\n<p><span style=\"color:#B22222\">1.2 create a new user into an existing group</span></p>\n\n<pre>\n<code class=\"language-bash\">adduser --ingroup existing_group_name new_user_name\n##(user \"new_user_name\" will be created and attached to group \"existing_group_name\")\n</code></pre>\n\n<p><span style=\"color:#B22222\">1.3 create a group</span></p>\n\n<pre>\n<code class=\"language-bash\">addgroup groupname\n##or\nadduser --group groupname\n</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>2. Delete user and group</strong></span></p>\n\n<p><span style=\"color:#B22222\">2.1 delete user&nbsp;</span></p>\n\n<pre>\n<code class=\"language-bash\">deluser user_name\nrm -r /home/user_name\n##is equivalent to:\ndeluser --remove-home user_name\n##(this will delete the home directory of this user all together)\n</code></pre>\n\n<p><span style=\"color:#B22222\">2.2 delete group&nbsp;</span></p>\n\n<pre>\n<code class=\"language-bash\">delgroup group_name\n##or\ndeluser --group group_name\n</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>3. Add user to and remove user from group</strong></span></p>\n\n<p><span style=\"color:#B22222\">3.1 add existing user to an existing group&nbsp;</span></p>\n\n<pre>\n<code class=\"language-bash\">adduser user_name group_name\n#(the original groups of the user will be kept as well)\n#or\ngpasswd -a user_name group_name</code></pre>\n\n<p><span style=\"color:#B22222\">3.2 remove existing user from an existing group</span></p>\n\n<pre>\n<code class=\"language-bash\">deluser user_name group_name\n#or\ngpasswd -d user_name group_name</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>4. List existing users and groups</strong></span></p>\n\n<p><span style=\"color:#B22222\">4.1 list users&nbsp;</span></p>\n\n<pre>\n<code class=\"language-bash\">getent passwd (list all available users)\n#or \ncat /etc/passwd\ngetent group group_name (list all available users inside a group)\n#or \ngetent group groupname | awk -F: \'{print $4}\'</code></pre>\n\n<p><span style=\"color:#B22222\">4.2 list groups&nbsp;</span></p>\n\n<pre>\n<code class=\"language-bash\">getent group \n#(list all groups available)\ngroups user_name \n#(list groups to which the user \"user_name\" belongs to)\ngroups (\n#list groups to which the current user belongs to )\n</code></pre>\n\n<p><span style=\"color:#B22222\">5. create a new user with sudo ability</span></p>\n\n<pre>\n<code class=\"language-bash\">adduser name_of_user\ngpasswd -a name_of_user sudo # add the user to the sudo group\n#is equivalent to:\nadduser name_of_user\nadduser name_of_user sudo</code></pre>\n\n<p>&nbsp;</p>','2016-01-02 01:35:09',2),(134,'Linux','Commands','Rsync','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. What is Rsync</strong></span></p>\n\n<ul>\n	<li>rsync which stands for &quot;remote sync&quot;, is a remote and local file synchronization tool</li>\n	<li>instead of overwrite everything like ftp, <span style=\"color:rgb(178, 34, 34)\">rsync only moves the portion of files that have been changed</span></li>\n	<li>it synchronizes files via SSH channel, so it is much safer than the ftp</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Sync locally</span></strong></p>\n\n<p>Basic syntax looks like this(<span style=\"color:rgb(178, 34, 34)\">src is always the first argument</span>):</p>\n\n<pre>\n<code class=\"language-bash\">rsync -anvz src/ dest</code></pre>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">-a </span>stands for&nbsp;&quot;archive&quot; mode, which means to sync recursively and preserve attributes of original files, e.g. symbolic links, special and device files, modification times, group, owner and permission</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">-n(--dry-run)</span>&nbsp;shows what would have been transferred <span style=\"color:rgb(178, 34, 34)\">without really transfering anything</span></li>\n	<li><span style=\"color:rgb(178, 34, 34)\">-v </span>stands for &quot;verbosely&quot;</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">-z</span> stands for &quot;compression&quot; which whill&nbsp;compress the data&nbsp;transfered</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3. Trailing slash</strong></span></p>\n\n<ul>\n	<li>a trailing slash on the src means only transfer the files inside src folder to dest <span style=\"color:rgb(178, 34, 34)\">without creating src directory inside dest folder</span></li>\n	<li>if no trailing slash is given on the src, then the source folder and all its nested files will be moved to dest folder</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-bash\">#assume ./src/folder1\nrsync -anv src dest\n#then ./dest/src/folder1\nrsync -anv src/ dest\n#then ./dest/folder1</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>4. Sync remotely</strong></span></p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">Push operation</span>, push local file or folder&nbsp;to remote location</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">Pull operation</span>, pull remote file or folder to local location</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">src path is always the first argument</span></li>\n</ul>\n\n<p>For example</p>\n\n<pre>\n<code class=\"language-bash\">#push\nrsync -a ~/src1 username@remote_host:~/dest1\n#pull\nrsync -a username@remote_host:~/src2 ./dest2\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>4.1 more useful options</strong></span></p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">-P(capital letter)</span>: is the combination of <span style=\"color:rgb(178, 34, 34)\">--partial</span>(which keeps partially transfered files if transfer breaks accidentally) and <span style=\"color:rgb(178, 34, 34)\">--progress</span>(which shows progress bar during transfer)</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">-z</span> stands for &quot;compression&quot; which will&nbsp;compress the data before being transferred</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">--delete</span>, which will delete files from dest if they are remove from src, by default, rsync does not delete files from dest even if they&nbsp;no longer exists in src any more</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">--exclude=pattern, --include=pattern</span>: they are used to exclude or include files matching the pattern&nbsp;</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-bash\">#compress files about to be transferred, show progress bar and keep partially transferred files\nrsync -azP ~/src1 username@remote_host:~/dest1\n#delete files from dest if they are removed already from src\nrsync -azP --delete ~/src1 username@remote_host:~/dest1\n#exclude or include files matching pattern\nrsync -azP --exclude=pattern --include=pattern ~/src1 username@remote_host:~/dest1</code></pre>\n\n<p>&nbsp;</p>','2016-01-02 13:58:06',8),(135,'PHP','Functions','Options/Info Functions','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. set_time_limit(second)</strong></span></p>\n\n<ul>\n	<li>it is used to limit&nbsp;the maximum execution time of current script itself</li>\n	<li>the time limit won&#39;t affect time used in tasks outside the scritpt itself,&nbsp;e.g.&nbsp;sleep, file_get_contents, shell_exec, mysql_query, etc.</li>\n	<li>The default limit is 30 seconds or, if it exists, the&nbsp;<span style=\"color:rgb(178, 34, 34)\"><em>max_execution_time</em></span>&nbsp;value defined in the&nbsp;<span style=\"color:rgb(178, 34, 34)\">php.ini</span>.</li>\n	<li>When called,&nbsp;<span style=\"color:rgb(178, 34, 34)\"><strong>set_time_limit()</strong></span>&nbsp;restarts the timeout counter from zero.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">If given 0 as parameter, then no time limit is imposed</span>, the script can run as long as it needs.</li>\n</ul>\n\n<p>For example</p>\n\n<pre>\n<code class=\"language-php\">// no time limit for the script to run\nset_time_limit(0);</code></pre>\n\n<p>&nbsp;</p>','2016-01-06 19:23:18',1),(136,'PHP','Functions','Output Buffering','<p>This page is about how to<strong><span style=\"color:rgb(178, 34, 34)\"> control output buffer of a script.</span></strong></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>Definition from php.ini</strong></span></p>\n\n<ul>\n	<li>Output buffering is a mechanism for controlling how much output data&nbsp;(excluding headers and cookies) PHP should keep internally before pushing that data to the client.</li>\n	<li>If your application&#39;s output exceeds this setting, PHP&nbsp;will send that data in chunks of roughly the size you specify.</li>\n	<li>Turning on this setting and managing its maximum buffer size can yield some&nbsp;interesting side-effects depending on your application and web server.</li>\n	<li>You may be able to send headers and cookies after you&#39;ve already sent output&nbsp;through print or echo. You also may see performance benefits if your server is&nbsp;emitting less packets due to buffered output versus PHP streaming the output&nbsp;as it gets it.</li>\n	<li>On production servers, 4096 bytes is a good setting for performance&nbsp;reasons.</li>\n	<li>Note: Output buffering can also be controlled via Output Buffering Control&nbsp;functions.</li>\n</ul>\n\n<pre>\n<code class=\"language-ini\">; Possible Values:\n; On = Enabled and buffer is unlimited. (Use with caution)\n; Off = Disabled\n; Integer = Enables the buffer and sets its maximum size in bytes.\n; Note: This directive is hardcoded to Off for the CLI SAPI\n; Default Value: Off\n; Development Value: 4096\n; Production Value: 4096\n; http://php.net/output-buffering\noutput_buffering=4096</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><strong><span style=\"color:rgb(178, 34, 34)\">1. ob_start(), ob_get_level()</span></strong></p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">ob_start()</span> is used to <span style=\"color:rgb(178, 34, 34)\">launch a new level of output buffer</span>, you are free to call it as many times as you need in a row, which will <span style=\"color:rgb(178, 34, 34)\">create a hierarchy of output buffer</span>\n\n	<ul>\n	</ul>\n	</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">ob_get_level()</span> is used to return the current level of output buffer mechnism. From the very beginning of a new script, <span style=\"color:rgb(178, 34, 34)\">the first&nbsp;ob_get_level() will return 1 by default.&nbsp;Level 0 means output buffer mechnism&nbsp;is not active.&nbsp;</span></li>\n	<li>As long as the level is more than 0, <span style=\"color:rgb(178, 34, 34)\">the script output is buffered but not streaming it to browser as the output&nbsp;is generated</span>.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">If you want to start from level 0, </span>you need to turn off output buffer&nbsp;from the beginning of the script</li>\n	<li>As php.ini setting shown above, by default, the output buffering is turned on, which means all php script will have ob_start() implicitly with level 1. However, as of PHP 4.3.5, this directive is always Off in PHP-CLI. <strong><span style=\"background-color:rgb(255, 236, 0)\">So you will find level is 0 when initally run the script in terminal, while it becomes to 1 when run the same script in browsers.</span></strong></li>\n</ul>\n\n<p>For example:</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">Output buffer hierachy(in browsers)</span></p>\n\n<pre>\n<code class=\"language-php\">//Level of output buffer by default\necho ob_get_level().\"&lt;br&gt;\";//1\nob_start();\necho ob_get_level().\"&lt;br&gt;\";//2\nob_start();\necho ob_get_level().\"&lt;br&gt;\";//3\nob_start();\necho ob_get_level().\"&lt;br&gt;\";//4</code></pre>\n\n<pre>\n<code class=\"language-php\">//To start from level 0 by turning off the topmost(level 1 by default) output buffer and removing any existing buffer\nob_end_clean();\necho ob_get_level().\"&lt;br&gt;\";//0\nob_start();\necho ob_get_level().\"&lt;br&gt;\";//1\nob_start();\necho ob_get_level().\"&lt;br&gt;\";//2\nob_start();\necho ob_get_level().\"&lt;br&gt;\";//3</code></pre>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. ob_end_flush(), ob_end_clean()</strong></span></p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">ob_end_flush()</span> or&nbsp;<span style=\"color:rgb(178, 34, 34)\">ob_end_clean()</span>&nbsp;are used to <span style=\"color:rgb(178, 34, 34)\">terminate&nbsp;current level of output buffer</span> and <span style=\"color:rgb(178, 34, 34)\">flush the output buffer of current level</span> or simply <span style=\"color:rgb(178, 34, 34)\">drop the output buffer of current level </span>respectively</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">Notice that only the output buffer of level 1 will be able to be flushed back to browser</span>, if you have nested levels of output&nbsp;buffer(by using <span style=\"color:rgb(178, 34, 34)\">ob_start()</span>) you want to send back to client,<span style=\"color:rgb(178, 34, 34)\"> </span>you have to<span style=\"color:rgb(178, 34, 34)\"> use ob_end_flush() to terminate the current level and flush the output to parent level buffer and keep doing so all the way back to level 1</span></li>\n	<li>After calling <span style=\"color:rgb(178, 34, 34)\">ob_start()</span>, all output(e.g. echo, var_dump(), print()) will be buffered internally but not be output until\n	<ul>\n		<li>the <strong><span style=\"color:rgb(178, 34, 34)\">level 1 buffer flush</span></strong> functions are called, i.e.&nbsp;<span style=\"color:rgb(178, 34, 34)\">flush()</span></li>\n		<li><span style=\"color:rgb(178, 34, 34)\">the script reaches to the end</span></li>\n	</ul>\n	</li>\n</ul>\n\n<p>Make an example to show flush logic:</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">The source code</span></p>\n\n<pre>\n<code class=\"language-php\">//create two new levels of output buffer\nob_start();//level 2\nob_start();//level 3\necho \"innermost | \";\n$c1 = ob_get_contents();\nob_end_flush();//back to level 2\nsleep(1);\necho \"middle | \";\n$c2 = ob_get_contents();\nob_end_flush();//back to level 1\nsleep(1);\necho \'outermost\';\n$c3 = ob_get_contents();\nob_end_flush();//back to level 0\nob_flush();//show error, since level 0 has nothing to flush\nflush();//flush everything out\nsleep(3);\n//the following content will show in browser after 3 seconds\necho \"&lt;pre&gt;\";\nvar_dump($c1, $c2, $c3);\necho \"&lt;/pre&gt;\";</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">The results in browser</span></p>\n\n<pre>\n<code>innermost | middle | outermost\nNotice: ob_flush(): failed to flush buffer. No buffer to flush \nstring(12) \"innermost | \"\nstring(21) \"innermost | middle | \"\nstring(30) \"innermost | middle | outermost\"</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3. Difference between ob_flush() and flush()</strong></span></p>\n\n<p>Based on official definition:</p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">flush()</span>:&nbsp;Flush system output buffer</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">ob_flush()</span>:&nbsp;Flush (send) the output buffer</li>\n</ul>\n\n<p>It is quite confusing about the difference between them, currently, according to the test I made, I can conclude the difference in following terms</p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">ob_flush()</span> is a hight level flush mechnism, i.e. it flushes the output buffer <span style=\"color:rgb(178, 34, 34)\">initiated by ob_start()&nbsp;</span>to low level system output buffer&nbsp;but&nbsp;not output its content directly&nbsp;to browser as it is called. Its content will be returned to client together with other content inside system buffer&nbsp;when the low level system buffer is called.</li>\n	<li>So when low level&nbsp;system buffer will be called? To my knowledge, basically two scenarios:\n	<ul>\n		<li>the script reaches to the end</li>\n		<li><span style=\"color:rgb(178, 34, 34)\">flush()</span> is explicitly called anywhere in the script</li>\n	</ul>\n	</li>\n	<li>In a word, if you want to real-time output content flushed by ob_flush(), <span style=\"color:rgb(178, 34, 34)\">you have to call flush() right after calling ob_flush()</span>, otherwise, the content will not be sent to client until reach to the end of script or any flush() is called.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">NOTE: seems the ob_flush()+flush() stuff is&nbsp;not working in Safari(as EI CAPITAN), but works in Chrome and Firefox.</span></li>\n</ul>\n\n<p>Example code to show the difference</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">without calling flush() after ob_flush()</span></strong></p>\n\n<pre>\n<code class=\"language-php\">if (ob_get_level() == 0) ob_start();\nfor ($i = 0; $i&lt;3; $i++){\n  echo \"Line to show.&lt;br&gt;\";\n  ob_flush();\n  sleep(1);\n}\necho \"Done.&lt;br&gt;\";</code></pre>\n\n<p><img alt=\"\" src=\"../../../assets/img/no_flush.gif\" style=\"height:249px; margin-bottom:5px; width:225px\" /></p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">calling flush() right after ob_flush()</span></strong></p>\n\n<pre>\n<code class=\"language-php\">if (ob_get_level() == 0) ob_start();\nfor ($i = 0; $i&lt;3; $i++){\n  echo \"Line to show.&lt;br&gt;\";\n  ob_flush();\n  flush();\n  sleep(1);\n}\necho \"Done.&lt;br&gt;\";</code></pre>\n\n<p><img alt=\"\" src=\"../../../assets/img/flush.gif\" style=\"height:249px; margin-bottom:5px; width:225px\" /></p>','2017-04-11 09:33:06',8),(137,'API','Facebook(V2.5)','Page API','<p><span style=\"color:rgb(178, 34, 34)\"><strong>What is a Page</strong></span></p>\n\n<ul>\n	<li>This represents a <span style=\"color:rgb(0, 168, 255)\">Facebook Page</span>. The&nbsp;<code>/{page-id}</code>&nbsp;node returns a single&nbsp;<code>page</code>.</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Permissions</span></strong></p>\n\n<p>For pages that are published, you need:</p>\n\n<ul>\n	<li>An <span style=\"background-color:rgb(230, 222, 34); color:black\">app or user access token to view fields from fully public pages.</span></li>\n	<li>A <span style=\"color:rgb(0, 168, 255)\">user_access_token</span> to view fields from restricted pages that this person is able to view (such as those restrict to certain demographics like location or age, or those only viewable by Page admins).</li>\n	<li>A&nbsp;<span style=\"color:rgb(82, 187, 93)\">page<a href=\"https://developers.facebook.com/docs/facebook-login/access-tokens/#pagetokens\" style=\"margin-bottom: 5px;\"> </a>access<a href=\"https://developers.facebook.com/docs/facebook-login/access-tokens/#pagetokens\" style=\"margin-bottom: 5px;\"> </a>token</span>&nbsp;can also be used to view those restricted fields.</li>\n	<li>You need to be the admin of root page for child pages in order to read the&nbsp;<code>global_brand_children</code>&nbsp;edge for a page.</li>\n</ul>\n\n<p>If you want to read information for a page that is not yet published, you need the admin role for that page.</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>Page API</strong></span></p>\n\n<ul>\n	<li>Before your app can make calls to read, update, or post to Pages you need to get a&nbsp;<span style=\"background-color:rgb(230, 222, 34); color:black\">page access token which giving you related permission to do so<strong>.</strong></span>&nbsp;With this token you can view Page settings, make updates to page information and manage a Page.</li>\n	<li>Facebook Pages have five levels of permissions to access settings, publish content as a page, or perform operations with the Pages API.&nbsp;Your app will need to have the&nbsp;<span style=\"color:rgb(82, 187, 93)\"><code>Admin</code>&nbsp;role</span> and <span style=\"color:rgb(82, 187, 93)\">permissions</span>. This enables your app to manage Page roles and settings, post as page, get insights and execute all Page API requests.&nbsp;</li>\n	<li>As you&#39;re building your page-related app, <span style=\"background-color:rgb(230, 222, 34); color:black\">you need the&nbsp;<code>Admin</code>&nbsp;permissions for a Page, contact a current&nbsp;<code>Admin</code>&nbsp;of that page</span><strong><span style=\"background-color:rgb(230, 222, 34); color:black\"> </span></strong>and they can add you.</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Page Insights</span></strong></p>\n\n<p>It will give you a set of metrics of a Page, however most of the metrics are private. One example is the total number of impressions made by people who saw content associated with your Page.</p>\n\n<ul>\n	<li>&#39;<span style=\"color:rgb(0, 168, 255)\">Read Insights</span>&#39; is the default right assigned to all members of Page Roles, i.e. every account playing a Role for a Page can by default have this right to access the private metrics of this Page.</li>\n	<li><span style=\"color:rgb(82, 187, 93)\">However</span>&nbsp;in order to let your app access the private metrics of a Page via Graph API on behalf of the account playing a Role in the Page,&nbsp;your app must be granted the account&#39;s&nbsp;<span style=\"color:rgb(0, 168, 255)\">user_access_token</span> including&nbsp;the &quot;<span style=\"color:rgb(0, 168, 255)\">read_insights</span>&quot;&nbsp;permission.&nbsp;Then&nbsp;your app can retrieve metrics for all pages owned by this account.</li>\n	<li>Alternatively, after getting the <span style=\"color:rgb(82, 187, 93)\">user_access_token</span> which includes &quot;<span style=\"color:rgb(82, 187, 93)\">read_insights</span>&quot; permission, your app can fetch the <span style=\"color:rgb(82, 187, 93)\">page_access_token</span> derived from the <span style=\"color:rgb(82, 187, 93)\">user_access_token</span> to read private insights as well since the <span style=\"color:rgb(82, 187, 93)\">read_insights</span> permission is transferred to <span style=\"color:rgb(82, 187, 93)\">page_access_token</span> as well.&nbsp;</li>\n	<li><span style=\"color:rgb(0, 168, 255)\">Page Access Token</span>&nbsp;deriving&nbsp;from <span style=\"color:rgb(0, 168, 255)\">User Acccess Token</span> which&nbsp;<span style=\"background-color:rgb(230, 222, 34); color:black\">does not embed&nbsp;&#39;read_insights&#39; permission won&#39;t be able to read private metrics.</span></li>\n	<li>Insights are only generated for a Facebook Page that <span style=\"background-color:rgb(230, 222, 34); color:black\">has more than 30 people that like it.</span></li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Steps to get Page Access Token</span></strong></p>\n\n<ul>\n	<li><span style=\"color:rgb(0, 168, 255)\">Prerequisite</span>: You must have property <span style=\"background-color:#e6de22; color:black\">User Access Token</span> first, and then generate related Page Access Token via <span style=\"background-color:#e6de22; color:black\">Graph API</span>.</li>\n	<li>According to the permission level your app&nbsp;need in order to interact with a Page on behalf of an user, the user must play a Page role having the permission level, e.g. the user must be an ADMIN of a Page if he wants to do anything possible against the&nbsp;Page via your app. <span style=\"background-color:rgb(230, 222, 34); color:black\">Your app won&#39;t be able to get a Page Access Token if the user does not play&nbsp;a Page Role.</span></li>\n	<li>After the user is assigned a proper role by a Page Admin, then your app need to be granted the&nbsp;<span style=\"color:rgb(0, 168, 255)\">user_access_token</span> including Page related permissions, e.g. <span style=\"color:rgb(178, 34, 34)\">&quot;<span style=\"color:rgb(0, 168, 255)\">manage_pages</span>&quot;</span> or <span style=\"color:rgb(178, 34, 34)\">&quot;<span style=\"color:rgb(82, 187, 93)\">pages_show_list</span>&quot;</span>&nbsp;to allow your app to generate&nbsp;<span style=\"color:rgb(178, 34, 34)\"><span style=\"color:rgb(82, 187, 93)\">page_access_token</span>;</span>&nbsp;&quot;<span style=\"color:rgb(0, 168, 255)\">read_insights</span>&quot; to allow your <span style=\"color:rgb(82, 187, 93)\">user_access_token</span> and <span style=\"color:rgb(0, 168, 255)\">page_access_token</span> deriving from the <span style=\"color:rgb(0, 168, 255)\">user_access_token</span> to read private metrics of a Page;&nbsp;&#39;<span style=\"color:rgb(0, 168, 255)\">publish_pages</span>&#39; together with &quot;<span style=\"color:rgb(82, 187, 93)\">manage_pages</span>&quot; to allow your app to post or message on behalf of this&nbsp;Page via <span style=\"color:rgb(82, 187, 93)\">page_access_token</span> deriving from the <span style=\"color:rgb(82, 187, 93)\">user_access_token</span>.</li>\n	<li>After you have the correct <span style=\"color:rgb(0, 168, 255)\">user_access_token</span>(<span style=\"background-color:rgb(230, 222, 34); color:black\">at least embed &quot;manage_pages&quot; or &quot;pages_show_list&quot;&nbsp;permissions</span>), you can get the <span style=\"color:rgb(82, 187, 93)\">page_access_token</span> by calling Graph API: <span style=\"color:rgb(0, 168, 255)\">/me/accounts</span> which will return data of&nbsp;all Pages managed by your account.&nbsp;The data includes &quot;access_token&quot;(the page_access_token of yours), &quot;category&quot;, &quot;name&quot;, &quot;id&quot;, and &quot;perms&quot;(your Role) of this Page</li>\n	<li>Page Access tokens have expirations; your app can continue to <span style=\"background-color:rgb(230, 222, 34); color:black\">use a Page Access token for an hour after you originally get it</span></li>\n</ul>','2016-01-10 11:57:21',2),(138,'PHP','Error Handler','Try-catch-finally','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. Basics</strong></span></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">try/catch</span> blocks are mainly used to detect and catch exception messages generated by <span style=\"color:rgb(178, 34, 34)\">Exception class</span> in PHP.&nbsp;</p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">try</span> block is used to wrap the snippets which&nbsp;possibly throw&nbsp;php built-in or custom&nbsp;exceptions</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">catch()</span> block is used to catch the exception thrown by&nbsp;<span style=\"color:rgb(178, 34, 34)\">try</span> block <span style=\"color:rgb(178, 34, 34)\">as the argument of itself</span>&nbsp;and run related code against the exception</li>\n	<li>the snippets inside try block will <span style=\"color:rgb(178, 34, 34)\">stop running as long as any exception is thrown</span></li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">For example</span></p>\n\n<pre>\n<code class=\"language-php\">function guessMyName($name) {\n  try {\n	if ($name !== &quot;Kan&quot;){\n	  throw new Exception(&quot;You did not guess right!&quot;);\n	}\n	  echo &quot;Welcome back, Kan!&lt;br&gt;&quot;;\n  }catch (Exception $e) {\n   	echo &#39;Caught exception: &#39;,  $e-&gt;getMessage(), &quot;&lt;br&gt;&quot;;\n  }\n}\nguessMyName(&#39;Kobe&#39;);\n//Caught exception: You did not guess right!\nguessMyName(&#39;Kan&#39;);\n//Welcome back, Kan!</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. Usage of &#39;finally&#39; block&nbsp;</strong></span></p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">finally</span> block can be used after <span style=\"color:rgb(178, 34, 34)\">try/catch</span> blocks or even replace <span style=\"color:rgb(178, 34, 34)\">catch</span> block</li>\n	<li>if no <span style=\"color:rgb(178, 34, 34)\">catch</span> block is claimed, then the exception thrown by <span style=\"color:rgb(178, 34, 34)\">try</span> block will be output after the execuation of <span style=\"color:rgb(178, 34, 34)\">finally</span> block itself, and the code after<span style=\"color:rgb(178, 34, 34)\"> try/finally</span> blocks will not be executed as well</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">Example with catch block</span></p>\n\n<pre>\n<code class=\"language-php\">function guessMyName($name) {\n	try{\n		if ($name !== &quot;Kan&quot;){\n			throw new Exception(&quot;You did not guess right!&lt;br&gt;&quot;);\n		}\n		echo &quot;Congratulations, welcome back, Kan!&lt;br&gt;&quot;; 	\n	}\n	catch(Exception $e){\n		echo &quot;Catched Exception: &quot;.$e-&gt;getMessage(); \n	}\n	finally{\n		echo &quot;Finally!&lt;br&gt;&quot;;\n	}\n}\nguessMyName(&#39;Kobe&#39;);\nguessMyName(&#39;Kan&#39;);</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">You will get:</span></p>\n\n<div style=\"margin-bottom: 5px; background-color: lightblue;\">\n<p>Catched Exception: You did not guess right!<br />\nFinally!<br />\nCongratulations, welcome back, Kan!<br />\nFinally!</p>\n</div>\n\n<p><span style=\"color:rgb(178, 34, 34)\">Example without catch block:</span></p>\n\n<pre>\n<code class=\"language-php\">function guessMyName($name) {\n	try{\n		if ($name !== &quot;Kan&quot;){\n			throw new Exception(&quot;You did not guess right!&lt;br&gt;&quot;);\n		}\n		echo &quot;Congratulations, welcome back, Kan!&lt;br&gt;&quot;; 	\n	}\n	finally{\n		echo &quot;Finally!&lt;br&gt;&quot;;\n	}\n}\nguessMyName(&#39;Kobe&#39;);\nguessMyName(&#39;Kan&#39;);</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">You will get:</span></p>\n\n<div style=\"margin-bottom: 5px; background-color: lightblue;\">\n<p>Finally!<br />\n<strong>Exception:&nbsp;</strong>You did not guess right!</p>\n</div>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. Extending class Exception</span></strong></p>\n\n<p>Since <span style=\"color:rgb(178, 34, 34)\">catch() </span>can be called multiple times to deal with <span style=\"color:rgb(178, 34, 34)\">different classes of Exception</span>&nbsp;after the same <span style=\"color:rgb(178, 34, 34)\">try</span> block, therefore it is very handy to extend Exception class to have custom Exception classes for different type of errors you want to detect and throw.</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">For example:</span></p>\n\n<pre>\n<code class=\"language-php\">class NotMultipleOfThree extends Exception{}\nclass NotMultipleOfTwo extends Exception{}\nfunction isMultipleOfThreeAndFive($number) {\n  if ($number % 3 !== 0){\n	throw new NotMultipleOfThree(&quot;$number is not multiple of 3!&lt;br&gt;&quot;);\n  }elseif ($number % 2 !== 0){\n	throw new NotMultipleOfTwo(&quot;$number is not multiple of 2!&lt;br&gt;&quot;);\n  }else{\n    return $number;\n  }\n}\nfunction factorial($number){\n	if($number &gt; 1){\n	  return $number * factorial($number-1);\n	}else{\n	  return $number;\n	}\n}\ntry{\n	$n = isMultipleOfThreeAndFive(6);\n	$f1 = factorial($n);\n	$m = isMultipleOfThreeAndFive(9);\n	$f2 = factorial($m);\n\n}\ncatch(NotMultipleOfThree $e){\n  echo &quot;Catched Exception: &quot;.$e-&gt;getMessage();\n}\ncatch(NotMultipleOfTwo $e){\n  echo &quot;Catched Exception: &quot;.$e-&gt;getMessage();\n}\necho $f1.&quot;&lt;br&gt;&quot;;\necho $f2.&quot;&lt;br&gt;&quot;;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">You will get:</span></p>\n\n<div style=\"margin-bottom: 5px; background-color: lightblue;\">\n<p>Catched Exception: 9 is not multiple of 2!<br />\n720<br />\n<strong>E_NOTICE :&nbsp;</strong>type 8 -- Undefined variable: f2 -- at line 34</p>\n</div>\n\n<p>&nbsp;</p>','2016-04-23 13:25:29',10),(139,'PHP','Error Handler','Error & Exception','<p>Why PHP has <strong><span style=\"color:rgb(178, 34, 34)\">Error</span></strong> and <strong><span style=\"color:rgb(178, 34, 34)\">Exception</span></strong> at the same time?</p>\n\n<ul>\n	<li>Pure object-oriented languages produces mainly exceptions to signal an error</li>\n	<li>PHP started out as procedural and so it has wide range of errors along with exceptions</li>\n</ul>\n\n<hr />\n<p>What is the difference between <span style=\"color:rgb(178, 34, 34)\"><strong>Error</strong></span> and <span style=\"color:rgb(178, 34, 34)\"><strong>Exception</strong></span> in PHP?</p>\n\n<p>1. Feature of <span style=\"color:rgb(178, 34, 34)\">Exception</span></p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">Exceptions</span>&nbsp;are <span style=\"color:rgb(178, 34, 34)\">objects</span> which can be managed and caught with <span style=\"color:rgb(178, 34, 34)\">try/catch</span> blocks.</li>\n	<li>You can create your own exception classes, with custom arguments and methods.</li>\n	<li>They&#39;re really objects with special additional functionalities and you should definitely manage your error with them in PHP 5 and higher.</li>\n	<li>Exceptions always <span style=\"color:rgb(178, 34, 34)\">bubble up until they are caught</span></li>\n</ul>\n\n<p>2. Feature of <span style=\"color:rgb(178, 34, 34)\">Error</span></p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">Errors</span>&nbsp;are accompanied by a message like exceptions, but they are managed by calling an <span style=\"color:rgb(178, 34, 34)\">error handler function</span> (which may be custom) from the point when they occur.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">PHP and its native functions generate mostly errors and not exceptions</span>.&nbsp;</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">PDO(PHP Data Objects)</span> and the <span style=\"color:rgb(178, 34, 34)\">SPL(Standard PHP&nbsp;Library)</span>&nbsp;are the exceptions&nbsp;(what a pun) since they have an object-oriented Api which comprehends also exception classes.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">Errors</span> are passed to the current error handler, whose job is to decide what to do with them. With non-severe errors, printing them in bold and go on with execution is the default behavior.</li>\n</ul>\n\n<hr />\n<p>Some most used <span style=\"color:rgb(178, 34, 34)\">Error types</span></p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\"><strong>E_NOTICE</strong></span>: a non critical error, like accessing an initialized variable. PHP is very forgiving and will allow the script to continue in production environments.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\"><strong>E_WARNING</strong></span>: a more serious error, like passing a non-Traversable to foreach(), or including a missing file.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\"><strong>E_PARSE</strong></span>: a syntax error, like a missing&nbsp;<em>}</em>&nbsp;or using a reserved keyword for naming a class. The script won&#39;t run at all as these errors are raised at compile (to pcodes) time.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\"><strong>E_ERROR</strong></span>: also known as Fatal Errors, they are unrecoverable even by the error handler. Calling a method on null, or calling an undefined function, or creating an object of a non-existing class would result in a Fatal Error, which will terminate the script abruptly (even if it is a test suite!)</li>\n	<li><span style=\"color:rgb(178, 34, 34)\"><strong>E_STRICT</strong></span>: infringement of strict standards, which from PHP 5.3 it is in the default. If you call a non-static method statically (by Class::method()), you will get this error. Enabling strict standard can help you improve your code quality.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\"><strong>E_RECOVERABLE_ERROR</strong></span>: a catchable version of Fatal Error, such as trying to convert an object without __toString() into a string. It can be managed by error handlers, while Fatal Errors and of course Parse Errors can&#39;t (they leave the interpreter in an unstable state and cause an immediate exit()).</li>\n</ul>\n\n<hr />\n<p>Error related <span style=\"color:rgb(178, 34, 34)\">PHP functions</span></p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">error_reporting()</span> allows you to set which errors to report and override the error_reporting in php.ini, again by using E_ALL and other constants. Note that some errors, like E_PARSE, are detected at compile time and so won&#39;t be influenced by this function.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">set_error_handler() </span>allows you to define your own function to manage errors, which can then delegate to PHP default handler or completely override it.</li>\n</ul>','2016-04-23 13:24:35',3),(140,'API','Facebook(V2.5)','User & APP Access Token','<p><span style=\"color:#B22222\"><strong>User Access Token</strong></span></p>\n\n<ul>\n	<li><span style=\"color:rgb(0, 0, 0)\">As its name implies, this is the access token used to interact with Facebook on behalf of a <span style=\"color:rgb(82, 187, 93)\">Facebook user profile</span>(not a <span style=\"color:rgb(0, 168, 255)\">Facebook Page</span> which you need <span style=\"color:rgb(82, 187, 93)\">Page Access Token </span>to interact)</span></li>\n	<li>User access tokens are&nbsp;generally obtained via a <span style=\"background-color:rgb(230, 222, 34); color:black\">login dialog and require a person to permit your app to obtain one</span>.</li>\n	<li>Short-lived tokens usually have a lifetime of about <span style=\"color:rgb(0, 168, 255)\">an hour or two,</span> while long-lived tokens usually have a lifetime of about <span style=\"color:rgb(82, 187, 93)\">60 days</span>.</li>\n	<li>Access tokens generated via<span style=\"color:rgb(0, 168, 255)\"> web login </span>are <span style=\"color:rgb(82, 187, 93)\">short-lived</span> tokens, but you can&nbsp;convert them to <span style=\"color:rgb(82, 187, 93)\">long-lived </span>tokens&nbsp;by making a server-side API call <span style=\"color:rgb(0, 168, 255)\">along with your app secret</span>.</li>\n	<li>Mobile apps that use Facebook&#39;s iOS and Android SDKs <span style=\"background-color:rgb(230, 222, 34); color:black\">get long-lived tokens by default</span></li>\n</ul>\n\n<p><span style=\"color:#B22222\"><strong>App Access Token</strong></span></p>\n\n<ul>\n	<li>It is used to make requests to Facebook APIs <span style=\"background-color:rgb(230, 222, 34); color:black\">on behalf of an app</span> rather than a user.</li>\n	<li>This can be used to modify the parameters of your app, create and manage test users, or <span style=\"color:rgb(0, 168, 255)\">read your apps&#39;s insights</span>.</li>\n	<li>Some user data that would normally be visible to an app that&#39;s making a request with an user access token <span style=\"background-color:rgb(230, 222, 34); color:black\">isn&#39;t always visible with an app access token</span>. If you&#39;re reading user data and using it in your app, <span style=\"background-color:rgb(230, 222, 34); color:black\">you should use a user access token</span> instead of an app access token.</li>\n</ul>','2017-01-21 14:15:49',1),(141,'API','Facebook(V2.5)','Graph API','<p style=\"color:rgb(178, 34, 34)\"><strong>What is Graph?</strong></p>\n\n<ul>\n	<li>By definition, Graph actually means a set of nodes(points, objects) and the connections between each of them</li>\n</ul>\n\n<hr />\n<p>Graph API</p>\n\n<p>/me/friends?field=name,id,link,email</p>\n\n<p>/me/permissions</p>\n\n<p>/?ids= 8245623462, 4</p>\n\n<p>&nbsp;</p>','2016-01-10 12:14:49',2),(142,'PHP','Misc','Composer','<p><strong><span style=\"color:rgb(178, 34, 34)\">What is Composer</span></strong></p>\n\n<ul>\n	<li>Composer - <span style=\"background-color:rgb(230, 222, 34); color:black\">Package Management for PHP</span></li>\n	<li>Composer is a dependency manager tracking local dependencies of your projects and libraries.</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>&nbsp;Getting Started</strong></span></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. Installation</span></p>\n\n<p>Use the following <span style=\"color:rgb(0, 168, 255)\">curl command</span> to install, quite easy:</p>\n\n<pre>\n<code class=\"language-bash\">curl -sS https://getcomposer.org/installer | php</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. Some useful options</span></p>\n\n<pre>\n<code class=\"language-bash\"># check version\ncomposer -V\n# list all options\ncomposer list\n# self update composer\ncomposer selfupdate</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3. Install dependencies for your project via Composer&nbsp;</span></p>\n\n<ul>\n	<li>First, you need to create a file named &quot;<span style=\"color:rgb(82, 187, 93)\">composer.json</span>&quot; at the root of your project</li>\n	<li>Then add the dependencies name and version into the file, make Facebook PHP SDK as an example below:</li>\n</ul>\n\n<pre>\n<code class=\"language-json\">{\n  &quot;require&quot; : {\n    &quot;facebook/php-sdk-v4&quot; : &quot;~5.0&quot;\n  }\n}</code></pre>\n\n<ul>\n	<li>After that, just run following command to let composer download the dependencies into your project folder</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">composer install</code></pre>\n\n<ul>\n	<li>Finally, add one line to require the autoloader of Composer on top of&nbsp;the PHP file which needs these&nbsp;dependencies, for example</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">require_once __DIR__ . &#39;/vendor/autoload.php&#39;;</code></pre>','2016-01-10 18:56:38',6),(143,'API','Facebook(V2.5)','PHP SDK','<p>SDK is actually a library providing classes to easily call Facebook Graph API via your Web&nbsp;App</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Install SDK via Composer</span></strong></p>\n\n<ul>\n	<li>first create <span style=\"color:rgb(0, 168, 255)\">composer.json</span> in the <span style=\"color:rgb(82, 187, 93)\">root of project folder</span>&nbsp;to set the SDK version we want to download, e.g.</li>\n</ul>\n\n<pre>\n<code class=\"language-json\">{\n  \"require\" : {\n    \"facebook/php-sdk-v4\" : \"~5.0\"\n  }\n}</code></pre>\n\n<ul>\n	<li>install the SDK via Composer</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">composer install</code></pre>\n\n<ul>\n	<li>Finally, include Composer <span style=\"color:rgb(0, 168, 255)\">autoloader</span> into the file which needs to use SDK</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">require_once __DIR__ . \'/vendor/autoload.php\';</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. Get the User Access Token</strong></span></p>\n\n<ul>\n	<li>First we need to provide a link for user to <span style=\"color:rgb(0, 168, 255)\">login Facebook</span> and&nbsp;<span style=\"background-color:rgb(230, 222, 34); color:black\">grant your app the related permissions</span>&nbsp;</li>\n	<li>After the permissions are successfully granted, Facebook will generate a &quot;<span style=\"background-color:rgb(230, 222, 34); color:black\">Code&quot; having user access token encrypted and embedded</span>, and then&nbsp;transfer this Code&nbsp;to a <span style=\"color:rgb(82, 187, 93)\">callback url</span>&nbsp;(defined by yourself) used to decrypt the Code and give you the <span style=\"color:rgb(0, 168, 255)\">real user access token</span></li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">Login Part:</span></p>\n\n<pre>\n<code class=\"language-php\">require_once __DIR__ . \'/vendor/autoload.php\';\nsession_start();\n$fb = new FacebookFacebook([\n  \'app_id\' =&gt; \'1652626845018506\',\n  \'app_secret\' =&gt; \'0992df93f8eb7110883c868ecd91835a\',\n  \'default_graph_version\' =&gt; \'v2.5\',\n]);\n$helper = $fb-&gt;getRedirectLoginHelper();\n  $permissions = [\'user_friends\', \"user_photos\", \'user_likes\', \'email\', \'manage_pages\', \'read_insights\']; // optional\n  $loginUrl = $helper-&gt;getLoginUrl(\'http://desktop.io/facebook_api/login-callback.php\', $permissions);\necho \'&lt;a href=\"\' . $loginUrl . \'\"&gt;Log in with Facebook!&lt;/a&gt;\';</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">Call Back Part:</span></p>\n\n<pre>\n<code class=\"language-php\">require_once __DIR__ . \'/vendor/autoload.php\';\nsession_start();\n$fb = new FacebookFacebook([\n  \'app_id\' =&gt; \'1652626845018506\',\n  \'app_secret\' =&gt; \'0992df93f8eb7110883c868ecd91835a\',\n  \'default_graph_version\' =&gt; \'v2.5\',\n]);\n$helper = $fb-&gt;getRedirectLoginHelper();\ntry {\n  $userAccessToken = $helper-&gt;getAccessToken();\n} catch(FacebookExceptionsFacebookResponseException $e) {\n  // When Graph returns an error\n  echo \'Graph returned an error: \' . $e-&gt;getMessage();\n  exit;\n} catch(FacebookExceptionsFacebookSDKException $e) {\n  // When validation fails or other local issues\n  echo \'Facebook SDK returned an error: \' . $e-&gt;getMessage();\n  exit;\n}\n// Logged in!\nif (isset($userAccessToken)) {\n  $_SESSION[\'user_access_token\'] = (string)$userAccessToken;\n  //redirect to the page where you want to use the access token\n  $redirect_url = \"index.php\";\n  header(\"location: \" . $redirect_url);\n}</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. Call Graph API</span></strong></p>\n\n<ul>\n	<li>After you successfully got valid user access token, then it is ready to call Graph API</li>\n	<li>Note that for unreviewed App, by default, it is only possible to be granted three basic permissions:&nbsp;<span style=\"color:rgb(82, 187, 93)\">public_profile</span>,&nbsp;<span style=\"color:rgb(82, 187, 93)\">user_friends</span>&nbsp;and&nbsp;<span style=\"color:rgb(82, 187, 93)\">email</span>.</li>\n	<li>However if the user is the <span style=\"background-color:rgb(230, 222, 34); color:black\">Admin, Developer or Tester</span> defined in App Dashboard, then the permission limitation is removed, i.e. your app can be granted all permissions by this user without reviewed by Facebook</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-php\">require_once __DIR__ . \'/vendor/autoload.php\';\nsession_start();\n$fb = new FacebookFacebook([\n  \'app_id\' =&gt; \'1652626845018506\',\n  \'app_secret\' =&gt; \'0992df93f8eb7110883c868ecd91835a\',\n  \'default_graph_version\' =&gt; \'v2.5\',\n]);\nif (!empty($_SESSION[\'user_access_token\'])) {\n  // Sets the default fallback access token so we don\'t have to pass it to each request\n  $fb-&gt;setDefaultAccessToken($_SESSION[\'user_access_token\']);\n  try {\n    $response = $fb-&gt;get(\'/me/accounts\');\n    $results = $response-&gt;getDecodedBody();\n  } catch(FacebookExceptionsFacebookResponseException $e) {\n  // When Graph returns an error\n    echo \'Graph returned an error: \' . $e-&gt;getMessage();\n    exit;\n  } catch(FacebookExceptionsFacebookSDKException $e) {\n  // When validation fails or other local issues\n    echo \'Facebook SDK returned an error: \' . $e-&gt;getMessage();\n    exit;\n  }\n  //save info of all Pages managed by this user\n  $my_accounts = [];\n  foreach ($results[\'data\'] as $page) {\n    $my_accounts[$page[\'name\']][\'id\'] = $page[\'id\'];\n    $my_accounts[$page[\'name\']][\'page_access_token\'] = $page[\'access_token\'];\n  }\n  var_dump($my_accounts);\n}</code></pre>','2017-01-21 14:15:31',1),(144,'Statsit','Statsit.com','WP Admin','<pre>\n<code class=\"language-bash\">ssh ec2-user@54.208.142.59\n</code></pre>\n\n<pre>\n<code>Username: user \nPasswd: stagr888!</code></pre>','2016-01-11 17:32:44',1),(145,'PHP','Flow Control','If Condition','<p>The following three statements are equivalent:</p>\n\n<pre>\n<code class=\"language-php\">$a = 23;\n//explicit if statement\nif($a){\n  $b = 23;\n}else{\n   $b = 10;\n}\n//simplified\n$b = $a ? $a : 10;\n//simplified even more\n$b = $a ?: 10;\n\necho $b;\n//23</code></pre>','2016-01-12 11:55:04',0),(146,'PHP','Language Construct','List','<p><span style=\"color:rgb(178, 34, 34)\">list()</span> ​</p>\n\n<ul>\n	<li>is used to assign multiple varibales in a batch by using elements of an array</li>\n	<li>Note that, the referenced array itself must be numeric indexed, otherwise error will raise.&nbsp;</li>\n	<li>Each element&#39;s value could be anything, e.g. assosiative array</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-php\">$a = array(array(\"hi\"=&gt;\"world\"), array(\"hi\"=&gt;\"world\"), array(\"hi\"=&gt;\"world\"));\nlist($b, $c, $d) = $a;\nvar_dump($b);\n//array(1) { [\"hi\"]=&gt; string(5) \"world\" } \nvar_dump($c);\n//array(1) { [\"hi\"]=&gt; string(5) \"world\" }\nvar_dump($d);\n//array(1) { [\"hi\"]=&gt; string(5) \"world\" }</code></pre>\n\n<p>Use <span style=\"color:#52bb5d\">explode() </span>to assign:</p>\n\n<pre>\n<code class=\"language-php\">$s = \"I love you\";\nlist($a, $b, $c) = explode(\' \', $s);\necho $a .\"&lt;br&gt;\";//I\necho $b .\"&lt;br&gt;\";//love\necho $c .\"&lt;br&gt;\";//you</code></pre>\n\n<p>&nbsp;</p>','2016-01-12 20:39:13',0),(147,'MVC Framework','CodeIgniter','Tips','<p><strong><span style=\"color:rgb(178, 34, 34)\">Version of CodeIgniter you are using:</span></strong></p>\n\n<ul>\n	<li>the version number is shown in<span style=\"color:rgb(82, 187, 93)\"> /core/CodeIgniter.php</span></li>\n	<li>alternatively, the version number is defined in constant <span style=\"color:rgb(0, 168, 255)\">CI_VERSION</span>, so you can check it in your CI project as well</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">echo CI_VERSION;</code></pre>','2016-01-15 11:18:34',0),(148,'MVC Framework','CodeIgniter','How MVC Works','<p><strong><span style=\"color:rgb(178, 34, 34)\">Model-View-Controller</span></strong> framework of <span style=\"color:rgb(0, 168, 255)\">CodeIgniter</span></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. Model</span>:</p>\n\n<ul>\n	<li>this is a <span style=\"color:rgb(82, 187, 93)\">Class</span> file contains properties and methods used to deal with&nbsp;data related tasks requested by <span style=\"color:rgb(0, 168, 255)\">Controller</span>,&nbsp;e.g. fetch data from database and generate the data&nbsp;ready to send back to clients, or create new data based on input from client, and so on.</li>\n	<li>usually there is one <span style=\"color:rgb(82, 187, 93)\">Model</span> file used by one component of your web app.</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. View</span>:</p>\n\n<ul>\n	<li>this is the real HTML page return to client.</li>\n	<li>It usually contains <span style=\"color:rgb(0, 168, 255)\">html code</span> and <span style=\"color:rgb(82, 187, 93)\">php code</span>. The former one decides the <span style=\"color:rgb(0, 168, 255)\">static</span> html structure and styling of the view page, while the latter one is used to generate <span style=\"color:rgb(82, 187, 93)\">dynamic</span> content for this view page</li>\n	<li>the source of the dynamic content of view page is delivered by&nbsp;<span style=\"color:rgb(0, 168, 255)\">Controller</span></li>\n	<li>usually there are as many <span style=\"color:rgb(0, 168, 255)\">View</span> files as needed for one component of your web app</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3. Controller</span>:</p>\n\n<ul>\n	<li>this is a <span style=\"color:rgb(0, 168, 255)\">Class</span> file works like an adapter between <span style=\"color:rgb(0, 168, 255)\">Model</span> and <span style=\"color:rgb(82, 187, 93)\">View</span>.</li>\n	<li>this is also the <span style=\"color:rgb(0, 168, 255)\">interface</span> which client will interact directly:\n	<ul>\n		<li><span style=\"color:rgb(0, 168, 255)\">Controller</span> receives requests from client, each request is actually a Class method.&nbsp;</li>\n		<li>Each&nbsp;<span style=\"color:rgb(82, 187, 93)\">Controller</span>&nbsp;method will call related methods of <span style=\"color:rgb(82, 187, 93)\">Model</span> to work on the specific functional work to execute client&#39;s request</li>\n		<li>Then <span style=\"color:rgb(0, 168, 255)\">Controller</span> fetches the results and organizes it properly, and send it to related <span style=\"color:rgb(82, 187, 93)\">View</span> page to generate the dynamic part</li>\n		<li>Finally <span style=\"color:rgb(0, 168, 255)\">Controller</span> sends the complete <span style=\"color:rgb(82, 187, 93)\">View</span> page back to client</li>\n	</ul>\n	</li>\n	<li>usually there is one <span style=\"color:rgb(0, 168, 255)\">Controller</span>&nbsp;file for one component of your web app</li>\n</ul>\n\n<p>For example the client request: <span style=\"background-color:rgb(230, 222, 34); color:black\">http://domain/content/index</span></p>\n\n<pre>\n<code class=\"language-php\">//Controller\nclass Content extends CI_Controller{\n\n  public function __contruct(){\n    parent::_construct();\n    $this-&gt;load-&gt;model(&#39;my_model&#39;);\n  }\n\n  public function index(){\n    $content = $this-&gt;my_model-&gt;getData();\n    $data[&#39;title&#39;] = $content[0];\n    $data[&#39;body&#39;] = $content[1];\n    $this-&gt;load-&gt;view(&#39;index&#39;, $data);\n  }\n\n}\n//Model\nclass My_model extends CI_Model{\n  \n  public function __contruct(){\n    parent::_construct();\n    $this-&gt;load-&gt;library(&#39;session&#39;);\n  }\n\n  public function getData(){\n    return $content = array(&#39;MVC Example&#39;, &#39;&lt;h2&gt;Welcome to MVC World!&lt;/h2&gt;&#39;);   \n  }\n}\n\n//View\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;&lt;?php echo $title ?&gt;&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;?php echo $body ?&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>','2016-01-15 11:32:33',0),(149,'MVC Framework','CodeIgniter','Dynamic Property','<p>It is quite interesting that you will face such codes in CodeIgniter</p>\n\n<pre>\n<code class=\"language-php\">public __construct(){\n $this-&gt;load-&gt;library(\"session\");\n $this-&gt;session-&gt;doSmth();\n}</code></pre>\n\n<p>I am wondering how it can <span style=\"background-color:rgb(230, 222, 34); color:black\">dynamiclly create and&nbsp;name a new&nbsp;property</span> which is initiated as a new object after loading an arbitrary class, after diving in a bit, I guess the answer should be related to <span style=\"color:rgb(178, 34, 34)\">Dynamic Property</span> and <span style=\"color:rgb(178, 34, 34)\">Variable Variables</span></p>\n\n<p><a href=\"http://php.net/manual/en/language.variables.variable.php\"><strong><span style=\"color:rgb(178, 34, 34)\">1. Variable Variables</span></strong></a></p>\n\n<ul>\n	<li>this is a solution to create a new varible whose name is based on the dynamic string but not predefined.</li>\n</ul>\n\n<p>For example</p>\n\n<pre>\n<code class=\"language-php\">$a = \"hello\";\n$$a = \" world!\";\necho $a.$hello;\n//hello world!</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Dynamic Property</span></strong></p>\n\n<p>OK, after understanding concept of <span style=\"color:rgb(0, 168, 255)\">Variable Variables</span>, we can try to figure out how to implement <span style=\"color:rgb(82, 187, 93)\">Dynamic Property</span> in a Class object in two ways</p>\n\n<ul>\n	<li>Directly create new property via object</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">class A {}\n$a = new A();\n$a-&gt;hello = \"hello\";\necho $a-&gt;hello;\n</code></pre>\n\n<ul>\n	<li>Create new property via object methods</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">class B{\n  public function newProperty(){\n    $this-&gt;hello = \"hello\"; \n  }\n}\n$b = new B();\n$b-&gt;newProperty();\necho $b-&gt;hello;\n</code></pre>\n\n<p>So let us do <span style=\"color:rgb(82, 187, 93)\">Dynamic Property</span> based on what we have learned so far:</p>\n\n<pre>\n<code class=\"language-php\">class Test{\n  public $a;\n  public function getLibrary($a){\n    $b = ucfirst($a);\n	if(property_exists(\'Test\', $a)){\n	  echo \"Property $a already exists!&lt;br&gt;\";\n	}else{\n	  $this-&gt;$a = new $b();\n	}\n  }\n}\nclass Hello{  \n  public function sayHi(){\n	echo \"Hello Dynamic Property!\";\n  }\n}\n$c = \'world\';\n$w = new Test;\n$w-&gt;$c = \"world\";\necho $w-&gt;world.\"&lt;br&gt;\";\n//world\n$w-&gt;getLibrary(\'hello\');\n$w-&gt;hello-&gt;sayHi();\n//Hello Dynamic Property!</code></pre>','2016-10-20 21:00:08',3),(150,'JavaScript','Snippets','Get Specific Length Of Number After Point','<p>This is tiny snippets I figured out, use JS as language to make an example</p>\n\n<pre>\n<code class=\"language-javascript\">var rawDataPercent = 10.56789423;\n//e.g. we need 1 digit after floating\nvar dataValue = (Math.ceil(rawDataPercent*10))/10;\n//10.6\n//or two digits\nvar dataValue = (Math.floor(rawDataPercent*100))/100;\n//10.56</code></pre>\n\n<p>&nbsp;</p>','2016-01-30 10:39:03',1),(151,'Git','Repo Initialization','.gitignore Fix','<p><span style=\"color:rgb(178, 34, 34)\"><strong>.gitignore does not work?</strong></span></p>\n\n<p>If you decide to put some content already tracked in your repository into <span style=\"color:rgb(0, 168, 255)\">.gitignore</span> in order to not track it anymore, simply add the path of the content into <span style=\"color:rgb(82, 187, 93)\">.gitignore</span> won&#39;t work:</p>\n\n<ul>\n	<li>you have to first remove all your repository content out of git</li>\n	<li>then add and commit them back again to git to make <span style=\"color:rgb(0, 168, 255)\">.gitignore</span> work</li>\n	<li><span style=\"background-color:rgb(230, 222, 34); color:black\">do remember to commit everything before doing the fix</span>, since if not, all your untracked changes will be emptyed</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">git rm -r --cached .\ngit add .\ngit commit -m &quot;fixed untracked files&quot;</code></pre>\n\n<p>&nbsp;</p>','2016-01-28 12:01:23',0),(152,'JQuery','Objects','Object Clone & Reference','<p><strong><span style=\"color:#B22222\">Difference between Object Clone and Object Reference</span></strong></p>\n\n<ul>\n	<li>In Javascript, using equator &quot;=&quot; to assign a variable an object actually make the variable a reference of the object, i.e. if modifying the reference, the original object will be modified as well.</li>\n	<li>If you want to use and modify the data of the object but without changing the object itself, you should clone the object first</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">var obj = { a: 1 };\nvar ref = obj;\nvar clone = $.extend(true, {}, obj);\nclone.b = \'clone but not reference\';\nref.b = \'reference but not clone\';\nconsole.log(ref);\n{\n  a: 1,\n  b: \"reference but not clone\"\n}\nconsole.log(clone);\n{\n  a: 1,\n  b: \"clone but not reference\"\n}\nconsole.log(obj);\n{\n  a: 1,\n  b: \"reference but not clone\"\n}\n</code></pre>\n\n<p>&nbsp;</p>','2016-01-28 23:15:00',3),(153,'JavaScript','Misc','Trick Of Using Object As Reference','<p>The following snippets will reveal a tricky stuff of using object reference in JS</p>\n\n<pre>\n<code class=\"language-javascript\">var a = [1,2,3];\nvar b = a;\nb[3] = 4;\nconsole.log([a, b]);//[1,2,3,4], [1,2,3,4]\nb = [5,6,7,8];\nconsole.log([a,b]);// [1,2,3,4], [5,6,7,8]</code></pre>\n\n<p>As you can see:</p>\n\n<ul>\n	<li>If you try to <span style=\"background-color:rgb(82, 177, 91); color:whitesmoke\">modify a specific element of the referencing object(b in this case) via equator &quot;=&quot;,</span> then the <span style=\"background-color:#7AFF91\">referenced&nbsp;</span><span style=\"background-color:rgb(82, 177, 91); color:whitesmoke\">object(a in this case) will be modified as well</span></li>\n	<li>But if you try to <span style=\"background-color:rgb(241, 76, 76); color:whitesmoke\">totally redefine the referencing&nbsp;object via equator &quot;=&quot;</span>, then the object reference <span style=\"background-color:rgb(241, 76, 76); color:whitesmoke\">does not work</span></li>\n</ul>','2016-07-20 22:05:08',1),(154,'JavaScript','Snippets','Check Type Of Object','<p><span style=\"color:rgb(178, 34, 34)\">Everything in JS is an object</span>, but they can be different types, e.g.<span style=\"color:rgb(178, 34, 34)\"> Number, Array, or Object</span>. Here are the methods to check the type of a given object:</p>\n\n<p>1. <span style=\"color:rgb(0, 168, 255)\">variable.constructor</span></p>\n\n<ul>\n	<li>this is usually the fastest way to check type in browsers</li>\n	<li>If you are having issues with finding out if an objects property is an array, <span style=\"background-color:#52b15b; color:whitesmoke\">you must first check if the property is there</span>.</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">var a = 1;\nvar b = \'hi\';\nvar c = [1, 2, 3, 4];\nvar d = {\n  a: 1,\n  b: 2\n};\n\nconsole.log(a.constructor);\n//function Number() { [native code] }\nconsole.log(b.constructor);\n//function String() { [native code] }\nconsole.log(c.constructor);\n//function Array() { [native code] }\nconsole.log(d.constructor);\n//function Object() { [native code] }\n\nif(a.constructor === Number){\n  console.log(\'Yeah, this is a Number object\');\n}\n\n//check type of property of an object\nif(d.a &amp;&amp; d.a.constructor == Number){\n  alert(\'Yes\');\n}</code></pre>\n\n<p>2. use syntax(<span style=\"color:rgb(178, 34, 34)\">variable instanceof Object</span>)</p>\n\n<pre>\n<code class=\"language-javascript\">var a = 1;\nvar b = \'hi\';\nvar c = [1, 2, 3, 4];\nvar d = {\n  a: 1,\n  b: [5,6,7]\n};\nif(c instanceof Array){\n  console.log(\'Yeah, this is an Array object\');\n}\n//check type of property of an object\nif(d.b &amp;&amp; d.b instanceof Array){\n  alert(\'Yes\');\n}\nconsole.log(a instanceof Number);\n//false, I have no idea why?</code></pre>','2016-01-31 10:49:55',2),(155,'Linux','Commands','Show Linux Distro','<p>Use the following command to check the linux distro:</p>\n\n<pre>\n<code class=\"language-bash\">$ lsb_release -a\nNo LSB modules are available.\nDistributor ID:	Ubuntu\nDescription:	Ubuntu 14.04.3 LTS\nRelease:	14.04\nCodename:	trusty</code></pre>\n\n<ul>\n	<li><span style=\"background-color:#52b15b; color:whitesmoke\">lsb</span> means &#39;Linux Standard Base&#39;</li>\n	<li><span style=\"background-color:#17aef0; color:whitesmoke\">-a</span> means show all info about the distro</li>\n</ul>','2016-02-05 20:30:33',0),(156,'Linux','CentOS','Mysql Fix After Reboot','<p>If you does not shutdown you server gracefully, services may not be closed in the right way before server reboots. Then you might face issues, e.g. mysqld is not automatically lauched after restart. The following steps provide the solution to fix the issue in CentOS:</p>\n\n<p><span style=\"background-color:#eba03d; color:whitesmoke\">First, remove&nbsp;the mysql.sock</span></p>\n\n<pre>\n<code class=\"language-bash\">$ mv /var/lib/mysql/mysql.sock /var/lib/mysql/mysql.sock.bak</code></pre>\n\n<p><span style=\"background-color:#f14c4c; color:whitesmoke\">Second, lauch the mysqld</span></p>\n\n<pre>\n<code>$ /etc/init.d/mysqld\n//the name of mysqld might be different, please check the name before running</code></pre>\n\n<p>&nbsp;</p>','2016-02-05 21:05:30',0),(157,'Linux','Commands','Service','<p>In Linux world, it is very useful to register any executable as a service which can be start, stop and restart very easily.</p>\n\n<p><span style=\"color:#B22222\">1. check the list of registered services or status of indivdual service</span></p>\n\n<pre>\n<code class=\"language-bash\">//check all available services\n$ service --status-all\n//check status of a specific service\n$ service apache2 status</code></pre>\n\n<p>&nbsp;</p>','2016-02-05 21:15:56',4),(158,'PHP','Regex','Preg_match & Preg_match_all','<h3><strong><span style=\"color:rgb(178, 34, 34)\">preg_match&nbsp;&mdash;&nbsp;Perform a regular expression match</span></strong></h3>\n\n<p>It has five parameters:</p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">$pattern</span> to match(required)</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">$subject</span> to search(required)</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">$matches</span> which is an array to keep all matches found(optional)</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">$flag(PREG_OFFSET_CAPTURE)</span>, optional\n	<ul>\n		<li>if it is given, the every match will be converted into an array consisting of the matched string and the index postion of the matched string in the <span style=\"color:rgb(178, 34, 34)\">$subject</span>.</li>\n		<li>The captured position is&nbsp;counted in bytes<span style=\"color:rgb(178, 34, 34)\">(so although the&nbsp;u&nbsp;modifier makes both the pattern and subject be interpreted as UTF-8, the captured offsets are still counted in bytes but not in multi-bytes mode)</span>.</li>\n	</ul>\n	</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">$offset</span>(optional) which&nbsp;can be used to specify the alternate place from which to search the <span style=\"color:rgb(178, 34, 34)\">$subject</span>&nbsp;(in bytes).</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Example of using $matches</span></strong></p>\n\n<pre>\n<code class=\"language-php\">$pattern = &#39;/(wish).*(healthy)/iu&#39;;\n$subject = &#39;I wish you healthy!&#39;;\npreg_match($pattern, $subject, $matches);\nvar_dump($matches);\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">The results like below, $match[0] keeps the whole match, $match[1] and $match[2] save the matches of subpatterns&nbsp;</span></p>\n\n<pre>\n<code>array(3) {\n  [0]=&gt;\n  string(16) &quot;wish you healthy&quot;\n  [1]=&gt;\n  string(4) &quot;wish&quot;\n  [2]=&gt;\n  string(7) &quot;healthy&quot;\n}</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">Another example</span></p>\n\n<pre>\n<code class=\"language-php\">$subject = &quot;(hello)(world)(morning)&quot;;\n$pattern = &quot;~(([^()]*)).*~iu&quot;;\npreg_match($pattern, $subject, $matches);\nArray\n(\n    [0] =&gt; (hello)(world)(morning)\n    [1] =&gt; (hello)\n)</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. Example of using $flag</strong></span></p>\n\n<pre>\n<code class=\"language-php\">$pattern = &#39;/(wish).*(healthy)/iu&#39;;\n$subject = &#39;I wish you healthy!&#39;;\npreg_match($pattern, $subject, $matches, PREG_OFFSET_CAPTURE);\nvar_dump($matches);</code></pre>\n\n<p>Given the $flag &#39;<span style=\"color:rgb(178, 34, 34)\">PREG_OFFSET_CAPTURE</span>&#39;, the matches array will have the info of string position for each match</p>\n\n<pre>\n<code>array(3) {\n  [0]=&gt;\n  array(2) {\n    [0]=&gt;\n    string(16) &quot;wish you healthy&quot;\n    [1]=&gt;\n    int(2)\n  }\n  [1]=&gt;\n  array(2) {\n    [0]=&gt;\n    string(4) &quot;wish&quot;\n    [1]=&gt;\n    int(2)\n  }\n  [2]=&gt;\n  array(2) {\n    [0]=&gt;\n    string(7) &quot;healthy&quot;\n    [1]=&gt;\n    int(11)\n  }\n}</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. Example of using $offset</span></strong></p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Limitation 1 of $offset:</span></strong></p>\n\n<p>Even though <span style=\"color:rgb(178, 34, 34)\">$offset</span> can define new position of <span style=\"color:rgb(178, 34, 34)\">$subject</span> to start search, the position info of each&nbsp;match will still begin from very first character of the <span style=\"color:rgb(178, 34, 34)\">$subject</span>. So it is different from the&nbsp;<span style=\"color:rgb(178, 34, 34)\">substr($subject,$offset).</span></p>\n\n<p>You can check the differences between them&nbsp;below&nbsp;:</p>\n\n<pre>\n<code class=\"language-php\">$pattern = &#39;/(wish).*(healthy)/iu&#39;;\n$subject = &#39;I wish you healthy!&#39;;\npreg_match($pattern, $subject, $matches, PREG_OFFSET_CAPTURE, 2);\nvar_dump($matches);\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">The postion where entire match occurs still at 2 after applying $offset</span></p>\n\n<pre>\n<code>array(3) {\n  [0]=&gt;\n  array(2) {\n    [0]=&gt;\n    string(16) &quot;wish you healthy&quot;\n    [1]=&gt;\n    int(2)\n  }\n  [1]=&gt;\n  array(2) {\n    [0]=&gt;\n    string(4) &quot;wish&quot;\n    [1]=&gt;\n    int(2)\n  }\n  [2]=&gt;\n  array(2) {\n    [0]=&gt;\n    string(7) &quot;healthy&quot;\n    [1]=&gt;\n    int(11)\n  }\n}</code></pre>\n\n<pre>\n<code class=\"language-php\">$pattern = &#39;/(wish).*(healthy)/iu&#39;;\n$subject = &#39;I wish you healthy!&#39;;\npreg_match($pattern, substr($subject,2), $matches, PREG_OFFSET_CAPTURE);\nvar_dump($matches);</code></pre>\n\n<pre>\n<code>array(3) {\n  [0]=&gt;\n  array(2) {\n    [0]=&gt;\n    string(16) &quot;wish you healthy&quot;\n    [1]=&gt;\n    int(0)\n  }\n  [1]=&gt;\n  array(2) {\n    [0]=&gt;\n    string(4) &quot;wish&quot;\n    [1]=&gt;\n    int(0)\n  }\n  [2]=&gt;\n  array(2) {\n    [0]=&gt;\n    string(7) &quot;healthy&quot;\n    [1]=&gt;\n    int(9)\n  }\n}</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Limitation 2&nbsp;of $offset:</span></strong></p>\n\n<p>Similarly, if <span style=\"color:rgb(178, 34, 34)\">$pattern</span> includes symbol like &#39;<span style=\"color:rgb(178, 34, 34)\">^&#39;</span>, no matter whether the <span style=\"color:rgb(178, 34, 34)\">$offset</span> is applied to <span style=\"color:rgb(178, 34, 34)\">$subject</span>, the $pattern will always be searched from the beginning of the&nbsp;original <span style=\"color:rgb(178, 34, 34)\">$subject</span>.</p>\n\n<pre>\n<code class=\"language-php\">$pattern = &#39;/^(wish).*(healthy)/iu&#39;;\n$subject = &#39;I wish you healthy!&#39;;\npreg_match($pattern, $subject, $matches, PREG_OFFSET_CAPTURE, 2);\nvar_dump($matches);\narray(0) {\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<h3>&nbsp;</h3>\n\n<h3><strong><span style=\"color:rgb(178, 34, 34)\">preg_match_all &mdash;&nbsp;Perform a regular expression match to return <span style=\"background-color:rgb(255, 236, 0)\">all matches</span> inside the subject against given pattern</span></strong></h3>\n\n<pre>\n<code class=\"language-php\">$subject = &quot;(hello)world(morning)colorful&quot;;\n$pattern = &quot;~(([^()]+))+([a-zA-Z]+)~iu&quot;;\n\npreg_match_all($pattern, $subject, $matches);\nArray\n(\n  [0] =&gt; Array\n      (\n          [0] =&gt; (hello)world\n          [1] =&gt; (morning)colorful\n      )\n\n  [1] =&gt; Array\n      (\n          [0] =&gt; (hello)\n          [1] =&gt; (morning)\n      )\n\n  [2] =&gt; Array\n      (\n          [0] =&gt; world\n          [1] =&gt; colorful\n      )\n)\n\n//As shown, preg_match only returns the first match\npreg_match($pattern, $subject, $matches);\nArray\n(\n    [0] =&gt; (hello)world\n    [1] =&gt; (hello)\n    [2] =&gt; world\n)</code></pre>','2017-06-07 09:56:33',5),(159,'PHP','Regex','UTF8 Character Search','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. What if we want to match one or a range of&nbsp;non-latin charaters by using PCRE functions</strong></span></p>\n\n<p>use the format &quot;x{utf8_code}&quot; to represent a character in PCRE functions, e.g.</p>\n\n<pre>\n<code class=\"language-php\">//丛 = U+4E1B, 侃 = U+4F83\n$name = \'丛侃\';\npreg_match(\'?(\\x{4E1B})(\\x{4F83})?u\', $name, $match, PREG_OFFSET_CAPTURE);\nvar_dump($match);</code></pre>\n\n<p><span style=\"color:#B22222\">Although the&nbsp;u&nbsp;modifier makes both the pattern and subject be interpreted as UTF-8, the captured offsets are still counted in bytes but not in multi-bytes mode.&nbsp;</span></p>\n\n<pre>\n<code class=\"language-php\">array(3) {\n  [0]=&gt;\n  array(2) {\n    [0]=&gt;\n    string(6) \"丛侃\"\n    [1]=&gt;\n    int(0)\n  }\n  [1]=&gt;\n  array(2) {\n    [0]=&gt;\n    string(3) \"丛\"\n    [1]=&gt;\n    int(0)\n  }\n  [2]=&gt;\n  array(2) {\n    [0]=&gt;\n    string(3) \"侃\"\n    [1]=&gt;\n    int(3)\n  }\n}\n//since 丛 is multi-byte character, so the position of 侃 match is 3 </code></pre>\n\n<p>&nbsp;</p>','2016-02-18 23:39:34',3),(160,'JavaScript','Web API','Document Object Properties','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. document.defaultView</span></strong></p>\n\n<p>In browsers,&nbsp;document.defaultView&nbsp;returns the&nbsp;<span style=\"color:rgb(178, 34, 34)\">window&nbsp;object associated with&nbsp;a document,</span> or&nbsp;null&nbsp;if none available.</p>','2016-02-23 21:28:01',1),(161,'JavaScript','Web API','Window Object Methods','<p><strong><span style=\"color:rgb(255, 153, 153)\">1. window.getComputedStyle()</span></strong></p>\n\n<p>The&nbsp;Window.getComputedStyle()&nbsp;method gives the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain.</p>\n\n<pre>\n<code class=\"language-javascript\">//The following two are equivalent:\nvar style1 = document.defaultView.getComputedStyle(element);\nvar style2 = window.getComputedStyle(element);\n</code></pre>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-html\">&lt;style&gt;\n  #p1 {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n&lt;/style&gt;\n\n&lt;div id=&#39;p1&#39;&gt;\n  Hello World!\n&lt;/div&gt;\n&lt;div id=&#39;style&#39;&gt;&lt;/div&gt;\n&lt;script&gt;\n  var p1 = document.getElementById(&#39;p1&#39;)\n  var styleEle = document.getElementById(&#39;style&#39;);\n  var style = window.getComputedStyle(p1);\n  styleEle.innerHTML = style.getPropertyValue(&#39;font-family&#39;);\n&lt;/script&gt;</code></pre>\n\n<p>You will get following in browser:</p>\n\n<pre>\n<code>Hello World!\nmonospace</code></pre>\n\n<p>&nbsp;</p>','2016-02-23 21:27:45',1),(162,'JavaScript','Object Methods','HasOwnProperty','<p>The<strong><span style=\"color:rgb(255, 153, 153)\">&nbsp;<span style=\"color:rgb(178, 34, 34)\">Object.prototype.hasOwnProperty()&nbsp;</span></span></strong>method returns a boolean indicating whether the calling object has the specified property:</p>\n\n<ul>\n	<li>&#39;<span style=\"color:rgb(178, 34, 34)\">Own</span>&#39; implies that this method <span style=\"color:rgb(178, 34, 34)\">is not a property of this object&#39;s prototype</span></li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">function class1(){\n  this.prop1 = \'Hello World\';\n}\n\nclass1.prototype.prop2 = \'Hello Finland\';\nobj1 = new class1();\n\nconsole.log(obj1.hasOwnProperty(\'prop1\'));//true\nconsole.log(obj1.prop1);//\"Hello World\"\n//prop2 is not \'own\' but a \'prototype\' property\nconsole.log(obj1.hasOwnProperty(\'prop2\'));//false\nconsole.log(obj1.prop2);//\"Hello Finland\"</code></pre>','2016-05-25 18:21:18',2),(163,'CSS','Property','Z-index','<p><span style=\"color:rgb(178, 34, 34)\"><strong>z-index specifies the stack order of an element</strong></span></p>\n\n<ul>\n	<li>element with greater z-index value is always in front of the one with lower value.</li>\n	<li>z-index only works when <span style=\"color:rgb(178, 34, 34)\">position property of an element</span> is explicitly defined</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-html\">&lt;div style=\'margin: 0; padding: 0; width: 150px; height: 150px; background-color: red; position: relative; z-index:10; opacity: 0.6\'&gt;&lt;/div&gt;\n&lt;div style=\'position: absolute; z-index: 11;top: 75px; left:75px;transform: translate(-50%, -50%)\'&gt;I\'am not covered&lt;/div&gt;</code></pre>\n\n<p>You will get following result:</p>\n\n<p><img alt=\"\" src=\"../../../assets/img/z-index1.png\" style=\"height:174px; margin-bottom:5px; width:173px\" /></p>\n\n<p>Then we level down the z-index of the text element</p>\n\n<pre>\n<code class=\"language-html\">&lt;div style=\'margin: 0; padding: 0; width: 150px; height: 150px; background-color: red; position: relative; z-index:10; opacity: 0.6\'&gt;&lt;/div&gt;\n&lt;div style=\'position: absolute; z-index: 9;top: 75px; left:75px;transform: translate(-50%, -50%)\'&gt;I\'am covered&lt;/div&gt;</code></pre>\n\n<p>And, you will get a different result</p>\n\n<p><img alt=\"\" src=\"../../../assets/img/z-index2.png\" style=\"height:172px; margin-bottom:5px; width:173px\" /></p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Key points of z-index</span></strong></p>\n\n<ul>\n	<li><span style=\"background-color:#FFEC00\">z-index is only valid for the positioned element with value other than static.</span></li>\n	<li><span style=\"background-color:#FFEC00\">z-index of an element is not always decided by its own z-index value, but might be overridden by the value of its outmost positioned parent element.</span></li>\n	<li><span style=\"background-color:#FFEC00\">if parent element is positioned without z-index value specified, then z-index value of the child element will be valid.</span></li>\n</ul>\n\n<p>For example:&nbsp;</p>\n\n<pre>\n<code class=\"language-html\">&lt;div class=\'one\'&gt;\n  &lt;div class=\'three\'&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\'two\'&gt;&lt;/div&gt;\n&lt;style&gt;\n.one{\n  position: relative;\n  width: 200px;\n  height: 200px;\n  background: lightblue;\n  z-index: 20;\n}\n\n.two{\n  position: fixed;\n  width: 300px;\n  height: 300px;\n  background: lightgreen;\n  z-index: 21;\n  top: 0;\n  left: 0;\n}\n\n.three{\n  position: absolute;\n  width: 80%;\n  height: 80%;\n  top: 10px;\n  left: 10px;\n  background: crimson;\n  z-index: 20000;\n}\n&lt;/style&gt;</code></pre>\n\n<p>No matter how high the z-index value of element &quot;three&quot; is, if its parent &#39;one&#39; element has smaller z-index value than element &#39;two&#39;, element &#39;three&#39; will never be visible. But if &quot;one&quot; element does not have z-index value defined, then z-index of element &quot;three&quot; will be valid, and stay on top of element&nbsp;&quot;two&quot; therefore</p>','2018-11-27 13:00:51',8),(164,'Apache','Basics','Security','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Hide Apache Version and OS Identity from Errors</span></strong></p>\n\n<pre>\n<code class=\"language-apache\"># Suppress the info of apache server environment info(e.g. apache version, port, php version) in the error messages return to browser\nServerSignature Off\nServerTokens Prod</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2.&nbsp;Disable Directory Listing</strong></span></p>\n\n<p>By default Apache list all the&nbsp;content&nbsp;of Document root directory in the absence of&nbsp;index file, that will be risky to reveal the directory tree of your server.</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">Option &#39;Indexes&#39;</span> is the directive to control whether or not to display the directory tree.</p>\n\n<pre>\n<code class=\"language-apache\">&lt;Directory /var/www/&gt;\n        Options Indexes FollowSymLinks\n        AllowOverride ALL\n        Require all granted\n&lt;/Directory&gt;\n# \'-\' means to cut Indexes options\n&lt;Directory /var/www/html&gt;\n        Options -Indexes\n&lt;/Directory&gt;</code></pre>\n\n<p>After doing so, the root folder of your server will not be accessible.</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3.&nbsp;Turn off Server Side Includes and CGI Execution</strong></span></p>\n\n<p>We can&nbsp;turn off&nbsp;server side includes (mod_include) and&nbsp;CGI&nbsp;execution if not needed and to do so we need to modify main configuration file.</p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">Includes</span> used to parse server-side html, i.e. shtml</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">ExecCGI</span> used to parse CGI scripts</li>\n</ul>\n\n<pre>\n<code class=\"language-apache\">&lt;Directory \"/var/www/html/\"&gt;\nOptions -Includes -ExecCGI\n&lt;/Directory&gt;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>4.&nbsp;Limit Request Size</strong></span></p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">By default&nbsp;Apache&nbsp;has no limit on the total size of the HTTP request</span> i.e. unlimited and when you allow large requests on a web server its possible that you could be a victim of&nbsp;<span style=\"color:rgb(178, 34, 34)\">Denial of service attacks</span>. We can Limit the requests size of an Apache directive &ldquo;LimitRequestBody&rdquo; with the directory tag.</li>\n	<li>You can set the value in bytes from&nbsp;0&nbsp;(unlimited) to&nbsp;2147483647&nbsp;(2GB) that are allowed in a request body.</li>\n</ul>\n\n<pre>\n<code class=\"language-apache\">&lt;Directory \"/var/www/html\"&gt;\n   LimitRequestBody 512000\n&lt;/Directory&gt;</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">5. Disable access to root via mod_userdir</span></strong></p>\n\n<p>It is strongly recommended that your configuration include a &quot;<span style=\"color:rgb(178, 34, 34)\">UserDir disabled root</span>&quot; declaration</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">6. Use .htaccess to block access to a specific project folder</span></strong></p>\n\n<pre>\n<code class=\"language-apache\">#Just like in main conf file, we can use following directive understand specific folder\nRequire all denied</code></pre>','2016-02-28 01:13:16',8),(165,'CSS','Sass','Foundation','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Default file extension is .scss</span></strong></p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Sass @import rule</span></strong></p>\n\n<ul>\n	<li>@import syntax <span style=\"background-color:rgb(241, 76, 76); color:whitesmoke\">does not need file extension</span></li>\n</ul>\n\n<pre>\n<code class=\"language-css\">// import a child.scss file into parent.scss\n@import \'child\';</code></pre>\n\n<ul>\n	<li>After compiling the @import syntax, child.scss will be integrated into parent.scss, and finally into parent.css. However, the child.css file will be generated as well. <span style=\"color:rgb(178, 34, 34)\">To avoid this, we name the nested scss file in a &#39;partial&#39; way with a leading underscore, for example, _child.scss, however&nbsp;underscore and file extension aren&#39;t necessary with Sass imports syntax</span>.&nbsp;By doing so, the separate child.css file won&#39;t be produced after being imported into parent.css.</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. Nesting selectors</span></strong></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3.1 Normally in css, we will have nesting selectors like this:</span></p>\n\n<pre>\n<code class=\"language-css\">.class {\n  text-align: center\n}\n.class h2{\n  color: black\n}\n.class img{\n  display: block \n}</code></pre>\n\n<p>By using Sass, we have a much neater way to do so, for example:</p>\n\n<pre>\n<code class=\"language-css\">.class {\n  text-align: center;\n  h2{\n    color: black\n  }\n  img{\n    display: block \n  }\n}</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3.2 Certain properties with matching namespaces are nestable, for example, text, border, margin, padding, etc.</span></p>\n\n<p>For example in normal css, we have</p>\n\n<pre>\n<code class=\"language-css\">div {\n text-transform: uppercase;\n text-decoration: underline;\n}</code></pre>\n\n<p>And in sass, we can do the following</p>\n\n<pre>\n<code class=\"language-css\">div{\n text: {\n   decoration: underline;\n   transform: uppercase;\n }\n}</code></pre>\n\n<p><span style=\"background-color:rgb(23, 174, 240); color:whitesmoke\">NOTE</span>: there is a colon &#39;:&#39; after the property&#39;s name.</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3.3 &#39;&amp;&#39; symbol to reference the parent selector in scss</span></p>\n\n<p>Check the following example:</p>\n\n<pre>\n<code class=\"language-css\">/* note the difference between the two selectors*/\ndiv .title {\n  font-weight: bold;\n}\ndiv.title{\n  color: whitesmoke;\n}</code></pre>\n\n<p>In Sass. we can do the same by:&nbsp;</p>\n\n<pre>\n<code class=\"language-css\">/* note the difference between the two selectors*/\ndiv {\n  .title {\n    font-weight: bold;\n  }\n  /* &amp; means reference the parent div selector */\n  &amp;.title{\n    color: whitesmoke;\n  }\n}</code></pre>\n\n<p>More example of using &amp; symbol in sass:</p>\n\n<pre>\n<code class=\"language-css\">a {\n  display: block;\n  width: 30%;\n  &amp;:hover {\n    color: orange\n  }\n}</code></pre>\n\n<p>The &amp; symbol can be placed freely&nbsp;in sass, e.g.</p>\n\n<pre>\n<code class=\"language-css\">.title {\n color: white;\n}\ndiv .title{\n color: blue;\n}</code></pre>\n\n<p>In Sass</p>\n\n<pre>\n<code class=\"language-css\">.title {\n color: white;\n div &amp; {\n   color: blue;\n }\n}</code></pre>\n\n<p><span style=\"background-color:rgb(241, 76, 76); color:whitesmoke\">NOTE: Too deep nesting in Sass&nbsp;would be dangerous, for example, it might produce css selector which might be incredibly overrode later. So try to limit the Sass level within 3, 4 levels at most.</span></p>','2016-03-05 14:37:10',0),(166,'CSS','Sass','Variable','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Define a variable in Sass with $ symbol</span></strong></p>\n\n<pre>\n<code class=\"language-css\">$title: #666;\n</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. The &#39;!default&#39; flag</span></strong></p>\n\n<ul>\n	<li>&#39;!default&#39; flag is used to set the default value of a variable just in case it is not defined anywhere else</li>\n	<li>if the same variable is defined somewhere else, then the default value will be overwritten.</li>\n</ul>\n\n<pre>\n<code class=\"language-css\">$title: \'Hello\';\n$title: \'Hello World!\' !default\n/*then the $title will equal to \'Hello\'*/</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3. Types of Variables</strong></span></p>\n\n<pre>\n<code class=\"language-css\">/* Boolean */\n$shadow: false;\n/* Numbers: can be set with or without units */\n$width: 100px;\n$line-height: 1.5;\n$font-size: 3em;\n/* Colors */\n$background: orange;\n$border: #666;\n$color: rgb(255, 255, 255, 255);\n/* Strings: can be set with or without quotes */\n$font-family: \'Arial\';\n$header: Helvetica Neue;\n/* Lists */\n$margin: 10px 20px 15px 25px;\n/* Null */\n$text: null;</code></pre>\n\n<p><strong><span style=\"color:#B22222\">3. Scope of Variables</span></strong></p>\n\n<p>Just like the context in other languages, variable has its own scope.</p>\n\n<ul>\n	<li><span style=\"color:#B22222\">Variables defined inside a declaration {} cannot be used outside the same {}</span></li>\n	<li><span style=\"color:#B22222\">However, if same named variable is defined outside the {} and later defined inside the {}, the value inside {} will permenantely override the value defined outside the {},&nbsp;which means the variable value is updated and the new value will be used in the following appearances</span></li>\n</ul>\n\n<pre>\n<code class=\"language-css\">$color : #666;\ndiv {\n h2{\n   $color: whitesmoke;\n   color: $color;\n }\n}\n/* now $color is whitesmoke even outside the div brackets*/</code></pre>\n\n<p><strong><span style=\"color:#B22222\">4. Interpolation</span></strong></p>\n\n<p>Use the Ruby-esque #{$variable} to shim variables into selectors, property names and strings:</p>\n\n<pre>\n<code class=\"language-css\">$position: left;\n\n.class {\n  position: absolute;\n  #{$position}: 100px;/* will equals to \'left: 100px\'*/\n}</code></pre>\n\n<p>&nbsp;</p>','2016-03-05 22:56:17',0),(167,'CSS','Sass','Mixin','<p><span style=\"color:rgb(178, 34, 34)\"><strong>Mixin in Sass just like&nbsp;a &#39;function&#39; in PHP:</strong></span></p>\n\n<ul>\n	<li>It can <span style=\"color:rgb(178, 34, 34)\">wrap a block of codes</span> which can be included inside selector declarations.</li>\n	<li>It can <span style=\"color:rgb(178, 34, 34)\">have or not have arguments</span>.</li>\n	<li>It uses <span style=\"color:rgb(178, 34, 34)\">@include</span> syntax, note the difference between <span style=\"color:rgb(178, 34, 34)\">@include and @import</span> which imports an external sass file into the current one.</li>\n</ul>\n\n<p><span style=\"color:#B22222\"><strong>1. Basic usage without arguments</strong></span></p>\n\n<pre>\n<code class=\"language-css\">@mixin link{\n display: block;\n text-decoration: none;\n color: white;\n}\na {\n @include link;\n text-align: center;\n}</code></pre>\n\n<p><span style=\"color:#B22222\">2. The real power of Mixin is to use it with&nbsp;arguments</span></p>\n\n<ul>\n	<li>It can have multiple arguments</li>\n	<li>And it can <span style=\"color:#B22222\">have default value for the arugments</span></li>\n</ul>\n\n<pre>\n<code class=\"language-css\">$mixin box-sizing($option: border-box){\n -webkit-box-sizing: $option;\n -moz-box-sizing: $option;\n box-sizing: $option;\n}\ndiv .p1{\n  $include box-sizing(content-box);\n}\ndiv .p2{\n  $include box-sizing;\n}</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>3. What if we want to pass an argument that the value of it includes comma, f</strong></span>or example the &#39;<span style=\"color:#B22222\">transition</span>&#39; property</p>\n\n<p>The solution is to <span style=\"color:#B22222\">add &#39;...&#39; to the name of an argument </span>to create a so-called <span style=\"color:#B22222\">&#39;variable argument</span>&#39;:</p>\n\n<pre>\n<code class=\"language-css\">@mixin transition($val...){\n  -webkit-transition: $val;\n  -moz-transition: $val;\n  transition: $val;\n}\n.btn {\n  @include transition(width 2s, height 4s);\n}\n/* then you will have*/\n.btn {\n  -webkit-transition: width 2s, height 4s;\n  -moz-transition: width 2s, height 4s;\n  transition: width 2s, height 4s;\n}</code></pre>\n\n<p>Use <span style=\"color:#B22222\">variable argument</span> reversly:</p>\n\n<ul>\n	<li><span style=\"color:#B22222\">actually the $value... means a varible using comma separated items&nbsp;as its value. so we can use it to assign multiple css properties as follows</span></li>\n</ul>\n\n<pre>\n<code class=\"language-css\">$mixin button($radius, $color){\n  border-radius: $radius;\n  color: $color;\n}\n$button_properties: 10px, #666;\n.btn {\n  $include button($button_properties...)\n}\n\n/* then you will get */\n.btn{\n  border-radius: 10px;\n  color: #666;\n}\n</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>4. Use arguments to generate dynamic property name</strong></span></p>\n\n<pre>\n<code class=\"language-css\">@mixin margin-property($side, $value){\n margin-#{$side}: $value;\n}\n\n.p1 {\n $include margin-property(top, 10px);\n}\n\n/*Then you will have*/\n.p1{\n  margin-top: 10px;\n}</code></pre>\n\n<p>&nbsp;</p>','2016-03-05 23:50:03',0),(168,'CSS','Sass','Extend','<p><span style=\"color:rgb(178, 34, 34)\"><strong>Extend directive is used to:</strong></span></p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">1. just like class extension, make a selector declaration based on a pre-defined block of styles.</span></strong></p>\n\n<pre>\n<code class=\"language-css\">.btn-a {\n  background: #666;\n  color: blue;\n  width: 35%;\n}\n.btn-b {\n  @extend .btn-a;\n  text-decoration: underline;\n}</code></pre>\n\n<p>Then you will get</p>\n\n<pre>\n<code class=\"language-css\">.btn-a, .btn-b {\n  background: #666;\n  color: blue;\n  width: 35%;\n}\n.btn-b {\n  text-decoration: underline;\n}</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. The extending selection will inherit any changes made to the extended selector&nbsp;</span></strong></p>\n\n<pre>\n<code class=\"language-css\">.btn-a {\n  background: #666;\n  color: blue;\n  width: 35%;\n}\n.btn-b {\n  @extend .btn-a;\n  text-decoration: underline;\n}\n.home .btn-a{\n  margin: 15px;\n}</code></pre>\n\n<p>Then you will get</p>\n\n<pre>\n<code class=\"language-css\">.btn-a, .btn-b {\n  background: #666;\n  color: blue;\n  width: 35%;\n}\n.btn-b {\n  text-decoration: underline;\n}\n.home .btn-a, .home .btn-b{\n  margin: 15px;\n}\n</code></pre>\n\n<p><span style=\"background-color:rgb(241, 76, 76); color:whitesmoke\">NOTE: this extension behave may cause un-needed styles to be generated. So:</span></p>\n\n<ul>\n	<li>Always check the css output to avoid unexpectedly generated style</li>\n	<li>Use <span style=\"color:rgb(178, 34, 34)\">Placeholder</span> other than selector to define extendable styles to solve this issue.</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. Placeholder</span></strong></p>\n\n<p>Use <span style=\"color:rgb(178, 34, 34)\">&#39;%&#39; </span>symbol to define a placeholder wrapping block of styles to be extended later:</p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">Placeholder is an isolated model, it is not influenced by any selectors, so it can solve the issue claimed above nicely.</span></li>\n</ul>\n\n<pre>\n<code class=\"language-css\">%btn {\n  background: #666;\n  color: blue;\n  width: 35%;\n}\n.btn-a, .btn-b {\n  @extend %btn;\n}\n.home .btn-a{\n  margin: 15px;\n}</code></pre>\n\n<p>Then you will get</p>\n\n<pre>\n<code class=\"language-css\">.btn-a, .btn-b {\n  background: #666;\n  color: blue;\n  width: 35%;\n}\n.home .btn-a{\n  margin: 15px;\n}</code></pre>','2016-03-06 10:54:55',1),(169,'CSS','Snippets','Clearfix','<p><span style=\"color:#B22222\"><strong>A good way of clear floating influence learned from Code School</strong></span></p>\n\n<pre>\n<code class=\"language-html\">&lt;div class=\'parent\'&gt;\n  &lt;div class=\'child1\'&gt;&lt;/div&gt;\n  &lt;div class=\'child2\'&gt;&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n<pre>\n<code class=\"language-css\">/* in sass format */\n%clearfix\n  zoom: 1\n  &amp;:before,\n  &amp;:after\n    content: \'\'\n    display: table\n  &amp;:after\n    clear: both\n\n.parent\n  border: 1px solid red\n  @extend %clearfix\n  div\n    width: 100px\n    height: 100px\n    background: blue\n    float: left\n    margin: 5px</code></pre>\n\n<p>&nbsp;</p>','2016-03-07 09:35:34',5),(170,'CSS','Sass','Function & Condition & Loop','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Function</span></strong></p>\n\n<p><span style=\"background-color:rgb(23, 174, 240); color:whitesmoke\">Function</span> VS <span style=\"background-color:rgb(82, 177, 91); color:whitesmoke\">Mixin</span>:</p>\n\n<ul>\n	<li>Function is similar to Mixin in terms of arguments setting.</li>\n	<li>Mixin wraps styles related declaration, while Function wraps normal syntax</li>\n</ul>\n\n<pre>\n<code class=\"language-css\">@function FontSize($ratio, $default: 14){\n @return $ratio * $default + px;\n}\n.head {\n font-size: FontSize(1.5);\n}</code></pre>\n\n<p>Then you will get:</p>\n\n<pre>\n<code class=\"language-css\">.head {\n  font-size: 21px;\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. IF condition</span></strong></p>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-css\">@function bg($theme){\n  @if $theme == light{\n    @return #FFF;\n  }@else if $theme == gray {\n    @return #666;\n  }@else{\n    @return whitesmoke;\n  }\n}\n\n.wrapper {\n  background-color: bg(gray);\n}</code></pre>\n\n<p>Then you will get:</p>\n\n<pre>\n<code class=\"language-css\">.wrapper {\n  background-color: #666;\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. Each loop</span></strong></p>\n\n<p>Each is quite similar to the JS object <span style=\"color:rgb(178, 34, 34)\">for(a in b)</span> loop, for example:</p>\n\n<pre>\n<code class=\"language-css\">$banks: BCA BRI BNI Maybank;\n@each $bank in $banks{\n  .bank-#{$bank}{\n    background: url(bank-#{$bank}.png);\n  }\n}</code></pre>\n\n<p>Then you will get</p>\n\n<pre>\n<code class=\"language-css\">.bank-BCA {\n  background: url(bank-BCA.png);\n}\n.bank-BRI {\n  background: url(bank-BRI.png);\n}\n.bank-BNI {\n  background: url(bank-BNI.png);\n}\n.bank-Maybank {\n  background: url(bank-Maybank.png);\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>4. For Loop</strong></span></p>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-css\">.wrapper {\n  position: relative;\n  @for $i from 0 through 2 {\n    .item-#{$i}{\n      position: absolute;\n      top: $i * 30px;\n      left: 20px;\n    }\n  }\n}</code></pre>\n\n<p><span style=\"background-color:rgb(241, 76, 76); color:whitesmoke\">NOTE: &#39;$i from a to b&#39; means a&lt;=$i&lt;b, &#39;$i from a through b&#39; means a&lt;=$i&lt;=b</span></p>\n\n<p>Then you will get:</p>\n\n<pre>\n<code class=\"language-css\">.wrapper {\n  position: relative;\n}\n.wrapper .item-0 {\n  position: absolute;\n  top: 0px;\n  left: 20px;\n}\n.wrapper .item-1 {\n  position: absolute;\n  top: 30px;\n  left: 20px;\n}\n.wrapper .item-2 {\n  position: absolute;\n  top: 60px;\n  left: 20px;\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>5. While loop</strong></span></p>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-css\">$i: 0;\n\n.wrapper {\n  position: relative;\n  @while($i&lt;3){\n    .item-#{$i}{\n      position: absolute;\n      top: $i * 30px;\n      left: 15px;\n    }\n    $i: $i + 1;\n  }\n}</code></pre>\n\n<p>Then you will get:</p>\n\n<pre>\n<code class=\"language-css\">.wrapper {\n  position: relative;\n}\n.wrapper .item-0 {\n  position: absolute;\n  top: 0px;\n  left: 15px;\n}\n.wrapper .item-1 {\n  position: absolute;\n  top: 30px;\n  left: 15px;\n}\n.wrapper .item-2 {\n  position: absolute;\n  top: 60px;\n  left: 15px;\n}</code></pre>','2016-03-06 12:41:58',0),(171,'CSS','Sass','Compass','<p><span style=\"color:rgb(178, 34, 34)\"><strong>Compass</strong></span> is a <strong><span style=\"color:rgb(178, 34, 34)\">CSS Authoring Framework</span></strong> dedicated for&nbsp;<span style=\"color:rgb(178, 34, 34)\"><strong>Sass</strong></span></p>\n\n<ul>\n	<li>It is like a library for Sass by prodiving modules, utilities, mixins to be directly used without redefined by users manually</li>\n	<li>Compass consists of five main modules: <strong><span style=\"color:#B22222\">utilities, typography, css3, layout, reset</span></strong>.</li>\n	<li>insert <strong><span style=\"color:#B22222\">@import &quot;compass&quot;(including utilities, typography and css3 modules)</span></strong> on top of the master scss file to use Compass.</li>\n</ul>\n\n<p>For example, a built-in <span style=\"color:#B22222\">transform</span> mixin fixing css3 issues for all browsers, try Sass format instead of Scss format this time:</p>\n\n<ul>\n	<li>Sass format <span style=\"color:#B22222\">does not have curly brackets and semicolons,</span> which will make the look neater.</li>\n</ul>\n\n<pre>\n<code class=\"language-css\">/*.sass extension*/\n/* + means @include */\n@import \"compass\"\n.p1 \n  +transform(translate(-50%, 50%))</code></pre>\n\n<p>Then you will get:</p>\n\n<pre>\n<code class=\"language-css\">.p1 {\n  -moz-transform: translate(-50%, 50%);\n  -ms-transform: translate(-50%, 50%);\n  -webkit-transform: translate(-50%, 50%);\n  transform: translate(-50%, 50%);\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><span style=\"color:#B22222\"><strong>Stretch utility</strong></span></p>\n\n<p>Stretch utility will automatically generate position related properties:</p>\n\n<pre>\n<code class=\"language-css\">@import \"compass/layout\"\n.parent\n  position: relative\n  height: 400px\n  width: 400px\n  .child1 \n    background: #666\n    +stretch\n  .child2\n    background: red\n    +stretch(5px, 5px, 5px, 5px)\n    height: 100px</code></pre>\n\n<p>Then you will get:</p>\n\n<pre>\n<code class=\"language-css\">.parent {\n  position: relative;\n  height: 400px;\n  width: 400px;\n}\n.parent .child1 {\n  background: #666;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n.parent .child2 {\n  background: red;\n  position: absolute;\n  top: 5px;\n  bottom: 5px;\n  left: 5px;\n  right: 5px;\n  height: 100px;\n}\n</code></pre>\n\n<p>&nbsp;</p>','2016-03-07 09:20:25',0),(172,'JavaScript','Snippets','DOMNodeInserted','<p><strong><span style=\"color:rgb(178, 34, 34)\">$(selector).bind(&quot;DOMNodeInserted&quot; , function(e){}) :</span></strong></p>\n\n<ul>\n	<li>The &#39;DOMNodeInserted&#39; event will be tiggered if new node is inserted into the selector.</li>\n	<li>It is useful to deal with some asynchronous&nbsp;Javascript problems</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">$(&quot;#chart1&quot;).bind(&quot;DOMNodeInserted&quot;,function(e){\n  var triggerEle = e.target;\n  var barTag = triggerEle.className;\n  if ($(triggerEle).attr(&#39;class&#39;) == &#39;ct-bar&#39;) {\n    $(triggerEle).on(&#39;mouseover&#39;, function(){\n      $(this).css({\n        &#39;opacity&#39;: &#39;0.9&#39;\n      });\n    }).on(&#39;mouseout&#39;, function(){\n      $(this).css({\n        &#39;opacity&#39;: &#39;0.7&#39;\n      });\n    });\n  }\n});</code></pre>','2016-03-07 21:44:48',1),(173,'MongoDB','Basics','Configuration','<p>We can create a file name &#39;<span style=\"color:#B22222\">.mongorc.js</span>&#39; under <span style=\"color:#B22222\">/Users/username/</span> to do some customization to use mongoDB:</p>\n\n<p><span style=\"color:#B22222\"><strong>1. Customize the prompt of mongoDB shell</strong></span></p>\n\n<pre>\n<code class=\"language-javascript\">var operationCount = 1\nvar prompt = function(){\n     if(typeof db == \'undefined\'){\n        return \'nodb &gt; \';\n     }\n\n     return db + \": \" + (operationCount++) + \" &gt; \";\n};</code></pre>\n\n<p>then you will get following effect on mongoDB shell:</p>\n\n<pre>\n<code class=\"language-bash\">counterall$ mongo\nMongoDB shell version: 3.2.1\nconnecting to: test\ntest: 1 &gt;</code></pre>\n\n<p><strong><span style=\"color:#B22222\">2. Set a default editor which can be triggered inside mongoDB shell</span></strong></p>\n\n<pre>\n<code>EDITOR=\"/usr/bin/nano\"</code></pre>\n\n<p>So we can trigger nano&nbsp;as follows:</p>\n\n<pre>\n<code class=\"language-bash\">test: 1 &gt; var a = {\'hello\': \'world\'}\ntest: 2 &gt; edit a</code></pre>','2016-03-11 22:44:31',0),(174,'MongoDB','Basics','Basic Concept','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. Basic Mechnism&nbsp;of MongoDB</strong></span></p>\n\n<p>MongoDB is <strong><span style=\"color:rgb(178, 34, 34)\">document-oriented</span></strong> dabase, it is different from relational database like MySQL mainly in following perspective:</p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">DB</span>: mongo&nbsp;uses the same&nbsp;concept of database, nothing special.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">Collection</span>: mongo uses &#39;Collection&#39; while MySql uses &#39;Table&#39; to represent the entity storing records</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">Document</span>: record saved in mongo&#39;s collection is actually a Json like document(called BSON in mongo), while MySql&#39;s table consists of column-based rows</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">So unlike rows saved in table in MySql,&nbsp;there is no common data structure shared among mongo&#39;s&nbsp;records beneath the same collection, since it is document-oriented, what items saved in a document is free to choose without limitation</span>.</li>\n</ul>','2016-03-12 10:46:44',0),(175,'MongoDB','Basics','Basic Syntax','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. List Databases and Collections</strong></span></p>\n\n<pre>\n<code class=\"language-apache\">#show available dbs\ntest: 1 &gt; show dbs\nlocal  0.000GB\ntest   0.002GB\n#show available collections of current db\ntest: 2 &gt; show collections\nprofiles\nrestaurants</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Show the DB currently used</span></strong></p>\n\n<pre>\n<code class=\"language-apache\">#show the db currently used\ntest: 15 &gt; db\ntest</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. Create new DB or Choose DB&nbsp;</span></strong></p>\n\n<ul>\n	<li>these two operations use the same command &#39;use database_name&#39;</li>\n	<li>if DB not existed yet, then it will be created</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">however, it the newly created DB does not include any collections, then it is physically not created in your disk</span></li>\n</ul>\n\n<pre>\n<code class=\"language-apache\">#create a new DB name ck_db1\ntest: 6 &gt; use ck_db1\nswitched to db ck_db1\n#however it is not physically created yet\nck_db1: 8 &gt; show dbs\nlocal  0.000GB\ntest   0.002GB</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">4. Create collections and documents</span></strong></p>\n\n<ul>\n	<li>MongoDB creates a collection implicitly when the collection is first referenced in a command</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\"># collection \'users\' is created when referenced to insert new documents\nck_db1: 12 &gt; db.users.insert({\'firstname\': \'Kan\', \'lastname\': \'Cong\', \'gender\': \'male\', \'age\': 32})\nWriteResult({ \"nInserted\" : 1 })\nck_db1: 13 &gt; show collections\nusers\n# then ck_db1 is created as well once a child collection is added\ntest: 16 &gt; show dbs\nck_db1  0.000GB\nlocal   0.000GB\ntest    0.002GB</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>5. Insert</strong></span></p>\n\n<pre>\n<code class=\"language-bash\"># db.collections_name_insert() to create new document\nck_db1: 2 &gt; db.users.insert({\'firstname\': \'Daqiao\', \'lastname\': \'Cong\', \'gender\': \'male\', \'age\': 61})\nWriteResult({ \"nInserted\" : 1 })\n# to check available documents, pretty() will make documents look like json in a pretty way\nck_db1: 5 &gt; db.users.find().pretty()\n{\n	\"_id\" : ObjectId(\"56e346b81af2a4c76a195d93\"),\n	\"firstname\" : \"Kan\",\n	\"lastname\" : \"Cong\",\n	\"gender\" : \"male\",\n	\"age\" : 32\n}\n{\n	\"_id\" : ObjectId(\"56e34a65168911257fd2adc5\"),\n	\"firstname\" : \"Daqiao\",\n	\"lastname\" : \"Cong\",\n	\"gender\" : \"male\",\n	\"age\" : 61\n}</code></pre>','2016-04-23 11:07:14',1),(176,'MongoDB','CRUD','Update','<p><span style=\"color:rgb(178, 34, 34)\"><strong>6. Update items inside documents</strong></span></p>\n\n<p>The syntax is <span style=\"color:rgb(178, 34, 34)\">db.collection.update(selector, update_content, update_firstmatch_or_all_matches)</span></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">6.1 update first matched document</span></p>\n\n<pre>\n<code class=\"language-bash\">ck_db1: 6 &gt; db.users.update({\'lastname\': \'Cong\'}, {$rename: {\'firstname\': \'given_name\'}})\n# only the first matched document was updated\nck_db1: 8 &gt; db.users.find().pretty()\n{\n	\"_id\" : ObjectId(\"56e346b81af2a4c76a195d93\"),\n	\"lastname\" : \"Cong\",\n	\"gender\" : \"male\",\n	\"age\" : 32,\n	\"given_name\" : \"Kan\"\n}\n{\n	\"_id\" : ObjectId(\"56e34a65168911257fd2adc5\"),\n	\"firstname\" : \"Daqiao\",\n	\"lastname\" : \"Cong\",\n	\"gender\" : \"male\",\n	\"age\" : 61\n}\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">6.2 update all matched document</span></p>\n\n<pre>\n<code class=\"language-bash\"># before update\nck_db1: 20 &gt; db.users.find().pretty()\n{\n	\"_id\" : ObjectId(\"56e346b81af2a4c76a195d93\"),\n	\"gender\" : \"male\",\n	\"age\" : 32,\n	\"familyname\" : \"Cong\",\n	\"surname\" : \"Kan\"\n}\n{\n	\"_id\" : ObjectId(\"56e34a65168911257fd2adc5\"),\n	\"gender\" : \"male\",\n	\"age\" : 61,\n	\"familyname\" : \"Cong\",\n	\"surname\" : \"Daqiao\"\n}\n\n# do the update, set \'multi\' to true to update all\nck_db1: 21 &gt; db.users.update({\'familyname\': \'Cong\'}, {$rename: {\'familyname\': \'lastname\'}}, {\'multi\': true})\n\n# after update\nck_db1: 22 &gt; db.users.find().pretty()\n{\n	\"_id\" : ObjectId(\"56e346b81af2a4c76a195d93\"),\n	\"gender\" : \"male\",\n	\"age\" : 32,\n	\"surname\" : \"Kan\",\n	\"lastname\" : \"Cong\"\n}\n{\n	\"_id\" : ObjectId(\"56e34a65168911257fd2adc5\"),\n	\"gender\" : \"male\",\n	\"age\" : 61,\n	\"surname\" : \"Daqiao\",\n	\"lastname\" : \"Cong\"\n}</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">6.3 update item with an increment value</span></p>\n\n<ul>\n	<li>the value could be both positive or negative.</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">ck_db1: 8 &gt; db.users.find({\'surname\': \'Kan\'}).pretty()\n{\n	\"_id\" : ObjectId(\"56e346b81af2a4c76a195d93\"),\n	\"gender\" : \"male\",\n	\"age\" : 32,\n	\"surname\" : \"Kan\",\n	\"lastname\" : \"Cong\"\n}\n#increase the age value by 1\nck_db1: 9 &gt; db.users.update({\'surname\': \'Kan\'}, {$inc: {\'age\': 1}})\nck_db1: 10 &gt; db.users.find({\'surname\': \'Kan\'}).pretty()\n{\n	\"_id\" : ObjectId(\"56e346b81af2a4c76a195d93\"),\n	\"gender\" : \"male\",\n	\"age\" : 33,\n	\"surname\" : \"Kan\",\n	\"lastname\" : \"Cong\"\n}</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">6.3 update item with an multiplied value</span></p>\n\n<ul>\n	<li>the multiplied value could be used to do both multiply(e.g. 3) or division(e.g. 1/3)</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">ck_db1: 10 &gt; db.users.find({\'surname\': \'Kan\'}).pretty()\n{\n	\"_id\" : ObjectId(\"56e346b81af2a4c76a195d93\"),\n	\"gender\" : \"male\",\n	\"age\" : 33,\n	\"surname\" : \"Kan\",\n	\"lastname\" : \"Cong\"\n}\n# times two\nck_db1: 11 &gt; db.users.update({\'surname\': \'Kan\'}, {$mul: {\'age\': 2}})\nck_db1: 12 &gt; db.users.find({\'surname\': \'Kan\'}).pretty()\n{\n	\"_id\" : ObjectId(\"56e346b81af2a4c76a195d93\"),\n	\"gender\" : \"male\",\n	\"age\" : 66,\n	\"surname\" : \"Kan\",\n	\"lastname\" : \"Cong\"\n}\n# divided by three\nck_db1: 16 &gt; db.users.update({\'surname\': \'Kan\'}, {$mul: {\'age\': 1/3}})\nck_db1: 17 &gt; db.users.find({\'surname\': \'Kan\'}).pretty()\n{\n	\"_id\" : ObjectId(\"56e346b81af2a4c76a195d93\"),\n	\"gender\" : \"male\",\n	\"age\" : 11,\n	\"surname\" : \"Kan\",\n	\"lastname\" : \"Cong\"\n}</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">6.4 update content of array</span></p>\n\n<pre>\n<code class=\"language-bash\">ck_db1: 31 &gt; db.users.find({\'surname\': \'Kan\'}).pretty()\n{\n	\"_id\" : ObjectId(\"56e346b81af2a4c76a195d93\"),\n	\"hobbies\" : [\n		\"basketball\",\n		\"movies\",\n		\"technology\"\n	],\n	\"gender\" : \"male\",\n	\"age\" : 33,\n	\"surname\" : \"Kan\",\n	\"lastname\" : \"Cong\"\n}\n# use $push directive to add new array\'s element\nck_db1: 32 &gt; db.users.update({\'surname\': \'Kan\'}, {$push: {\'hobbies\': \'Chinese food\'}})\nck_db1: 33 &gt; db.users.find({\'surname\': \'Kan\'}).pretty()\n{\n	\"_id\" : ObjectId(\"56e346b81af2a4c76a195d93\"),\n	\"hobbies\" : [\n		\"basketball\",\n		\"movies\",\n		\"technology\",\n		\"Chinese food\"\n	],\n	\"gender\" : \"male\",\n	\"age\" : 33,\n	\"surname\" : \"Kan\",\n	\"lastname\" : \"Cong\"\n}</code></pre>','2016-05-05 12:05:51',3),(177,'Google','App Script','Get Started','<p><strong><span style=\"color:rgb(178, 34, 34)\">Google App Script</span></strong>&nbsp;is a cloud-based service of Google, it is :</p>\n\n<ul>\n	<li>a script development environment mainly used to call Google Api for web development.</li>\n	<li>its syntax is derived from JavaScript.</li>\n	<li>It needs OAuth authentication to be called</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. Create a new App Script to call Google Sheet</span></p>\n\n<ul>\n	<li>Create a new one via https://script.google.com</li>\n	<li>Code the function in the editor.</li>\n</ul>\n\n<p>​<span style=\"color:rgb(178, 34, 34)\">2. Use the API Executable</span></p>\n\n<p>Save the code and <strong>Deploy as API Executable</strong>&nbsp;by setting version and access control.&nbsp;Under &quot;Current API ID&quot;. Make note of this ID &mdash; you will need to enter it into the application code so that the API knows which script to call. If you need to find it again later, select&nbsp;<strong>Publish &gt; Deploy as API executable</strong>&nbsp;in the code editor to see it.</p>\n\n<p><strong>Note:</strong>&nbsp;To use the API, you must supply a&nbsp;<span style=\"color:rgb(178, 34, 34)\">valid OAuth token</span>&nbsp;that covers all the scopes used by the script (not just the ones used by the called function). To find the correct scopes to include in the authentication token, follow these steps:</p>\n\n<ul>\n	<li>Open the project in the script editor</li>\n	<li>Select&nbsp;<strong>File &gt; Project properties</strong>&nbsp;and click the&nbsp;<strong>Scopes</strong>&nbsp;tab.</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Click <a href=\"https://developers.google.com/apps-script/guides/rest/quickstart/php\" style=\"margin-bottom: 5px;\">here</a> to check language specific guidance.</span></strong></p>','2016-11-15 17:18:17',2),(178,'JavaScript','Misc','Immediately-Invoked Function Expression (IIFE)','<p><span style=\"color:rgb(178, 34, 34)\"><strong>Self-calling function</strong></span></p>\n\n<p>First off there is an anonymous function with&nbsp;immediate invocation. It&#39;s similar to this:</p>\n\n<pre>\n<code class=\"language-javascript\">(function(){\n  console.log(this.constructor);}\n)();\n//function Window() { [native code] }\n\nmyobj4 = function(){\n  this.print = function(){\n    console.log(\'say hi\');\n  };\n};\n(new myobj4()).print();//\'say hi\'\n\n(function(){\n  console.log(this.constructor);}\n).call();\n//function Window() { [native code] }</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. Now why use&nbsp;.call or .apply()&nbsp;instead of just&nbsp;()?</span></p>\n\n<ul>\n	<li>func.call(obj, arg1, arg2, ...) and func.apply(obj, argArray) are predefined&nbsp;methods all&nbsp;Functions&nbsp;have. <span style=\"background-color:#7AFF91\">The first argument is an object&nbsp;which is the context this &#39;func&#39; will be invoked, subsequent arguments will be passed as arguments to the function</span>. So:</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">(function () { \nconsole.log(this.foo); // bar \n}).call({ \"foo\": \"bar\" });\n</code></pre>\n\n<ul>\n	<li>This works in conjunction with&nbsp;undefined&nbsp;(see below).</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2&nbsp;.call&nbsp;is the&nbsp;same&nbsp;as&nbsp;.apply&nbsp;with one minor difference.&nbsp;.apply&nbsp;only takes 2 arguments, where the 2nd is an array of arguments. This would be similar:</span></p>\n\n<pre>\n<code class=\"language-javascript\">(function () {}).call(this, \"foo\", \"bar\"); \n(function () {}).apply(this, [ \"foo\", \"bar\" ]);\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3. A common use of apply is in conjunction with the magic variable&nbsp;arguments.</span></p>\n\n<pre>\n<code class=\"language-javascript\">(function () { \nconsole.log(Array.prototype.slice.call(arguments, 1)); // [ \"bar\" ] \n})([ \"foo\", \"bar\" ]);\n</code></pre>\n\n<ul>\n	<li>Array.prototype.slice.call(arguments, 1)&nbsp;may look scary but really it&#39;s just&nbsp;arguments.slice(1), but&nbsp;arguments&nbsp;isn&#39;t an&nbsp;Array&nbsp;so it doesn&#39;t have a&nbsp;slice&nbsp;function.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">We borrow&nbsp;Arrays&nbsp;slice&nbsp;function and use&nbsp;.call&nbsp;to set the&nbsp;this&nbsp;to&nbsp;arguments.&nbsp;Array.prototype.slice(arguments, 1??)&nbsp;is incorrect.</span></li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4. Now why is there&nbsp;this&nbsp;in&nbsp;.call(this)?&nbsp;</span></p>\n\n<ul>\n	<li>&#39;this&#39; always points to the context you&#39;re in.</li>\n	<li>If you&#39;re in an instance of a class it will point to the instance and if you&#39;re in the&nbsp;global scope&nbsp;it will point to that.</li>\n	<li>In a browser environment it is also&nbsp;<span style=\"color:rgb(178, 34, 34)\">window</span>.</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">5. Why&nbsp;undefined sometimes? </span></p>\n\n<pre>\n<code class=\"language-javascript\">(function(undefined){\n   /*(insert entire library here)*/\n}).call(this);</code></pre>\n\n<ul>\n	<li>Since we did a&nbsp;.call(this)&nbsp;with no second argument, all arguments to our anonymous function are&nbsp;undefined. I&#39;m not really sure&nbsp;why to make an explicit variable named&nbsp;undefined&nbsp;there. Maybe this is support for some browsers or some lint tool that likes to seeundefined&nbsp;defined.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">undefined</span>&nbsp;is fickle.</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">var undefined = \"foo\"; console.log(undefined); // undefined \n(function (undefined) { \nconsole.log(undefined); // \"foo\" \n})(\"foo\");\n</code></pre>\n\n<p>You can just as easily have:</p>\n\n<pre>\n<code class=\"language-javascript\">(function () { /* code here */ })();\n//which just like\nnamedFunc = function(){/* code here */};\nnamedFunc();</code></pre>\n\n<p>This is completely valid and works just the same. There might be some performance or linting benefits</p>','2016-05-27 11:03:27',14),(179,'JavaScript','Object Methods','Object Clone','<p>Using equator &quot;=&quot; to assign an object to a variable actually does not make the variable a new clone with a new mem address&nbsp;but a hard link to the mem address of that&nbsp;object. For example:</p>\n\n<pre>\n<code class=\"language-javascript\">var parentObj = {\n  a: &#39;Hello&#39;,\n  b: &#39;World&#39;\n};\n\nvar cloneObj = parentObj;\ncloneObj.b = &#39;Boy&#39;;\nconsole.log(parentObj.b);//&quot;Boy&quot;</code></pre>\n\n<p>So what if we want to make a real clone of the original object but not a link to it. A good solution is vai jQuery <span style=\"color:rgb(178, 34, 34)\">$.extend</span></p>\n\n<pre>\n<code class=\"language-javascript\">var parentObj = {\n  a: &#39;Hello&#39;,\n  b: &#39;World&#39;\n};\n\nvar cloneObj = $.extend(true, {}, parentObj);\ncloneObj.b = &#39;Boy&#39;;\nconsole.log(cloneObj.b);&quot;Boy&quot;\nconsole.log(parentObj.b);&quot;World&quot;</code></pre>','2016-04-02 17:09:40',5),(180,'Statsit','Work-Flow','Reboot Tasks','','2016-04-03 21:50:37',0),(181,'Linux','Folder And Files','Mount Related','<p><strong><span style=\"color:#B22222\">1. Check mounted devices</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">cat /etc/mtab</code></pre>\n\n<p>&nbsp;</p>','2016-04-04 00:51:03',1),(182,'Statsit','Database','Key Databases Locations','<p><span style=\"color:rgb(178, 34, 34)\"><strong>Server 112 (mysql -ustatsit_root -piBohna7n)</strong></span></p>\n\n<p>1. For each MMonitor database????:</p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">Mentions</span> and <span style=\"color:rgb(178, 34, 34)\">Mentions_pool</span> tables save the actually scraped post.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">Mention_ids</span> table decide the <span style=\"color:rgb(178, 34, 34)\">mention_id</span> of each posts which will be used to mark the id of the posts saved into <span style=\"color:rgb(178, 34, 34)\">mentions</span> and <span style=\"color:rgb(178, 34, 34)\">mentions_pool</span>.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">Settings</span> table saves the metadata of the sample, for example, the keywords of this sample.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">Users</span> table which saves all distinct usernames with number of mentions found for each username&nbsp;from the scraped mentions in real-time</li>\n</ul>\n\n<p>2. sphinx2 database saves the&nbsp;sphinx related settings</p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">searchd</span> table saves the basic settings of searchd</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">sphinx_index</span> table saves the sphinx related&nbsp;meta data of each sampl, e.g. searchd_id, slot_id, max_indexed_id.</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>&nbsp;</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Server 117 (mysql -h69.160.245.117 -ustatsit_root -piBohna7n)</span></strong></p>\n\n<p>1. new_mm_pool database</p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">account_info</span>: each row saves the meta data of a sample, for example, accountID(the sample id), serialized sample setting, <span style=\"color:rgb(178, 34, 34)\">activeness</span>, etc.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">account_brand</span>: each row saves the meta data of <span style=\"color:rgb(178, 34, 34)\">each keyword(brand)</span> of a sample, e.g. accountID the keyword belongs to, brand(the keyword), country filter, or timestamps of the scraped time against this keyword for each platform, <span style=\"background-color:rgb(255, 236, 0)\">or id of the last scraped post</span>. <span style=\"background-color:rgb(122, 255, 145)\">And for each sample, this table is always refreshed&nbsp;with keywords refilled each time a scraping loop is triggered</span></li>\n	<li><span style=\"color:rgb(178, 34, 34)\">scraping_queue</span>: each sample would have multiple rows, each of which saves the meta data of the scraping status against each platform. <span style=\"background-color:rgb(255, 236, 0)\">Scraping against each platform is triggered individually based on the frequency and updated time.</span></li>\n</ul>\n\n<pre>\n<code class=\"language-sql\">+------+---------+------------+---------+---------------+------+-----------+---------------------+------------+\n| id   | slot_id | platform   | status  | keywords_json | host | frequency | updated             | scraped    |\n+------+---------+------------+---------+---------------+------+-----------+---------------------+------------+\n| 5123 |   10886 | blog       | waiting |               | NULL |      1200 | 2016-12-19 11:06:02 | 1482163562 |\n| 5125 |   10886 | discussion | waiting |               | NULL |      1200 | 2016-12-19 11:09:02 | 1482163742 |\n| 5128 |   10886 | twitter    | waiting |               | NULL |      1200 | 2016-12-19 22:05:03 | 1482203103 |\n| 5127 |   10886 | facebook   | waiting |               | NULL |      1200 | 2016-12-19 21:03:02 | 1482199382 |\n| 5124 |   10886 | news       | waiting |               | NULL |      1200 | 2016-12-19 19:44:01 | 1482194641 |\n| 5126 |   10886 | youtube    | waiting |               | NULL |      1200 | 2016-12-19 21:03:02 | 1482199382 |\n+------+---------+------------+---------+---------------+------+-----------+---------------------+------------+</code></pre>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">whitelist_slot_rel</span>: each row shows the mirror between slot_id of a panel sample(<span style=\"color:rgb(178, 34, 34)\">scraping posts based on users but not keywords</span>) and its list_id which is used to mark a panel sample in table&nbsp;<span style=\"color:rgb(178, 34, 34)\">whitelist_twitter_rel</span>.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">whitelist_twitter_rel</span>: each row saves the meta data of a twitter user account for a panel sample</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">domains_white_black_lists</span>: saves the country filter info of a panel sample or a slot sample</li>\n</ul>\n\n<p>2. Statsit database</p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">alerts</span>: each row saves the setting of an email alert.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">users</span>: detail of each registered user of Statsit</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">user_accounts</span>: each row saves the relation between a statsit user ID to a sample ID, and all these related samples will be display on ListenR &#39;My Samples&#39; section inside the sample selection drop-down</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">keywords</span>: save all the Passion Point keywords used to calcualte Influence Score</li>\n</ul>','2017-09-15 10:30:11',2),(183,'Statsit','Sphinx','Useful Commands','<p><span style=\"color:#B22222\">1. Send compiled configuration file to my email to check the correctness of configuration</span></p>\n\n<pre>\n<code class=\"language-bash\">./sphinx.conf.0.php | mail -s \'searchd0\' kcongmj23@gmail.com &gt;/dev/null 2&gt;&amp;1</code></pre>\n\n<p><span style=\"color:#B22222\">&nbsp;2. Check sphinx related processes running on the background</span></p>\n\n<pre>\n<code class=\"language-bash\">ps -ef | grep -Ev \'grep|indexer\' | grep -Ei --color \'searchd|PPID\'\nps -ef | grep -Ev \'grep\' | grep -Ei --color \'indexer|PPID\'\nps -ef | grep -Ev \'grep|rotate|dev\' | grep -Ei --color \'indexer|PPID\'\nps -ef | grep -Ev \'grep\' | grep -Ei --color \'indexer.*rotate|PPID\'</code></pre>\n\n<p><span style=\"color:#B22222\">3. Check the port used by sphinx related processes</span></p>\n\n<pre>\n<code class=\"language-bash\">sudo lsof -iTCP -n -P | grep -E \'searchd.*LISTEN|PID\'\nsudo lsof -iTCP -sTCP:LISTEN -n -P | grep -Ei --color \'searchd|mysql|PID\'</code></pre>\n\n<p><span style=\"color:#B22222\">4. Check the data consistency of index&nbsp;</span></p>\n\n<pre>\n<code class=\"language-bash\">sudo /usr/local/sphinx212/bin/indextool --config /storage/sphinx/config/sphinx.conf.2.php --check MMonitor_10779_Delta\n</code></pre>\n\n<p><span style=\"color:#B22222\">5. Check sample&#39;s sphinx related info</span></p>\n\n<pre>\n<code class=\"language-sql\">\nselect searchd_id, count(*) from sphinx_index where status_type = 0 group by searchd_id asc;\n\nselect id, slot_id, status_type, searchd_id, priority, restart, data_ready, max_indexed_id, max_indexed_id_delta, \nfrom_unixtime(main_indexed),  from_unixtime (delta_indexed),  from_unixtime(merged) from sphinx2.sphinx_index \nwhere status_type = 0 and searchd_id = 1 order by data_ready desc, delta_indexed asc;</code></pre>\n\n<p><span style=\"color:#B22222\">&nbsp;6. Others</span></p>\n\n<pre>\n<code class=\"language-bash\"># launch searchd with configuration file specified\nsudo /usr/local/sphinx212/bin/searchd --config /storage/sphinx/config/sphinx.conf.4.php\n# manually index some database\nsudo nohup /usr/local/sphinx212/bin/indexer --rotate --config /storage/sphinx/config/sphinx.conf.3.php MMonitor_10730_Delta &amp;\n# check log\ntail -f /storage/sphinx/logs/1/searchd.log &amp;\ntail -20 /storage/sphinx/logs/3/searchd.log\n# check space used by index\ndu -csh  /storage/sphinx/var/data/MMonitor_10584</code></pre>\n\n<p>&nbsp;</p>','2016-04-05 19:55:39',1),(184,'Statsit','Sphinx','How To Configure','<p><!--StartFragment--><span style=\"color:#B22222\"><strong>How Sphinx Configuration file will be proceeded(sphinx.conf.x.php)</strong></span></p>\n\n<p><strong>Make a new SphinxConfGenerator instance with the searchd ID(0, 1, 2, 3, 4) as the parameter.</strong></p>\n\n<p><span style=\"color:#B22222\">1. Instantiate SphinxDB class to query sphinx2 database in 112 server:</span></p>\n\n<ul>\n	<li>In sphinx_index table, get all rows(one row per sample) which belongs to the current searchd and the value of status_type equals to 0 (<span style=\"background-color:#eba03d; color:whitesmoke\">which means the sample is active</span>)</li>\n	<li>In searchd table, get meta data of current searchd, e.g. port, location of executables, etc.</li>\n</ul>\n\n<p><span style=\"color:#B22222\">2. Call getSources() function to overwrite the &#39;main source&#39; part of sphinx conf for each sample database according to the info got from sphinx_index table.</span></p>\n\n<ul>\n	<li>The sql_query covers from min mention_id to max mention_id of mentions table and mentions_pool table;</li>\n	<li>For each row inside the sample database, if it is not a tweet or facebook post, then the main body of the post must be fetched from a separate file saved in disk. Call function getSlotDataDisc() to have the main path of that file. Usually this function return string &quot;/storage&quot;</li>\n	<li>The entire path of a content file will be /storage/mentions/slot_id/date/url_hash.txt</li>\n	<li>And at the end of the file path, add &#39;/dev/null&#39;, maybe means to avoid output the content of the file into stdout</li>\n	<li>After all queries finish, the max_indexed_id in sphinx_index table in sphinx2 database in 112 server will be updated to the value of max mention id which is got when query starts</li>\n</ul>\n\n<p><span style=\"color:#B22222\">3. Call getSourcesDelta() function to generate the &#39;delta source&#39; part of sphinx conf for each sample database according to the info got from sphinx_index table, the main differences from main source are:</span></p>\n\n<ul>\n	<li>It does not have sql_query_range and sql_range_step settings since delta source usually deal with small amount of records</li>\n	<li>Its sql_query starts from the row whose mention_id is bigger than the max_indexed_id of this sample saved in sphinx_index table in sphinx2 database in 112 server</li>\n	<li>After the index is finished, run <span style=\"background-color:#99ffcc\">sql_query_post_index = UPDATE sphinx2.sphinx_index SET max_indexed_id_delta=$maxid </span>for the current slot.</li>\n</ul>\n\n<p><span style=\"color:#B22222\">4. Call getIndexes() and getIndexesDelta() to overwrite the &#39;index&#39; part in sphinx conf file.</span></p>\n\n<ul>\n	<li>Use &#39;data_dir&#39; value fetched from searchd table for each searchd to decide the common part of the &#39;path&#39;(used to save indexed data) value in &#39;index&#39; config</li>\n	<li>If &#39;data_dir_override&#39; is set in the sample row in sphinx_index table, then use &#39;data_dir_override&#39; to replace &#39;data_dir&#39;, otherwise, keep using &#39;data_dir&#39;</li>\n	<li>Set the &#39;source&#39; name to &#39;MMonitor_$slotid&#39; and &#39;Mmonitor_$slotid_Delta&#39; for main index and delta index respectively</li>\n	<li>And finally complete the &#39;path&#39; name to &#39;data_dir/Mmonitor_$slotid_/Main&#39; and &#39;data_dir/Mmonitor_$slotid/Delta&#39; for main index and delta index respectively</li>\n</ul>\n\n<p><span style=\"color:#B22222\">5. Modify searchd settings</span></p>\n\n<ul>\n	<li>Call getConf(&#39;port&#39;) function to set the port for the specified searchd based on the &#39;port&#39; value in searchd table in sphinx2 database in 112 server</li>\n	<li>Call getConf(&#39;log&#39;) function to set the log path for the specified searchd based on the &#39;log&#39; value in searchd table in sphinx2 database in 112 server</li>\n	<li>Call getConf(&#39;query_log&#39;) function to set the path of query log for the specified searchd based on the &#39;query_log&#39; value in searchd table in sphinx2 database in 112 server</li>\n	<li>Call getConf(&#39;pid_file&#39;) function to set the name of pid file for the specified searchd based on the &#39;pid_file&#39; value in searchd table in sphinx2 database in 112 server</li>\n</ul>\n\n<p><!--EndFragment--></p>','2016-04-05 20:59:04',1),(185,'Statsit','Sphinx','Indexer Initialization Script','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Indexer_sudo.php</span> is the real script to run database indexing as root&#39;s crontab which includes:</strong></p>\n\n<ul>\n	<li>*/10 * * * * /usr/local/bin/php /storage/sphinx/config/indexer_sudo.php searchd 0 &gt; /dev/null 2&gt;&amp;1</li>\n	<li><!--  -->*/10 * * * * /usr/local/bin/php /storage/sphinx/config/indexer_sudo.php searchd 1 &gt; /dev/null 2&gt;&amp;1</li>\n	<li><!--  -->*/10 * * * * /usr/local/bin/php /storage/sphinx/config/indexer_sudo.php searchd 2 &gt; /dev/null 2&gt;&amp;1</li>\n	<li><!--  -->*/10 * * * * /usr/local/bin/php /storage/sphinx/config/indexer_sudo.php searchd 3 &gt; /dev/null 2&gt;&amp;1</li>\n	<li><!--  -->*/10 * * * * /usr/local/bin/php /storage/sphinx/config/indexer_sudo.php searchd 4 &gt; /dev/null 2&gt;&amp;1</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><strong>2. Some columns&#39; meaning in<span style=\"color:rgb(178, 34, 34)\"> sphinx2</span>.<span style=\"color:rgb(178, 34, 34)\">sphinx_index</span> table in server&nbsp;112&nbsp;to understand</strong></p>\n\n<ul>\n	<li>Status_type: 0 means slot is active, otherwise inactive</li>\n	<li><!--  -->Restart: 1 means searchd0 needs to be restarted to load current sample indexes, 0 means no need to restart that the current sample has been served by searchd already</li>\n	<li><!--  -->Data_ready: once new posts are scraped, this value is set to 1, and after indexing for a sample, the value is set back to 0</li>\n	<li><!--  -->rolled_out: this value is set to 1 when a delta_index has been made for a sample</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><strong>3. Some columns&#39; meaning in <span style=\"color:rgb(178, 34, 34)\">Statsit.accounts</span> table in server 117 to understand</strong></p>\n\n<ul>\n	<li>Status: same as the status_type in sphinx_index table</li>\n	<li><!--  -->Api_version: value is either 3 or 0</li>\n	<li><!--  -->Version: value is either 2, 3, or 0</li>\n	<li><!--  -->Type: only value 1 exists</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><strong><span style=\"color:rgb(178, 34, 34)\">4. The main tasks indexer_sudo.php deals with:</span></strong></p>\n\n<ul>\n	<li>Prioritize samples to index based on <span style=\"background-color:#eba03d; color:whitesmoke\">&#39;priority&#39; desc, &#39;restart&#39; desc, &#39;data_ready&#39; desc and &#39;delta_indexed&#39; asc.</span> And in each loop prioritize all slots again and only indexing the most prioritized one</li>\n	<li><!--  --><span style=\"background-color:#52b15b; color:whitesmoke\">Decide to do &#39;Main index&#39; or &#39;Delta Index&#39; based on the value of &#39;max_indexed_id&#39; of a sample, if its is more than 0 then takes &#39;Delta Index&#39;, otherwise takes &#39;Main Index&#39;</span></li>\n	<li><!--  -->Call indexer to do the indexing and generated words_frequency document</li>\n	<li><!--  -->Merge Delta index back to Main index if conditions are met</li>\n	<li><!--  -->Restart &#39;searchd0&#39; daemon if conditions are met</li>\n	<li><!--  -->Check if there are new samples created periodically(once every 6 loops exactly), if yes, save info of new samples into sphinx_index table, then start the above steps</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><!--  --><!--  --><strong><span style=\"color:rgb(178, 34, 34)\">5. Here are the steps:</span></strong></p>\n\n<ul>\n	<li><span style=\"background-color:rgb(235, 160, 61); color:whitesmoke\">Indexer_sudo.php is only for individual searchd daemon</span>, it does not iterate all daemons itself, you have to run this scripts as many times as the number of daemons</li>\n	<li>Instantiate SphinxIndexer class from &#39;SphinxIndexer.class_sudo.php&#39;</li>\n	<li>Call countRunningScripts() function from &#39;aux.system.php&#39; to check whether the related crontab is running at the moment, if yes, then exit executing current script</li>\n	<li>Call <span style=\"background-color:rgb(235, 160, 61); color:whitesmoke\">Iterate</span>($searchdID) which is an infinit loop from SphinxIndexer instance and inside Iterate method\n	<ol style=\"list-style-type:lower-alpha\">\n		<li>Call getLockedSlots() to get ids of slots which will be skipped to be indexed</li>\n		<li>Select all rows with all fields from join table between &#39;sphinx_index&#39; and &#39;searchd&#39; (sphinx_index.id as sphinx_index_id, sphinx_index.merged as last_merge) for all rows belonging to the current searchdID except those rows excluded in the last step, and prioritize all rows to <span style=\"background-color:rgb(235, 160, 61); color:whitesmoke\">only take the one with highest priority to proceed</span></li>\n		<li>For the row returned with the highest priority:\n		<ul>\n			<li>If row[&#39;status_type&#39;] != 0 which means this sample is not active anymore\n			<ul>\n				<li><!--   -->then delete index data for this sample from directory &#39;/storage/sphinx/var/data/Mmonitor_$slotid&#39;</li>\n				<li><!--  -->and update the related row in sphinx_index table to be initial status</li>\n				<li><!--  -->And indexer will not be applied to this slot at all</li>\n			</ul>\n			</li>\n			<li><!--  -->If this slot is active\n			<ul>\n				<li>if row[&#39;max_indexed_id&#39;] &gt; 0 which means this slot has been indexed before with &#39;Main index&#39;, then use &#39;Delta index&#39; for this sample</li>\n				<li><!--  -->Otherwise, use the &#39;Main index&#39; for this sample</li>\n				<li><!--  -->Check whether the path to save indexed data for this sample exists or not, if not exists, create it.</li>\n			</ul>\n			</li>\n			<li><!--  -->Begin the indexing process\n			<ul>\n				<li><!--   -->Generate the command for indexing, format is &#39;path/to/indexer --rotate --config&nbsp; path/to/sphinx_conf/path/for/the/current/searchd index_name&#39;, and then run the command</li>\n				<li><!--  -->Generate the command to build words frequency file for the sample, format is &#39;path/to/indexer --config path/to/sphinx_conf/path/for/current/searchd index_name --buildstops path/to/frequency/file 10000 --buildfreqs&#39;, and run the command</li>\n				<li><!--  -->Update the &#39;delta_indexed&#39; and/or &#39;main_indexed&#39;(if doing Main index) with timestamp in sphinx_index table for this sample&#39;s row</li>\n				<li><!--  -->Merge the Delta index back to Main index if\n				<ul>\n					<li><!--   -->the merging has not been done for over 24 hours</li>\n					<li><!--  -->And &#39;max_indexed_id_delta&#39; is larger than &#39;max_indexed_id&#39;</li>\n					<li><!--  -->And row[&#39;rolled_out&#39;] = 1 which means a Delta indexing has been made already</li>\n					<li><!--  -->Use the command &#39;path/to/indexer --config path/to/sphinx_conf/path/for/the/current/searchd index_name --merge Main_index Delta_index --rotate&#39;</li>\n				</ul>\n				</li>\n			</ul>\n			</li>\n			<li><!--   --><span style=\"color:rgb(178, 34, 34)\">Rebuild Delta index for the sample again to avoid duplicated indexes are served by both Main and Delta indexes</span></li>\n			<li><span style=\"color:rgb(178, 34, 34)\"><!--   -->Restart searchd_0 daemon again in order to reload the conf file if</span>\n			<ul>\n				<li>There are newly created sample database indexes to read for new sample</li>\n				<li>The &#39;restart&#39; column value of sphinx_index table is 1</li>\n				<li>Use the following commands to restart searchd_0\n				<ul>\n					<li>&nbsp;&#39;path/to/searchd --config path/to/sphinx_conf/path/for/the/current/searchd --stop&#39;</li>\n					<li>&nbsp;&#39;path/to/searchd --config path/to/sphinx_conf/path/for/the/current/searchd&#39;</li>\n				</ul>\n				</li>\n				<li>Set &#39;restart&#39; column value of sphinx_index table to 0</li>\n			</ul>\n			</li>\n		</ul>\n		</li>\n	</ol>\n	</li>\n</ul>','2016-04-05 22:46:57',0),(186,'Statsit','Sphinx','Sphinx Process Monitoring','<p><!--StartFragment-->The &#39;<strong><span style=\"color:#B22222\">searchd</span></strong>&#39; process is kept monitoring by script &quot;<span style=\"color:#B22222\"><strong>/usr/local/bin/php /shared/statsit/medmon/common/system.monitors.php sphinx searchd </strong></span>&quot; as a root&#39;s crontab in server 117, it actually handles two main tasks as follows:</p>\n\n<ol>\n	<li>Check if any one <span style=\"color:#B22222\">searchd</span> is running or not, if not, reload the <span style=\"color:#B22222\">searchd</span>.</li>\n	<li>Relocate samples to different searchds other than searchd0 by following steps:\n	<ul>\n		<li>Call method <span style=\"color:#B22222\">canSwitchSphSearchDaemons</span>() to check whether there are any active samples(status_type = 0) served by searchd0(searchd_id = 0) in sphinx2.sphinx_index table in server 112\n		<ul>\n			<li>The check only occurs at <span style=\"color:#B22222\">4am on every Sunday</span></li>\n			<li>If there is result, then will do the relocation, otherwise do nothing</li>\n		</ul>\n		</li>\n		<li>Call method <span style=\"color:#B22222\">switchSphSearchDaemons</span>() to relocate the active samples served by searchd0 to other searchd daemons by\n		<ul>\n			<li>Select all matched samples to relocate except the one with the biggest slot_id which will be left to searchd0</li>\n			<li>For all other matched samples, update their searchd_id value to the same one from 1-3 by using function <span style=\"color:#B22222\">rand</span>(1, 3)</li>\n			<li>Then restart searchd0 and the new searchd daemon selected in last step to actually make the matched samples be served by new searchd daemon</li>\n		</ul>\n		</li>\n	</ul>\n	</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><!--EndFragment--></p>','2016-04-05 22:45:35',0),(187,'Statsit','Work-Flow','Influence Score Calculation','<p><strong>How influence score of twitter accounts are evaluated?</strong></p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Cron job</span></strong></p>\n\n<pre>\n<code>#score updates\n*/5 * * * * /usr/local/bin/php /shared/statsit/influencr/influencr.tools.php scoreupdate &gt; /dev/null 2&gt;&amp;1\n*/5 * * * * /usr/local/bin/php /shared/statsit/influencr/influencr.tools.php newhandlescoreupdate &gt; /dev/null 2&gt;&amp;1</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Main Process</span></strong></p>\n\n<p><strong>1.&nbsp;influencr.tools.php</strong></p>\n\n<p><strong>1.1 fetch active set IDs(influencr.sets.php)</strong></p>\n\n<p>Call <span style=\"color:rgb(178, 34, 34)\">InfluencRSettings::getSetsByStatusFirst</span>&nbsp;in influencr.sets.php&nbsp;to launch the configuration of all active ONE sets (status == 2) via following command</p>\n\n<pre>\n<code class=\"language-bash\">#in mongodb\nuse influencers\ndb.influencr_sets.find({status: 2}, {cache: 0}).pretty();</code></pre>\n\n<p><strong>1.2 filter list of influencer usernames to be updated&nbsp;of&nbsp;each set</strong></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">Call the following function(influencrr.tools.php) to update IS</span></p>\n\n<pre>\n<code class=\"language-php\">InfluencRScoreManager::scoreupdate($setId, $function, $hoursOlder);\n//$setid: id of an active ONE set\n//$function:\'influencers\'\n//$hoursolder: 36($argv[1] == \'scoreupdate\') or 720($argv[1] == \'newhandlescoreupdate\')</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1.2.1 filter list of influencer usernames to be updated&nbsp;of&nbsp;each set&nbsp;</span></p>\n\n<ul>\n	<li>construct the api call url to fetch list of influencers based on server parameters\n	<ul>\n		<li>$apiKey = &#39;&#39;adminkey_&#39;&#39; . $setId</li>\n		<li>$count = 200</li>\n		<li>$page = 1, and increase by 1 in each loop</li>\n		<li>example api call:&nbsp;<span style=\"color:rgb(178, 34, 34)\">http://my.statsit.com/one/api/1.0/influencers.json?apikey=adminkey_128&amp;count=200&amp;period=all&amp;page=1</span></li>\n	</ul>\n	</li>\n	<li>filter usernames to do the score update based on following restrictions\n	<ul>\n		<li>check the field &#39;<span style=\"color:rgb(178, 34, 34)\">updated</span>&#39; of each user if this user has been updated over <span style=\"color:rgb(178, 34, 34)\">$hoursOlder</span> long, if so, add this username into the <span style=\"color:rgb(178, 34, 34)\">$toUpdate</span> array</li>\n		<li>Stop the filtering loop if:\n		<ul>\n			<li>There are less than 200 influencers inside a set, i.e. one loop is enough</li>\n			<li>There are more than 150 users inside the <span style=\"color:rgb(178, 34, 34)\">$toUpdate</span> array already</li>\n		</ul>\n		</li>\n	</ul>\n	</li>\n	<li>call the following function (<span style=\"color:rgb(178, 34, 34)\">influencr.score.php</span>) to proceed the IS update process</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">InfluencRJobs::getScores($toUpdate, $setId, TRUE);</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>&nbsp;</p>\n\n<p><strong>2&nbsp;Update the Klout Score&nbsp;(aux.klout.php)</strong></p>\n\n<p>The <strong><span style=\"color:rgb(178, 34, 34)\">Klout&nbsp;score</span></strong> is fetched from Klout(developer.klout.com) api by calling&nbsp;<span style=\"color:rgb(178, 34, 34)\">getScores()</span> inside <span style=\"color:rgb(178, 34, 34)\">aux.klout.php</span></p>\n\n<pre>\n<code class=\"language-php\">AuxKlout::getScores($usernames);\n</code></pre>\n\n<p>This function will fetch klout related data and update against each username in mongoDB as well.</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Klout score is used as a reference score for client, but not affect the final IS of our system.</span></strong></p>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>&nbsp;</p>\n\n<p><strong>3 Fetch user profiles (aux.profiles.php)</strong></p>\n\n<p>Fetch the profiles of usernames via mongoDB by</p>\n\n<pre>\n<code class=\"language-php\">$profiles = ProfilesAdmin::getTwitterProfiles($usernames, \"12 hours ago\");\n</code></pre>\n\n<ul>\n	<li>if the user profile has been updated less than 12 hours ago (the &#39;date&#39; field), then no profile refresh is needed</li>\n	<li>for the usernames which have been updated more than 12 hours, their profiles need to be retrieved from twitter api first, and use&nbsp;<span style=\"color:rgb(178, 34, 34)\"><strong>LocationAnalyzer:detectCountry() </strong></span>to set the country info of the user, and save updated profile <span style=\"color:rgb(178, 34, 34)\">back to mongo</span>.</li>\n</ul>\n\n<p>Lastly, the profiles of the above two steps are merged and returned&nbsp;to <span style=\"color:rgb(178, 34, 34)\"><strong>$profiles</strong></span>, the structure is&nbsp;</p>\n\n<pre>\n<code class=\"language-php\">$expProfiles[$profile[\'handle\']] = $profile;\n</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>&nbsp;</p>\n\n<p><strong>4 Analyze each profile returned above (influencr.score.php)</strong></p>\n\n<p><strong>4.1 create a new&nbsp;<span style=\"color:rgb(178, 34, 34)\">ProfileAnalyzer</span> object for each profile</strong></p>\n\n<pre>\n<code class=\"language-php\">$prof_an = new ProfileAnalyzer();\n</code></pre>\n\n<p><strong>4.2 analyze the each profile via&nbsp;</strong></p>\n\n<pre>\n<code class=\"language-php\">$data = self::_analyze($profile, $setId, $cache, $prof_an);\n//$cache = false</code></pre>\n\n<p><strong>4.3&nbsp;Inside the _analyze(), create a new&nbsp;<span style=\"color:rgb(178, 34, 34)\">TweetsStats</span> object and make sure</strong></p>\n\n<pre>\n<code class=\"language-php\">$tw-&gt;setId = $setId;\n$tw-&gt;username = $username;\n$tw-&gt;profile = $profile;\n//fetch latest 200 tweets of the user\n$tweets = self::_getTweets($username);\n$tw-&gt;tweets = $tweets;\n//themes includes the Passion Points defined inside \"relevantThemeWeights\" of a ONE set defined in\n//self::_getScoreConf() function, only name of PPs is fetched, weight of each is skipped.\n$tw-&gt;categories = $themes;\n//the keywords object will automatically load all PPs names and ids\n$tw-&gt;keywords = new KeyowrdTools();\n$tw-&gt;keywords-&gt;categories = $themes;\n</code></pre>\n\n<p><strong>4.4&nbsp;And call the analyze() inside TweetsStats object</strong></p>\n\n<pre>\n<code class=\"language-php\">//$customBrandFilter and $customBrandFilterBlacklist is the json content defined _getScoreConf() function\n//they are used to catch matched tweets and saved them into \"bm.setid\" field of mongo profile\n$conf = self::_getScoreConf($setID);\n$customFilter = array(\'countBrandMentions\' =&gt; $conf[\'customBrandFilter\']);\n$customNegative = array(\'countBrandMentions\' =&gt; $conf[\'customBrandFilterBlacklist\']);\n$tw-&gt;analyze($customFilter, $customNegative, $prof_an);\n</code></pre>\n\n<p>4.4.1 first, get all keywords of each themed PPs defined in <strong><span style=\"color:rgb(178, 34, 34)\">$category</span></strong> property</p>\n\n<pre>\n<code class=\"language-php\">$tw-&gt;keywords-&gt;loadFilters();\n$tw-&gt;keywords-&gt;filters = $filters;\n//[\'cat_name\'=&gt;\'kw1, kw2,...\', \'cat_name2\'=&gt;...]</code></pre>\n\n<p>4.4.2 get all BRANDS pp&#39;s keywords</p>\n\n<pre>\n<code class=\"language-php\">$brandFilters = ProfileAnalyzer::getFilters(\'BRANDS COUNT\');\n//structured like [\'abbreviation_of_keyword1\'=&gt;\'keyword1_content\', ...]</code></pre>\n\n<p><strong>4.5 analyze tweet one by one</strong></p>\n\n<p>4.5.1 basic info analysis</p>\n\n<ul>\n	<li>check if the tweet is an original tweet or a retweet\n	<ul>\n		<li>if an original tweet, then get <span style=\"color:rgb(178, 34, 34)\">tweet-&gt;retweet_count </span>info</li>\n	</ul>\n	</li>\n	<li>get the user mentioned in the tweet: from <span style=\"color:rgb(178, 34, 34)\">tweet-&gt;entities-&gt;user_mentions</span></li>\n	<li>get links mentioned in the tweet: from&nbsp;<span style=\"color:rgb(178, 34, 34)\">tweet-&gt;entities-&gt;urls</span></li>\n	<li>get hashtags mentioned in the tweet: from&nbsp;<span style=\"color:rgb(178, 34, 34)\">tweet-&gt;entities-&gt;hashtags</span></li>\n	<li>get domain and domain hits info from the urls info got above</li>\n	<li>if the tweet is an orginal tweet with retweets, then do some statistics against retweets.</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">4.5.2&nbsp;get matched count of the tweet against each keywords of each PP loaded at 4.4.1</span></strong></p>\n\n<pre>\n<code class=\"language-php\">$tmpFilterHits = $this-&gt;keywords-&gt;getFilterHits($tweet[\'text\']);\n//inside the function, it will use php mb_ereg_search() to handle the matches count \n//and the returned data structured like [\'cat_name\'=&gt;hits_count1, \'cat_name\'=&gt;hits_count2, ...]</code></pre>\n\n<p>4.5.3&nbsp;filter brand names tagging the current tweet based on the info loaded at 4.4.2</p>\n\n<pre>\n<code class=\"language-php\">//the result is for the current user\n$brandMentions = [\'brandName\'=&gt;\'number of tweets tagged by the brand\', ...]</code></pre>\n\n<p><strong>4.6 other statistics to handle</strong></p>\n\n<ul>\n	<li>calculate tweets per day of the current profile based on the fetched tweets(200 tweets)</li>\n	<li>calculate how many tweets mention the current username(get top 100 tweets by searching&nbsp;@username via twitter api), and only count the tweets posted not by the user himself.</li>\n	<li>and some other info, e.g. followers and friends</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>4.7 set the&nbsp;ProfileAnalyzer object</strong></span></p>\n\n<pre>\n<code class=\"language-php\">$prof_an-&gt;tweetCount\n$prof_an-&gt;tweetsPerDay\n$prof_an-&gt;retweetRate\n$prof_an-&gt;linkRate//urls per tweet\n$prof_an-&gt;mentionRate//user mentioned per tweet\n$prof_an-&gt;brandsRate//brands mentioned per tweet\n$prof_an-&gt;hashtags//top 5 hashtages\n$prof_an-&gt;domains//top 5 domains\n$prof_an-&gt;categories//all themed cats(with hits)tagging the current user\n$prof_an-&gt;brands//top 5 mentioned brands </code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>4.8 save the updated profile back to mongo for the current user, use &#39;datee&#39; field as timestamp, &#39;date&#39; is the timestamp indicating when twitter profile is refreshed</strong></span></p>\n\n<pre>\n<code class=\"language-php\">$prof_an-&gt;save($profile[\'handle\']);\n</code></pre>\n\n<p>Some key points to note:</p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">if the PP&#39;s name with number as the last letter, then the number is removed from the PP&#39;s name. Which might cause some PP value overriden, e.g. we have FOOD and FOOD2, then the one processed later will overwrite the first one.</span></li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>4.9 Calculate and update the Influence Score for the current user</strong></span></p>\n\n<pre>\n<code class=\"language-php\">$score = InfluencRJobs::_calculate($data, $setId, $verbose, $configure, $subScores);\n</code></pre>\n\n<p>Inside this function, call</p>\n\n<pre>\n<code class=\"language-php\">$calc = new InfluencRScore();\n$calc-&gt;conf = new InfluncRScoreConf(self::_getScoreConf($setId));\n$themes = self::_getThemes($setId);\n$calc-&gt;stats = new TweetsStats($themes, $data);\n$calc-&gt;statsRT = new RetweetersStats($data);\n$calc-&gt;_calculate();\n$score = $calc-&gt;score;</code></pre>\n\n<p>And finally save the IS in the field and update in mongo</p>\n\n<pre>\n<code class=\"language-php\">$newObj[\'sc.\' . $setId] = $score;\n</code></pre>','2017-06-16 11:53:02',9),(188,'Linux','Commands','Mount','<p><span style=\"color:rgb(178, 34, 34)\">1. Check mounted devices</span></p>\n\n<pre>\n<code class=\"language-bash\">mount\n#or\ndf -h</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. Mount a device</span></p>\n\n<pre>\n<code class=\"language-bash\">mount path_of_device</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3. Unmount a device</span></p>\n\n<pre>\n<code class=\"language-bash\">umount path_of_device\numount -f path_of_device #do it forcibly\numount -l path_of_device #lazy unmount</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4. Check which process is accessing a mounted device</span></p>\n\n<pre>\n<code>fuser -mu path_of_device\n#fuser: used to identify processes using the files/directories\n#-m: specify directory or device info\n#-u: specify the owner of the process</code></pre>','2016-05-13 19:17:29',4),(189,'Statsit','Work-Flow','ONE','<p><span style=\"color:rgb(178, 34, 34)\"><strong>ONE uses CodeIgniter as the framework.</strong></span></p>\n\n<p>Loading the homepage will go through following URL redirections one by one:</p>\n\n<ul>\n	<li>/dashboard/index</li>\n	<li>/influence</li>\n	<li>/profiles/index</li>\n	<li>/profiles/profiles_list</li>\n</ul>','2016-05-05 12:10:54',0),(190,'Statsit','Influencer','Location Analyzer','<p>Influencer uses twitter user <strong><span style=\"color:rgb(178, 34, 34)\">&#39;location&#39; </span></strong>and<strong><span style=\"color:rgb(178, 34, 34)\"> &#39;time_zone&#39; </span></strong>info as the basic input to decide the location info of an influencer. It calls following function in <strong><span style=\"color:rgb(178, 34, 34)\">aux.geocode.php</span></strong>&nbsp;to do the detection:</p>\n\n<pre>\n<code class=\"language-php\">LocationAnalyzer:detectCountry(location, timezone, true, true);</code></pre>\n\n<p>This is how it works:</p>\n\n<p><strong>1. Check if the user&#39;s &#39;<span style=\"color:rgb(178, 34, 34)\">location</span>&#39; info can match any element inside following array:</strong></p>\n\n<pre>\n<code class=\"language-php\">LocationData::getLocationCountries-&gt;locations;\n//e.g. &#39;southern california &#39; =&gt; &#39;US&#39;,\n</code></pre>\n\n<hr />\n<p><strong>2. If no match is found in step 1, then&nbsp;</strong></p>\n\n<p>2.1 Load following auxiliary array</p>\n\n<pre>\n<code class=\"language-php\">LocationData::$supportedCountries = array(&#39;AE&#39;, &#39;AU&#39;, &#39;BD&#39;, &#39;BH&#39;, &#39;BR&#39;, &#39;CA&#39;, \n&#39;EG&#39;, &#39;ES&#39;, &#39;FR&#39;, &#39;ID&#39;, &#39;IE&#39;, &#39;IL&#39;, &#39;IN&#39;, &#39;IT&#39;, &#39;JO&#39;, &#39;JP&#39;, &#39;KH&#39;, &#39;KR&#39;, &#39;KW&#39;,\n&#39;LB&#39;, &#39;LK&#39;, &#39;MX&#39;, &#39;MY&#39;, &#39;NL&#39;, &#39;NZ&#39;, &#39;OM&#39;, &#39;PH&#39;, &#39;PK&#39;, &#39;PL&#39;, &#39;PT&#39;, &#39;SA&#39;, &#39;SG&#39;, \n&#39;SY&#39;, &#39;TH&#39;, &#39;TR&#39;, &#39;QA&#39;, &#39;UK&#39;, &#39;US&#39;, &#39;UN&#39;);</code></pre>\n\n<p>2.2 Each of the country element in above array is attached to a list of string elements, each of which can redirect to this country element, so if either <span style=\"color:rgb(178, 34, 34)\">&#39;location&#39;</span> or <span style=\"color:rgb(178, 34, 34)\">&#39;timezone&#39;</span> can match any of these strings(inside &#39;white&#39;), then this user belongs to this country element, e.g.</p>\n\n<pre>\n<code class=\"language-php\">case &#39;AU&#39;:\n  $lists = array(\n      	    &#39;white&#39; =&gt; array(&#39;Australia&#39;, &#39;AU&#39;, &#39;Sidney&#39;, &#39;Sydney&#39;),\n       	    &#39;black&#39; =&gt; array(&#39;USA&#39;)\n       	);\nbreak;</code></pre>\n\n<hr />\n<p><strong>2.3. If still no results is given, then use only &#39;timezone&#39; name to decide the location</strong></p>\n\n<p>Check the following array if there is any match:</p>\n\n<pre>\n<code class=\"language-php\">LocationData::getTimeZoneCountries-&gt;timezones;\n//e.g. &#39;beijing&#39; =&gt; &#39;CN&#39;\n</code></pre>\n\n<hr />\n<p><strong>2.4. If still no country is matched, then return FALSE</strong></p>','2017-06-08 15:41:55',0),(191,'PHP','Error Handler','Two Scenarios Of Exception Throw','<p><span style=\"color:rgb(178, 34, 34)\"><strong>NOTICE: A thrown exception catched by runtime itself but not by &#39;try-catch&#39; block will terminate the running of the current script instantly with exception message exported, sounds very similar to die()</strong></span></p>\n\n<p>Let us check the following two snippets to better understand:</p>\n\n<p><strong>1. Thrown exception captured by runtime itself directly</strong></p>\n\n<pre>\n<code class=\"language-php\">$a = 2;\nif($a &lt;= 2){\n  throw new Exception(\'it is not bigger than 2!\');\n}\n//the echo line will not be executed if less if statement throws an exception\necho \"Hello World!\";</code></pre>\n\n<p>The output</p>\n\n<pre>\n<code>Exception: it is not bigger than 2!</code></pre>\n\n<p><strong>2. Thrown exception captured by &#39;try-catch&#39; block</strong></p>\n\n<pre>\n<code class=\"language-php\">$a = 2;\n$b = 3;\nfunction checkGT($v, $b){\n  if($v &lt;= $b){\n    throw new Exception(\'it is not bigger than 2!\');\n    echo \"colorful world!\"; //won\'t be executed\n  }\n}\nfunction checkLT($v, $b){\n  if($v &gt; $b){\n    throw new Exception(\'it is bigger than 2!\');\n    echo \"colorful world!\"; //won\'t be executed\n  }\n}\ntry{\n  checkGT($a, 2);\n  //the checkLT() won\'t be executed if checkLT() throws an Exception\n  checkLT($b, 2);\n}catch(Exception $e){\n  echo \'Custom Exception: \' . $e-&gt;getMessage() . \'&lt;/br&gt;\'; \n}\n//the script following try-catch will still be processed normally\necho \'Hello World\';</code></pre>\n\n<p>The output:</p>\n\n<pre>\n<code class=\"language-bash\">Custom Exception: it is not bigger than 2!\nHello World</code></pre>','2016-09-15 11:20:23',1),(192,'PHP','Session & Cookie','Session Basics','<p><strong>WTF is&nbsp;a PHP Session?&nbsp;</strong></p>\n\n<ul>\n	<li>Session is <span style=\"color:rgb(178, 34, 34)\">a client-specific data stored on server</span></li>\n	<li>It is used to provide <span style=\"color:rgb(178, 34, 34)\">shared info and data among multiple web pages</span> of a site</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">Session ID</span> is used to detect a valid session</li>\n</ul>\n\n<p><strong>How Session works?</strong></p>\n\n<ul>\n	<li>When a session is started, PHP will either retrieve an existing session using the ID passed (<span style=\"color:rgb(178, 34, 34)\">usually from a session cookie</span>) or if no session is passed it will create a new session.</li>\n	<li>PHP will populate the&nbsp;<span style=\"color:rgb(178, 34, 34)\">$_SESSION&nbsp;superglobal</span> with any session data after the session has started.</li>\n	<li>When PHP shuts down, it will automatically take the contents of the&nbsp;$_SESSION&nbsp;superglobal, <span style=\"color:rgb(178, 34, 34)\">serialize it, and send it for storage using the session save handler.</span></li>\n	<li>By default, PHP uses the internal&nbsp;files&nbsp;save handler which is set by&nbsp;session.save_handler. <span style=\"color:rgb(178, 34, 34)\">This saves session data on the server at the location specified by the&nbsp;session.save_path&nbsp;configuration directive</span>.</li>\n	<li>Sessions can be started manually using the&nbsp;<span style=\"color:rgb(178, 34, 34)\">session_start()</span>&nbsp;function</li>\n	<li>\n	<p>Sessions normally shutdown automatically when PHP is finished executing a script, but can be manually shutdown using the&nbsp;<span style=\"color:rgb(178, 34, 34)\">session_write_close()&nbsp;</span>function as well.</p>\n	</li>\n</ul>\n\n<p><strong>Limitation of a Session</strong></p>\n\n<ul>\n	<li>File based sessions (the default in PHP) <span style=\"color:rgb(178, 34, 34)\">lock the session</span> file once a session is opened via&nbsp;session_start()&nbsp;or implicitly via&nbsp;session.auto_start.</li>\n	<li>Once locked, no other script can access the same session file until it has been closed by the first script terminating or calling&nbsp;session_write_close().</li>\n	<li>This is most likely to be an issue on Web sites that use AJAX heavily and have multiple concurrent requests. The easiest way to deal with it is to call&nbsp;session_write_close()&nbsp;as soon as any required changes to the session have been made, preferably early in the script. Alternatively, a different session backend that does support concurrency could be used.</li>\n</ul>','2016-07-13 17:28:49',3),(193,'PHP','Session & Cookie','Session Functions','<pre>\n<span style=\"color:rgb(178, 34, 34)\"><strong>session_destroy()</strong>\n</span></pre>\n\n<ul>\n	<li>destroys all of the data associated with the current session</li>\n	<li>It does not unset any of the global variables associated with the session, or unset the session cookie</li>\n	<li>To use the session variables again,&nbsp;<span style=\"color:rgb(178, 34, 34)\">session_start()&nbsp;</span>has to be called.</li>\n	<li>if you want to kill the session permanently and&nbsp;a cookie is used to propagate the session id (default behavior), then the session cookie must be deleted by&nbsp;<span style=\"color:rgb(178, 34, 34)\">setcookie()</span>.</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<pre>\n<span style=\"color:rgb(178, 34, 34)\"><strong>session_name($name)</strong></span></pre>\n\n<ul>\n	<li>it is used to get or set the name of a session, by default, <span style=\"color:rgb(178, 34, 34)\">PHPSESSID</span> is the session name</li>\n	<li>if <span style=\"color:rgb(178, 34, 34)\">$name</span> is given, it will update the session name and return the old session name.</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">NOTICE</span>:&nbsp;The session name is reset to the default value stored in&nbsp;session.name&nbsp;at request startup time. Thus, you need to call&nbsp;session_name()&nbsp;for every request before&nbsp;session_start()</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<pre>\n<strong><span style=\"color:rgb(178, 34, 34)\">session_start()</span></strong>\n</pre>\n\n<ul>\n	<li>it creates a session or resumes the current one based on a session identifier <span style=\"color:rgb(178, 34, 34)\">passed via a session cookie</span>.&nbsp;</li>\n</ul>','2016-07-13 17:35:04',4),(194,'JQuery','Selector','Locating Elements','<p>Just list some frequently used selectors to locate the element you want to manipulate:</p>\n\n<p><strong><span style=\"color:#B22222\">1. Parents &amp; Parent</span></strong></p>\n\n<p>As their names imply, they are used to selector the parent element(s) of the currently selected element:</p>\n\n<ul>\n	<li>&#39;parents&#39; includes all ancestors</li>\n	<li>&#39;parent&#39; only includes direct parent.</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">$(\'#id\').parents(\'p .class\');\n$(\'#id\').parent();</code></pre>\n\n<p><strong><span style=\"color:#B22222\">2. Find &amp; Children</span></strong></p>\n\n<p>These two are used to locate child elements of the currently selected element:</p>\n\n<ul>\n	<li>&#39;find&#39; will collect all the children&nbsp;elements matching the given selector regardless the levels</li>\n	<li>&#39;children&#39; only locates the direct children elements</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">$(\'ul\').children() // &lt;li&gt;\n$(\'ul\').find(\'a .class\')// &lt;a&gt;</code></pre>','2016-05-05 11:48:18',2),(195,'CSS','Snippets','Wrap Text In Pre','<p>Use the following snippets to wrap the text inside &lt;pre&gt; or &lt;code&gt;&nbsp;elements</p>\n\n<pre>\n<code class=\"language-css\">pre {\n white-space: pre-wrap;       /* css-3 */\n white-space: -moz-pre-wrap;  /* Mozilla, since 1999 */\n white-space: -pre-wrap;      /* Opera 4-6 */\n white-space: -o-pre-wrap;    /* Opera 7 */\n word-wrap: break-word;       /* Internet Explorer 5.5+ */\n}</code></pre>','2016-05-05 12:08:24',9),(196,'MongoDB','Basics','Frequently Used Queries','<h3><strong>Lets assume we have such documents inside a selected collection:</strong></h3>\n\n<pre>\n<code class=\"language-javascript\">db.users.find({}, {_id: 0}).pretty()\n{\n	\"hobbies\" : [\n		\"basketball\",\n		\"movies\",\n		\"technology\",\n		\"Chinese food\"\n	],\n	\"gender\" : \"male\",\n	\"age\" : 33,\n	\"surname\" : \"Kan\",\n	\"lastname\" : \"Cong\",\n	\"education\" : {\n		\"bachelor\" : {\n			\"name\" : \"Sichuan University\",\n			\"date\" : \"2001-2005\"\n		},\n		\"master\" : {\n			\"name\" : \"Lapeenranta University of Technology\",\n			\"date\" : \"2010-2013\"\n		}\n	}\n}\n{\n	\"gender\" : \"male\",\n	\"age\" : 61,\n	\"surname\" : \"Daqiao\",\n	\"lastname\" : \"Cong\"\n}</code></pre>\n\n<h3><strong><span style=\"color:rgb(178, 34, 34)\">1. Direct query based on field values</span></strong></h3>\n\n<ul>\n	<li>String or Numeric fields</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">db.users.find({gender: \'male\'}, {_id:0, surname: 1})\n{ \"surname\" : \"Kan\" }\n{ \"surname\" : \"Daqiao\" }</code></pre>\n\n<ul>\n	<li>Array fields&nbsp;</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">db.users.find({hobbies: \'movies\'}, {_id:0, surname: 1})\n{ \"surname\" : \"Kan\" }\ndb.users.find({hobbies: [\'movies\']}, {_id:0, surname: 1}).count()\n0</code></pre>\n\n<ul>\n	<li>Object fields</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">db.users.find({\'education.bachelor.name\': \'Sichuan University\'}, {_id: 0, surname: 1})\n{ \"surname\" : \"Kan\" }</code></pre>\n\n<h3><strong><span style=\"color:rgb(178, 34, 34)\">2. Query based on Logical Operator</span></strong></h3>\n\n<ul>\n	<li>Exists or not</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">db.users.find({\'education.bachelor\': {$exists: true}}, {_id: 0, surname: 1})\n{ \"surname\" : \"Kan\" }\ndb.users.find({\'education\': {$exists: false}}, {_id: 0, surname: 1})\n{ \"surname\" : \"Daqiao\" }</code></pre>\n\n<ul>\n	<li>Larger or smaller than, equal to: <span style=\"color:rgb(178, 34, 34)\">$gt, $gte, $lt, $lte</span></li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">db.users.find({age: {$gte: 60}}, {_id: 0, surname: 1})\n{ \"surname\" : \"Daqiao\" }\ndb.users.find({age: {$lte: 50}}, {_id: 0, surname: 1})\n{ \"surname\" : \"Kan\" }</code></pre>\n\n<ul>\n	<li>Not equal to: <span style=\"color:rgb(178, 34, 34)\">$ne</span></li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">//not equal to\ndb.users.find({age: {$ne: 45}}, {_id: 0, surname: 1})\n{ \"surname\" : \"Kan\" }\n{ \"surname\" : \"Daqiao\" }</code></pre>\n\n<h3><strong><span style=\"color:rgb(178, 34, 34)\">3. Equal to any or none of a set of predefined values</span></strong></h3>\n\n<ul>\n	<li>\n	<p>Equal to any of the given array of values: <span style=\"color:rgb(178, 34, 34)\">$in</span></p>\n	</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">db.users.find({age: {$in: [12, 33, 45, 61, 85]}}, {_id: 0, surname: 1})\n{ \"surname\" : \"Kan\" }\n{ \"surname\" : \"Daqiao\" }</code></pre>\n\n<ul>\n	<li>Equal to none of the given array of values: <span style=\"color:rgb(178, 34, 34)\">$nin&nbsp;</span></li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">db.users.find({age: {$nin: [12, 45, 61, 85]}}, {_id: 0, surname: 1})\n{ \"surname\" : \"Kan\" }</code></pre>\n\n<h3><strong><span style=\"color:rgb(178, 34, 34)\">&nbsp;4. Check if a field is NULL (different from $exists)</span></strong></h3>\n\n<ul>\n	<li>{$type: 10} means NULL</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">db.users.update({age: 61}, {$set: {education: null}})\ndb.users.find({education: {$type: 10}}, {surname:1, _id:0, education:1}).pretty()\n{ \"surname\" : \"Daqiao\", \"education\" : null }\n</code></pre>\n\n<ul>\n	<li>NULL is considered as {$exists: true}</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">db.users.find({education: {$exists: true}}, {surname:1, _id:0}).pretty()\n{ \"surname\" : \"Kan\" }\n{ \"surname\" : \"Daqiao\" }</code></pre>\n\n<ul>\n	<li>Empty string, array or object are not regarded as NULL&nbsp;</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">db.users.update({age: 61}, {$set: {education: []}})\ndb.users.find({education: {$type: 10}}, {surname:1, _id:0, education:1}).count()\n0\ndb.users.find({education: []}, {surname:1, _id:0, education:1})\n{ \"surname\" : \"Daqiao\", \"education\" : [ ] }</code></pre>\n\n<h3><strong><span style=\"color:rgb(178, 34, 34)\">5. Query based on any of the given expressions: $or</span></strong></h3>\n\n<pre>\n<code class=\"language-javascript\">db.users.find({$or: [{lastname: \'Cong\'},{surname: \'Amy\'}]}, {_id:0, surname:1, lastname:1}).pretty()\n{ \"surname\" : \"Kan\", \"lastname\" : \"Cong\" }\n{ \"surname\" : \"Daqiao\", \"lastname\" : \"Cong\" }\n{ \"surname\" : \"Amy\", \"lastname\" : \"Yang\" }</code></pre>\n\n<h3><strong><span style=\"color:rgb(178, 34, 34)\">6. Update: $set &amp; $unset</span></strong></h3>\n\n<ul>\n	<li>$set</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">db.users.update({age: 61}, {$set: {age: 62}})\ndb.users.find({surname: \'Daqiao\'}, {_id:0, age:1})\n{ \"age\" : 62 }</code></pre>\n\n<ul>\n	<li>$unset&nbsp;</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">db.users.update({age: 62}, {$unset: {education: 1}});\ndb.users.find({surname: \'Daqiao\'}, {_id:0, age:1, education:1})\n{ \"age\" : 62 }</code></pre>\n\n<h3><strong><span style=\"color:rgb(178, 34, 34)\">7. Update: $pull &amp; $push for array field</span></strong></h3>\n\n<ul>\n	<li>$push new values into array field</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">db.users.find({surname: \'Kan\'}, {_id:0, hobbies: 1}).pretty()\n{\n	\"hobbies\" : [\n		\"basketball\",\n		\"movies\",\n		\"technology\",\n		\"Chinese food\"\n	]\n}\ndb.users.update({surname: \'Kan\'}, {$push: {hobbies: \'programming\'}})\ndb.users.find({surname: \'Kan\'}, {_id:0, hobbies: 1}).pretty()\n{\n	\"hobbies\" : [\n		\"basketball\",\n		\"movies\",\n		\"technology\",\n		\"Chinese food\",\n		\"programming\"\n	]\n}</code></pre>\n\n<ul>\n	<li>$pull values out of&nbsp;array field&nbsp;</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">db.users.update({surname: \'Kan\'}, {$pull: {hobbies: {$in: [\'programming\', \'movies\']}}})\ndb.users.find({surname: \'Kan\'}, {_id:0, hobbies: 1}).pretty()\n{ \"hobbies\" : [ \"basketball\", \"technology\", \"Chinese food\" ] }</code></pre>\n\n<h3><span style=\"color:rgb(178, 34, 34)\"><strong>8. Upsert(update if document found, otherwise, create new document)</strong></span></h3>\n\n<pre>\n<code class=\"language-javascript\">db.users.find({surname: \'Amy\'}, {surname: 1, age:1, _id: 0}).count()\n0\ndb.users.update({surname: \'Amy\'}, {$set: {lastname: \'Yang\', age:27}})\ndb.users.find({surname: \'Amy\'}, {surname: 1, age:1, _id: 0}).count()\n0\ndb.users.update({surname: \'Amy\'}, {$set: {lastname: \'Yang\', age:27}}, {upsert: true})\ndb.users.find({surname: \'Amy\'}, {surname: 1, lastname: 1, age:1, _id: 0}).pretty()\n{ \"surname\" : \"Amy\", \"lastname\" : \"Yang\", \"age\" : 27 }</code></pre>\n\n<h3><strong><span style=\"color:rgb(178, 34, 34)\">9. Multi(update all matched documents in a batch)</span></strong></h3>\n\n<pre>\n<code class=\"language-javascript\">db.users.find({}, {surname:1, nationality: 1, _id:0})\n{ \"surname\" : \"Kan\" }\n{ \"surname\" : \"Daqiao\" }\n{ \"surname\" : \"Amy\" }\ndb.users.update({}, {$set: {nationality: \'China\'}})\ndb.users.find({}, {surname:1, nationality: 1, _id:0})\n{ \"surname\" : \"Kan\", \"nationality\" : \"China\" }\n{ \"surname\" : \"Daqiao\" }\n{ \"surname\" : \"Amy\" }\ndb.users.update({nationality: {$exists: false}}, {$set: {nationality: \'China\'}}, {multi: true})\ndb.users.find({}, {surname:1, nationality: 1, _id:0})\n{ \"surname\" : \"Kan\", \"nationality\" : \"China\" }\n{ \"surname\" : \"Daqiao\", \"nationality\" : \"China\" }\n{ \"surname\" : \"Amy\", \"nationality\" : \"China\" }</code></pre>\n\n<h3><strong><span style=\"color:rgb(178, 34, 34)\">10. $Regex</span></strong></h3>\n\n<p>Use $regex to query matched documents based on pattern:</p>\n\n<ul>\n	<li>can use &#39;&#39; or // to wrap the regex pattern</li>\n	<li>option &#39;i&#39; means case insensative</li>\n	<li>optoon &#39;s&#39; means to allow&nbsp;the dot character (i.e.&nbsp;.) to match all characters&nbsp;including newline characters.</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">db.users.find({lastname: {$regex: \'ng\', $options: \'si\'}}, {_id:0, lastname:1})\n{ \"lastname\" : \"Cong\" }\n{ \"lastname\" : \"Cong\" }\n{ \"lastname\" : \"Yang\" }\ndb.users.find({lastname: {$regex: /ng/, $options: \'si\'}}, {_id:0, lastname:1})\n{ \"lastname\" : \"Cong\" }\n{ \"lastname\" : \"Cong\" }\n{ \"lastname\" : \"Yang\" }</code></pre>\n\n<h3><span style=\"color:rgb(178, 34, 34)\"><strong>11. Distinct value</strong></span></h3>\n\n<p>use <span style=\"background-color:rgb(255, 236, 0)\">db.collection.distinct(field, query)</span> to generate an array of distinct values of the given field fitlered by the query</p>\n\n<pre>\n<code class=\"language-javascript\">db.users.distinct(\'lastname\', {nationality: \'China\'})\n[ \"Cong\", \"Yang\" ]</code></pre>\n\n<p><strong><span style=\"color:#B22222\">11. Rename an existing field with a new name</span></strong></p>\n\n<p>use <span style=\"background-color:#FFEC00\">$rename</span> field update operator to achieve so, for example the original fields are as follows</p>\n\n<pre>\n<code class=\"language-json\">{\n	\"handle\" : \"emmakari\",\n	\"tags\" : {\n		\"public\" : {\n			\"party\" : [\n				\"Green League\"\n			],\n			\"gender\" : \"Female\",\n			\"age_group\" : \"25-34\",\n			\"region\" : [\n				\"Uusimaa\"\n			],\n			\"education_level\" : [\n				\"Master\"\n			],\n			\"role\" : {\n				\"State\" : [\n					\"Parliament Member\"\n				]\n			},\n			\"marital_status\" : \"Single\",\n			\"children\" : 0,\n			\"income_level\" : \"70001-80000\"\n		}\n	}\n}\n</code></pre>\n\n<p>Then rename field &#39;income_level&#39; to &#39;annual_income&#39;</p>\n\n<pre>\n<code class=\"language-javascript\">db.twitter.update({handle: \'emmakari\'}, {$rename: {\'tags.public.income_level\': \'tags.public.annual_income\'}})</code></pre>\n\n<p>The final result is:</p>\n\n<pre>\n<code class=\"language-json\">{\n	\"handle\" : \"emmakari\",\n	\"tags\" : {\n		\"public\" : {\n			\"age_group\" : \"25-34\",\n			\"annual_income\" : \"70001-80000\",\n			\"children\" : 0,\n			\"education_level\" : [\n				\"Master\"\n			],\n			\"gender\" : \"Female\",\n			\"marital_status\" : \"Single\",\n			\"party\" : [\n				\"Green League\"\n			],\n			\"region\" : [\n				\"Uusimaa\"\n			],\n			\"role\" : {\n				\"State\" : [\n					\"Parliament Member\"\n				]\n			}\n		}\n	}\n}\n</code></pre>\n\n<p>&nbsp;</p>','2017-05-24 10:31:55',9),(197,'PHP','Multi-bytes','Snippets','<p><strong><span style=\"color:#B22222\">1. Check if a string is UTF-8 encoding</span></strong></p>\n\n<pre>\n<code class=\"language-php\">$a = \'我爱北京天安门\';\necho mb_check_encoding($a, \'UTF-8\');//true\necho \'&lt;br&gt;\';\necho is_utf8($a);//true\n\nfunction is_utf8($str) {\n    return preg_match(\'//u\', $str);\n}\n</code></pre>\n\n<p>&nbsp;</p>','2016-05-09 18:04:05',1),(198,'Linux','Commands','Passwd','<p>How to change user password via terminal</p>\n\n<p><strong><span style=\"color:#B22222\">1. for current user</span></strong></p>\n\n<pre>\n<code>counterall$ passwd\nChanging password for counterall.\nOld Password:\nNew Password:\nRetype New Password:</code></pre>\n\n<p><strong><span style=\"color:#B22222\">2. for any user</span></strong></p>\n\n<pre>\n<code>root$ passwd counterall\nChanging password for counterall.\nNew password:\nRetype new password:</code></pre>\n\n<p><strong><span style=\"color:#B22222\">3. check password&nbsp;status of an user</span></strong></p>\n\n<pre>\n<code>root@ck-demo:~# passwd -S wpdemo\nwpdemo P 06/20/2015 0 99999 7 -1</code></pre>','2016-05-12 19:34:45',0),(199,'PHP','Multi-bytes','Preg_split Vs Mb_split','<p>The main difference is that&nbsp;preg_&nbsp;functions use the&nbsp;<strong><span style=\"color:#B22222\">pcre</span></strong> library, when the&nbsp;mb_ereg_&nbsp;functions (including&nbsp;mb_split) use the&nbsp;<strong><span style=\"color:#B22222\">oniguruma</span></strong> library&nbsp;(used in ruby before the version 2.0).</p>\n\n<p>The main reason is that oniguruma can deal with multiple encodings&nbsp;(ASCII, UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, UTF-32LE, EUC-JP, EUC-TW, EUC-KR, EUC-CN, Shift_JIS, Big5, GB18030, KOI8-R, CP1251, ISO-8859-1, ISO-8859-2, ISO-8859-3, ISO-8859-4, ISO-8859-5, ISO-8859-6, ISO-8859-7, ISO-8859-8, ISO-8859-9, ISO-8859-10, ISO-8859-11, ISO-8859-13, ISO-8859-14, ISO-8859-15, ISO-8859-16)&nbsp;when pcre can&#39;t.</p>\n\n<p>Note that a lot of encodings available for&nbsp;mb_&nbsp;functions like&nbsp;mb_detect_encoding&nbsp;are not in this list (UTF-7, ArmSCII-8, CP866 for example) limiting the relevance of&nbsp;mb_ereg_&nbsp;functions.&nbsp;(Since you need to convert the string to a supported encoding before working on it, and to convert it back after.)</p>\n\n<p>The two regex engines share more or less the same features, nevertheless you can find some differences (not exhaustive, as it comes):</p>\n\n<p>Oniguruma doesn&#39;t support:</p>\n\n<ul>\n	<li>one letter unicode shorthand character classes to be written without curly brackets.&nbsp;Example:&nbsp;pN&nbsp;is seen as&nbsp;pN, you need to write:p{N}</li>\n	<li>the unicode character classes: Xan, Xps, Xsp, Xwd</li>\n	<li>non-escaped square brackets in a character class: Oniguruma see&nbsp;[][]&nbsp;as two empty character classes, when pcre see a character class that contains&nbsp;]&nbsp;and&nbsp;[</li>\n	<li>the&nbsp;K&nbsp;feature</li>\n	<li>the&nbsp;R&nbsp;alias for newline sequences</li>\n	<li>named groups that use the Python syntax&nbsp;(?P&lt;name&gt;...). Only&nbsp;(?&lt;name&gt;...)&nbsp;or&nbsp;(?&#39;name&#39;...)&nbsp;are allowed.</li>\n	<li>group references with something else than the Oniguruma syntax:&nbsp;g&lt;name&gt;&nbsp;(Perl syntax&nbsp;(?&amp;name)&nbsp;and&nbsp;(?1)&nbsp;or&nbsp;(?R)&nbsp;are not allowed).</li>\n	<li>backtracking control verbs</li>\n</ul>\n\n<p>PCRE doesn&#39;t support:</p>\n\n<ul>\n	<li>duplicated named groups (by default). You need to use the&nbsp;(?J)&nbsp;modifier to switch on this feature.</li>\n	<li>numbered back-references with&nbsp;k&lt;...&gt;&nbsp;syntax. You can write&nbsp;k&lt;name&gt;&nbsp;but not&nbsp;k&lt;1&gt;&nbsp;or&nbsp;k&lt;-1&gt;.</li>\n	<li>back-references to a specific nest level. Oniguruma is able to do that using&nbsp;k&lt;name+n&gt;&nbsp;wheren&nbsp;is the nest level.</li>\n</ul>\n\n<p>To match newlines with the dot, Oniguruma uses the&nbsp;m&nbsp;modifier, when PCRE uses the&nbsp;s&nbsp;modifier. In&nbsp;mb_ereg_&nbsp;functions, the dot matches newlines by default. (So the&nbsp;m&nbsp;modifier is on by default).</p>\n\n<p>PCRE uses the&nbsp;s&nbsp;modifier to match newline with the dot. The m modifier behave differently with PCRE, it changes the meaning of&nbsp;^&nbsp;and&nbsp;$&nbsp;anchors from &quot;start&quot; and &quot;end&quot; of the string to &quot;start&quot; and &quot;end&quot; of the line.</p>\n\n<p>With Oniguruma, the meaning of these anchors doesn&#39;t change, they match always the start and end of the line. To match the limit of the string, it uses&nbsp;A&nbsp;and&nbsp;z&nbsp;also available with PCRE.</p>\n\n<p>Note that Oniguruma has been forked to give Onigmo (used in current Ruby versions) that implements more Perl features and syntactic elements, and that is more similar to PCRE</p>','2016-05-16 11:23:55',4),(200,'Linux','Commands','Distro & Kernel','<p><strong><span style=\"color:#B22222\">How to check linux distro and kernel version</span></strong></p>\n\n<p>1. Which Distro you are using</p>\n\n<pre>\n<code>wpdemo$ lsb_release -a\nNo LSB modules are available.\nDistributor ID:	Ubuntu\nDescription:	Ubuntu 14.04.4 LTS\nRelease:	14.04\nCodename:	trusty</code></pre>\n\n<pre>\n<code>wpdemo$ cat /etc/*-release\nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=14.04\nDISTRIB_CODENAME=trusty\nDISTRIB_DESCRIPTION=\"Ubuntu 14.04.4 LTS\"\nNAME=\"Ubuntu\"\nVERSION=\"14.04.4 LTS, Trusty Tahr\"\nID=ubuntu\nID_LIKE=debian\nPRETTY_NAME=\"Ubuntu 14.04.4 LTS\"\nVERSION_ID=\"14.04\"\nHOME_URL=\"http://www.ubuntu.com/\"\nSUPPORT_URL=\"http://help.ubuntu.com/\"\nBUG_REPORT_URL=\"http://bugs.launchpad.net/ubuntu/\"</code></pre>\n\n<p>2. Which Linux kernel you are using</p>\n\n<pre>\n<code>wpdemo$ uname -mrs\nLinux 3.13.0-43-generic x86_64</code></pre>\n\n<p>&nbsp;</p>','2016-05-17 09:37:09',3),(201,'Linux','Firewall','Fail2Ban','<h3><strong>Overview</strong></h3>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">fail2ban</span></strong> is a very easy-to-use tool to read logs to decide which IPs to be banned, e.g.</p>\n\n<ul>\n	<li>ban SSH brutal-force attackers&nbsp;</li>\n	<li>ban apache server attackers</li>\n	<li>.etc</li>\n</ul>\n\n<h3><strong>1. Installation:</strong></h3>\n\n<p>It can be easily installed&nbsp;</p>\n\n<pre>\n<code class=\"language-bash\">sudo apt-get install fail2ban</code></pre>\n\n<h3><strong>2. Configuration</strong></h3>\n\n<p>The configuration folder is under</p>\n\n<pre>\n<code>/etc/fail2ban/</code></pre>\n\n<p>In most of the cases, you will need to check two main configuration files</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>fail2ban.conf</strong></span>: you can change settings of fail2ban application itself, e.g.</p>\n\n<pre>\n<code class=\"language-ini\">[Definition]\nlogtarget = /var/log/fail2ban.log\nsocket = /var/run/fail2ban/fail2ban.sock</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>jail.conf</strong></span>: you can customize the rules of ban in this file,<strong><span style=\"color:rgb(178, 34, 34)\">&nbsp;each jail </span></strong>is a set of ban rules against a service, e.g. SSH, Apache.</p>\n\n<p>General&nbsp;parameters are:</p>\n\n<ul>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">ignoreip</span></strong>:&nbsp;&nbsp;list the ips you want to always allow with whitespace as delimiter</li>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">bantime</span></strong>: &nbsp;defines how long a IP will be banned in seconds</li>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">findtime &amp; maxretry</span></strong>: a&nbsp;host is banned if it has generated &quot;maxretry&quot; connection failures during the last &quot;findtime&quot; seconds.&nbsp;</li>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">enabled</span></strong>: whether or not enable a jail</li>\n</ul>\n\n<p>Jail-specific parameters are, make SSH as an example:</p>\n\n<ul>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">port</span></strong>: set the port used by ssh, you can set it to 22 explicitly or just leave it &#39;ssh&#39; which will be identified automatically</li>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">filter</span></strong>:&nbsp;defines the Regular Expressions to fitler out the suspicious IPs, &#39;sshd&#39; means the filter name included under /etc/fail2ban/filter.d/, for example, sshd.conf</li>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">logpath</span></strong>: defines&nbsp;the original log path which will be scanned to filter out IPs to be banned.</li>\n</ul>\n\n<pre>\n<code class=\"language-ini\"># This is the general setting for all jails\n[DEFAULT]\nignoreip = 127.0.0.1/8\nbantime  = 600\nfindtime = 600\nmaxretry = 3\nenabled  = false\n\n# JAIL part which define the dedicated rules for each services\n[ssh]\nenabled  = true\nport     = ssh\nfilter   = sshd\nlogpath  = /var/log/auth.log\nmaxretry = 6</code></pre>\n\n<p>However, it is recommended to not modify these two files directly, but create two local files in the same path&nbsp;to save your specific settings to overwrite the counterparts in&nbsp;those two original configuration files</p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\"><strong>fail2ban.local</strong></span>: overwrite the fail2ban.conf</li>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">jail.local</span></strong>: overwrite the jail.local</li>\n</ul>\n\n<h3><strong>3. Action</strong></h3>\n\n<ul>\n	<li>An action is a set of commands executed after an IP is chosen to be banned. For example, if a SSH brutal-force attacking IP is filter out based on the rules defined in <strong><span style=\"color:rgb(178, 34, 34)\">jail.local</span></strong>, then it will be added to <strong><span style=\"color:rgb(178, 34, 34)\">iptables</span></strong> as dropped IP.</li>\n	<li>All actions are saved in <span style=\"color:rgb(178, 34, 34)\">/etc/fail2ban/action.d/</span></li>\n</ul>\n\n<h3><strong>4. Launch fail2ban and check status</strong></h3>\n\n<p>fail2ban is registered as a service after installed, so it is easy to start, stop or restart fail2ban</p>\n\n<pre>\n<code class=\"language-bash\">sudo service fail2ban status\nsudo service fail2ban start\nsudo service fail2ban stop\nsudo service fail2ban restart</code></pre>\n\n<p>Use fail2ban-client command to check the running detail of fail2ban,e.g.</p>\n\n<pre>\n<code class=\"language-bash\">sudo fail2ban-client status\nStatus\n|- Number of jail:	1\n`- Jail list:		ssh</code></pre>\n\n<pre>\n<code class=\"language-bash\">sudo fail2ban-client status ssh\nStatus for the jail: ssh\n|- filter\n|  |- File list:	/var/log/auth.log\n|  |- Currently failed:	1\n|  `- Total failed:	481\n`- action\n   |- Currently banned:	54\n   `- Total banned:	54</code></pre>\n\n<h3><strong>5. Unban a banned IP</strong></h3>\n\n<p>Use following command to unban a IP</p>\n\n<pre>\n<code class=\"language-bash\">#ssh is the jail name defined in jail.conf\nsudo fail2ban-client set ssh unbanip ip-address</code></pre>','2016-05-19 18:44:53',5),(202,'JQuery','Objects','$(this) Vs This','<h3><strong>Let us figure out what the difference between <span style=\"color:rgb(178, 34, 34)\">$(this)</span> and <span style=\"color:rgb(178, 34, 34)\">this</span> in JQuery and JavaScript</strong></h3>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">$(selector) or jQuery(selector) </span></strong>will transform the matched elements into jQuery object in order to call jQuery functions.</p>\n\n<pre>\n<code class=\"language-javascript\">console.log(jQuery().constructor);\nfunction ( selector, context ) {\n   return new jQuery.fn.init( selector, context );\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<h3><strong>Assume we have this HTML snippets</strong></h3>\n\n<pre>\n<code class=\"language-html\">&lt;input class=\'showthis\' id=\'showthis\' onclick=\'showthis(this)\' type=\"button\" value=\'click1\'&gt;\n&lt;input class=\'showthis\' onclick=\'showthis(this)\' type=\"button\" value=\'click2\'&gt;</code></pre>\n\n<h3><span style=\"color:rgb(178, 34, 34)\"><strong>1. what is inside a jQuery object</strong></span></h3>\n\n<pre>\n<code class=\"language-javascript\">//#showthis only has one element\nconsole.log(Object.keys($(\'#showthis\')));\n//[\"0\", \"length\", \"context\", \"selector\"]\n\n//.showthis has two elements\nconsole.log(Object.keys($(\'.showthis\')));\n//[\"0\", \"1\", \"length\", \"prevObject\", \"context\", \"selector\"]\n\nconsole.log($(\'#showthis\')[\'context\'].constructor === document.constructor);//TRUE\nconsole.log($(\'#showthis\')[0] === document.getElementById(\'showthis\'));//TRUE</code></pre>\n\n<ul>\n	<li><strong><span style=\"color:#B22222\">numeric string</span></strong>: each Numeric String key indicates a match element of $(selector)</li>\n	<li><strong><span style=\"color:#B22222\">&#39;length&#39;</span></strong>: it shows the count of matched elements</li>\n	<li><strong><span style=\"color:#B22222\">&#39;context&#39;</span>:</strong> usually means the &#39;document&#39; super gloal</li>\n	<li><strong><span style=\"color:#B22222\">&#39;selector&#39;</span></strong>: is the selector used as jQuery parameter</li>\n	<li><strong><span style=\"color:#B22222\">&#39;prevObject&#39;</span></strong>: seems indicates the parent object of current $(selector), for instance.</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">console.log($(\'.showthis\')[\'prevObject\'].constructor);//jQuery()\nconsole.log(Object.keys($(\'.showthis\').eq(0)));\n//[\"0\", \"length\", \"prevObject\", \"context\"]\nconsole.log(Object.keys($(\'.showthis\').eq(0)[\'prevObject\']));\n//[\"0\", \"1\", \"length\", \"prevObject\", \"context\", \"selector\"]\n</code></pre>\n\n<h3><strong><span style=\"color:rgb(178, 34, 34)\">2. $(this) vs this</span></strong></h3>\n\n<ul>\n	<li>Both of them indicates the &#39;this&#39; context, but as mentioned above, $(this) creates a new jQuery instance with &#39;this&#39; as a parameter in order to call jQuery functions on &#39;this&#39;, for instance</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">$(\'.showthis\').on(\'click\', function(){\n    \n    console.log(this === $(this)[0]); // TRUE\n\n    console.log(this.value); //\'click2\'\n    console.log($(this)[0].value);//\'click2\'\n    console.log($(this).val());//\'click2\'\n\n    console.log(this.constructor);//function HTMLInputElement() { [native code] }\n    console.log($(this)[0].constructor);//function HTMLInputElement() { [native code] }\n\n    console.log(Object.keys(this));//[\"jQuery111305696686332882437\"]\n    console.log(Object.keys($(this)));//[\"0\", \"context\", \"length\"]\n);</code></pre>\n\n<pre>\n<code class=\"language-javascript\">function showthis(t){\n    console.log(t.value);//\'click2\'\n}</code></pre>\n\n<p>&nbsp;</p>','2016-06-03 10:18:11',3),(203,'JavaScript','Object-Oriented','Constructor & Prototype: Behind The Scene','<p><em><strong><span style=\"background-color:rgb(255, 236, 0)\">&#39;Constructor&#39;, &#39;Prototype&#39; and OO way of inheritence really make me confused, so let us see what is actually behind the scene based on my testing</span></strong></em></p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">1. What is &#39;Constructor&#39;</span></strong></p>\n\n<ul>\n	<li>&#39;Constructor&#39; is&nbsp;just like the &#39;function __construct(){}&#39; inside a class in&nbsp;PHP.&nbsp;<span style=\"background-color:rgb(122, 255, 145)\">In other words,&nbsp;the Constructor, essentially, is a <strong><em>Function object</em></strong> in JS.</span></li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">//Object.constructor() shows the parent &#39;class&#39; of the Object\n\nvar myString = &#39;hello&#39;;\nconsole.log(myString.constructor);//function String() { [native code] }\n\nvar myNumber = 10;\nconsole.log(myNumber.constructor);//function Number() { [native code] }\n\nvar myArray = [1,2,3];\nconsole.log(myArray.constructor);//function Array() { [native code] }\n\nvar myBoolean = true;\nconsole.log(myBoolean.constructor);//function Boolean() { [native code] }\n\nvar myfunc1 = function(){};\nconsole.log(myfunc1.constructor);//function Function() { [native code] }</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. What is &#39;Prototype&#39;</span></strong></p>\n\n<ul>\n	<li>&#39;Prototype&#39; is a predefined property of a constructor&nbsp;function object, <span style=\"background-color:rgb(255, 236, 0)\">other type of objects do not have this property</span></li>\n	<li><span style=\"background-color:rgb(23, 174, 240)\">It can be considered to represent&nbsp;the rest of the part inside a standard class(e.g. in PHP) except the __construct() which is manually and explicitly defined inside the constructor function itself</span></li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">function myfunc2 (){}\nconsole.log(myfunc2.prototype);//[object Object] { ... }\n\nvar myString = &#39;hello&#39;;\nconsole.log(myString.prototype);//undefined\n\nvar myNumber = 10;\nconsole.log(myNumber.prototype);//undefined\n\nvar myArray = [1,2,3];\nconsole.log(myArray.prototype);//undefined\n\nvar myBoolean = true;\nconsole.log(myBoolean.prototype);//undefined\n</code></pre>\n\n<ul>\n	<li>for the non-functiob objects, you can use<strong><em><span style=\"background-color:rgb(122, 255, 145)\"> Object.getPrototypeOf(obj) </span></em></strong>to find out the prototype used to create&nbsp;the object, e.g.</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">function ParentClass2(){\n  this.color = &#39;red&#39;;\n}\nParentClass2.prototype.mood = &#39;Happy&#39;;\nvar child1 = new ParentClass2();\nconsole.log(child1);\n/*\n[object Object] {\n  color: &quot;red&quot;,\n  mood: &quot;Happy&quot;\n}\n*/\nconsole.log(child1.prototype);//undefined\nconsole.log(Object.getPrototypeOf(child1));\n/*\n[object Object] {\n  mood: &quot;Happy&quot;\n}\n*/\nconsole.log(Object.getPrototypeOf(child1).constructor);\n/*\nfunction ParentClass2(){\nthis.color = &#39;red&#39;;\n}\n*/</code></pre>\n\n<ul>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">&#39;Prototype&#39; itself is a standard JS object, and by default it is empty</span></li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">function myfunc2 (){\n  var a = &#39;hello&#39;;\n}\nconsole.log(myfunc2.prototype);//[object Object] { ... }\nmyfunc2.prototype.color = &#39;yellow&#39;;\nconsole.log(myfunc2.prototype);\n/*\n[object Object] {\n  color: &quot;yellow&quot;\n}\n*/</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. The &#39;Constructor&#39; of &#39;Prototype&#39; is the constructor function owns the &#39;Prototype&#39; property</span></strong></p>\n\n<pre>\n<code class=\"language-javascript\">function myfunc2(){\n  var a = &#39;hello&#39;;\n}\nconsole.log(myfunc2.prototype.constructor);\n/*\nfunction myfunc2(){\n  var a = &#39;hello&#39;;\n}\n*/\n</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>4. How &#39;Constructor&#39; and its &#39;Prototype&#39; work together to influence the content of child object&nbsp;spawned from the constructor function</strong></span></p>\n\n<p>Assume we have a constructor function as follows:</p>\n\n<pre>\n<code class=\"language-javascript\">var myfunc1 = function(){\n  var text1 = &#39;happy&#39;;\n  var print = function(txt){\n    console.log(&#39;I love &#39; + txt + &#39;!&#39;);\n  };\n  this.food = &#39;beef&#39;;\n  this.drink = &#39;cola&#39;;\n  this.call1 = function(){\n    return this.food;\n  };\n  this.call2 = function(){\n    console.log(text1);\n  };\n  this.call3 = function(){\n    print.call(this, this.drink);\n  };\n};</code></pre>\n\n<ul>\n	<li><span style=\"background-color:rgb(255, 236, 0)\">all the properties or methods starting with &#39;this.&#39; context inside constructor function&#39;s curly brackets&nbsp;will be inherited automatically by child objects</span></li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">var myfunc3 = new myfunc1();\nconsole.log(myfunc3);\n/*\n[object Object] {\n  call1: function (){\n    return this.food;\n  },\n  call2: function (){\n    return text1;\n  },\n  drink: &quot;cola&quot;,\n  food: &quot;beef&quot;\n}\n*/</code></pre>\n\n<ul>\n	<li><span style=\"background-color:rgb(255, 236, 0)\">all the properties and methods defined in constructor&#39;s prototype property will be inherited automatically by all child objects</span></li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">myfunc1.prototype.color = &#39;red&#39;;\nconsole.log(myfunc3);\n/*\n[object Object] {\n  call1: function (){\n    return this.food;\n  },\n  call2: function (){\n    return text1;\n  },\n  color: &quot;red&quot;,\n  drink: &quot;cola&quot;,\n  food: &quot;beef&quot;\n}\n*/</code></pre>\n\n<ul>\n	<li>Of course it is free to attach new properties and methods to&nbsp;child objects after they&nbsp;are created, but these new entities are child-object-exclusive and&nbsp;won&#39;t affect other sibling objects or the parent constructor</li>\n	<li>In order to add new properties and methods into the constructor function itself&nbsp;to influence&nbsp;all child objects, there are two ways​\n	<ul>\n		<li><span style=\"background-color:rgb(122, 255, 145)\">Modify the &#39;prototype&#39; property of the constructor function</span></li>\n		<li><span style=\"background-color:rgb(255, 236, 0)\">​</span><span style=\"background-color:rgb(255, 236, 0)\">​</span><span style=\"background-color:rgb(255, 236, 0)\">​Mo</span><span style=\"background-color:rgb(255, 236, 0)\">dify the content of constructor function itself</span></li>\n	</ul>\n	</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">myfunc1 = function(){\n  var text1 = &#39;happy&#39;;\n  this.food = &#39;beef&#39;;\n  this.drink = &#39;cola&#39;;\n  this.weather = &#39;cloudy&#39;;//new property\n  this.call1 = function(){\n    return this.food;\n  };\n  this.call2 = function(){\n    return text1;\n  };\n};\n\nconsole.log(myfunc3);\n/*\n[object Object] {\n  call1: function (){\n    return this.food;\n  },\n  call2: function (){\n    return text1;\n  },\n  color: &quot;red&quot;,\n  drink: &quot;cola&quot;,\n  food: &quot;beef&quot;,\n  weather: &quot;cloudy&quot;\n}\n*/</code></pre>\n\n<ul>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">If entity with the same name defined inside constructor function&#39;s curly brackets&nbsp;and &#39;prototype&#39; property, then the one inside &#39;prototype&#39; property will be ignored</span></li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">myfunc1.prototype.food = &#39;chicken&#39;;\nconsole.log(myfunc3.food);//still &#39;beef&#39;</code></pre>\n\n<ul>\n	<li><span style=\"background-color:rgb(255, 236, 0)\">Entities defined without &#39;this.&#39; prefix inside constructor curly brackets are similar to the &#39;static&#39; property or methods inside PHP class, they can be invoked <strong><em>by children object&#39;s own methods</em></strong>&nbsp;as well, e.g.&nbsp;</span></li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">myfunc3.call2();//&#39;happy&#39;\nmyfunc3.call3();//&#39;I love cola!&#39;\n</code></pre>','2016-05-30 11:12:26',8),(204,'JavaScript','Object-Oriented','Define A Property: Behind The Scene','<p>We all know it is very straightforward to define JS object&#39;s properties in terms of syntax, e.g.</p>\n\n<pre>\n<code class=\"language-javascript\">var obj = {\n   prop1: \'Hello\'\n};\n\nobj.prop2 = \' World!\';\nobj.prop3 = function(){\n  console.log(this.prop1 + this.prop2);\n};\n\nobj.prop3();// \'Hello World!\'</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong><em>However, this only shows the surface of the property definition process, so let us check what is behind the scene to learn how to control the property in advanced way.</em></strong></span></p>\n\n<h3><span style=\"background-color:#7AFF91\"><strong>Object.defineProperty(obj, prop, descriptor)&nbsp;</strong></span></h3>\n\n<p><strong>This is the method used to&nbsp;create new object properties behind the scene, and it has three parameters</strong></p>\n\n<ul>\n	<li><em><span style=\"background-color:rgb(122, 255, 145)\"><strong>obj(Object)</strong></span></em>: this is the target object where you want to attach new property.</li>\n	<li><em><span style=\"background-color:rgb(122, 255, 145)\"><strong>prop(String)</strong></span></em>: this is the name of the new property</li>\n	<li><span style=\"background-color:rgb(122, 255, 145)\"><em><strong>descriptor(Object)</strong></em></span>: this is the object saving the parameters describing the new property</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Descriptor</span></strong></p>\n\n<p>Descriptor is an object including&nbsp;key-value paris to define a property, and it has mainly two types:</p>\n\n<ul>\n	<li><strong><em><span style=\"background-color:rgb(255, 236, 0)\">Data descriptor</span></em></strong>: it is&nbsp;used to define the data info of a&nbsp;property, e.g. the value of the property, if the property is a constant or&nbsp;can be modified</li>\n	<li><span style=\"background-color:rgb(255, 236, 0)\"><strong><em>Accessor descriptor</em></strong></span>: it is used to give&nbsp;&#39;setter&#39; and &#39;getter&#39; functions to customize the way of getting or setting the property</li>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">NOTE: these two type of descriptors cannot be used simultaneously when creating a new property, you have to select only one of them to use.</span></strong></li>\n</ul>\n\n<p>Following description is quoted from <span style=\"background-color:rgb(122, 255, 145)\">Mozilla Foundation</span>:</p>\n\n<blockquote>\n<p><span style=\"background-color:rgb(255, 236, 0)\">Both data and accessor descriptors are objects. They share the following required keys:</span></p>\n\n<p><code>1.<span style=\"color:rgb(178, 34, 34)\"><strong>configurable</strong></span>:&nbsp;</code>whether the property can be deleted from the object and whether its attributes (other than&nbsp;<code>writable</code>) can be changed.&nbsp;<strong>Defaults to&nbsp;<code>false</code>.</strong></p>\n\n<p><code>2.<span style=\"color:rgb(178, 34, 34)\"><strong>enumerable</strong></span>:&nbsp;</code>whether the property shows up in a &#39;<code>for...in&#39;&nbsp;</code>loop and&nbsp;<code>Object.keys()</code>&nbsp;or not.&nbsp;<strong>Defaults to&nbsp;<code>false</code>.</strong></p>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">A data descriptor also has the following optional keys:</span></p>\n\n<p><code>1.<span style=\"color:rgb(178, 34, 34)\"><strong>value</strong></span>:&nbsp;</code>The value associated with the property. Can be any valid JavaScript value (number, object, function, etc).&nbsp;<strong>Defaults to undefined.</strong></p>\n\n<p><code>2.<strong><span style=\"color:rgb(178, 34, 34)\">writable</span></strong>:&nbsp;true</code>&nbsp;if and only if the value associated with the property may be changed with an&nbsp;assignment<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators\" style=\"margin-bottom: 5px;\" title=\"An assignment operator assigns a value to its left operand based on the value of its right operand.\"> </a>operator.&nbsp;<strong>Defaults to&nbsp;<code>false</code>.</strong></p>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">An accessor descriptor also has the following optional keys:</span></p>\n\n<p><code>1.<strong><span style=\"color:rgb(178, 34, 34)\">get</span></strong>:&nbsp;</code>A function which serves as a getter for the property, or&nbsp;<code>undefined</code>&nbsp;if there is no getter. The function return will be used as the value of property.&nbsp;<strong>Defaults to&nbsp;<code>undefined</code>.</strong></p>\n\n<p><code>2.<strong><span style=\"color:rgb(178, 34, 34)\">set</span></strong>:&nbsp;</code>A function which serves as a setter for the property, or&nbsp;<code>undefined</code>&nbsp;if there is no setter. The function will receive as only argument the new value being assigned to the property. &nbsp;<strong>Defaults to&nbsp;<code>undefined</code>.</strong></p>\n</blockquote>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Create a new property</span></strong></p>\n\n<pre>\n<code class=\"language-javascript\">var o = {};\n\no.a = 1;\n// is equivalent to:\nObject.defineProperty(o, \'a\', {\n  value: 1,\n  writable: true,\n  configurable: true,\n  enumerable: true\n});\n\n\n// On the other hand,\nObject.defineProperty(o, \'a\', { value: 1 });\n// is equivalent to:\nObject.defineProperty(o, \'a\', {\n  value: 1,\n  writable: false,\n  configurable: false,\n  enumerable: false\n});</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. Setter and Getter</span></strong></p>\n\n<pre>\n<code class=\"language-javascript\">function Archiver() {\n  var farenheitTemp = null;\n  var farenheitArchive = [];\n\n  Object.defineProperty(this, \'celciusTemp\', {\n    get: function() {\n      return farenheitTemp - 32;\n    },\n    set: function(value) {\n      farenheitTemp = value + 32;\n      farenheitArchive.push(farenheitTemp);\n    },\n    enumerable: true\n  });\n\n  this.getFarenheitArchive = function() { return farenheitArchive; };\n}\n\nvar arc = new Archiver();\narc.celciusTemp = 15;\narc.celciusTemp = 23;\nconsole.log(arc.celciusTemp);//23\nconsole.log(arc.getFarenheitArchive());//[47, 55]\nconsole.log(arc);\n/*\n[object Object] {\n  celciusTemp: 23,\n  getFarenheitArchive: function () { return farenheitArchive; }\n}\n*/</code></pre>','2016-06-19 12:31:14',3),(205,'Linux','Concept','Swapping','<p><span style=\"background-color:rgb(255, 236, 0)\">The following description is quoted from&nbsp;https://www.linux.com/news/all-about-linux-swap-space :&nbsp;</span></p>\n\n<blockquote>\n<ul>\n	<li>Linux divides its physical RAM (random access memory) into chucks of memory called pages. Swapping is the process whereby a page of memory is copied to the preconfigured space on the hard disk, called swap space, to free up that page of memory. The combined sizes of the physical memory and the swap space is the amount of virtual memory available.</li>\n	<li>Swapping is necessary for two important reasons. First, when the system requires more memory than is physically available, the kernel swaps out less used pages and gives memory to the current application (process) that needs the memory immediately. Second, a significant number of the pages used by an application during its startup phase may only be used for initialization and then never used again. The system can swap out those pages and free the memory for other applications or even for the disk cache.</li>\n	<li>However, swapping does have a downside. Compared to memory, disks are very slow. Memory speeds can be measured in nanoseconds, while disks are measured in milliseconds, so accessing the disk can be tens of thousands times slower than accessing physical memory. The more swapping that occurs, the slower your system will be. Sometimes excessive swapping or thrashing occurs where a page is swapped out and then very soon swapped in and then swapped out again and so on. In such situations the system is struggling to find free memory and keep applications running at the same time. In this case only adding more RAM will help.</li>\n	<li>Linux has two forms of swap space: the swap partition and the swap file. The swap partition is an independent section of the hard disk used solely for swapping; no other files can reside there. The swap file is a special file in the filesystem that resides amongst your system and data files.</li>\n</ul>\n</blockquote>','2016-05-31 11:42:44',0),(206,'Why Why Why','CSS','Why Put CSS Inside \'head\' Section','<h3><strong><span style=\"color:rgb(178, 34, 34)\">It is very common that we put &lt;link&gt; or &lt;style&gt; into &lt;head&gt; section, but why is that behind the scene?</span></strong></h3>\n\n<ul>\n	<li>\n	<p>Mostly important, is to avoid unecessary&nbsp;page re-rendering, for example, displayed elements have to be rendered over again after parsing style declared after the elements</p>\n	</li>\n</ul>\n\n<pre>\n<code class=\"language-html\">&lt;body&gt;\n &lt;div class=&#39;colorful&#39;&gt;A beautiful rainbow!&lt;/div&gt;\n &lt;style&gt;\n   /*when parsing this style, the .colorful class div has to be re-rendered*/\n   .colorful{\n     font-size: 1.5em;\n     color: whitesmoke;\n     text-align: center;\n     margin: 10px;\n   }\n &lt;/style&gt;\n&lt;/body&gt;\n</code></pre>\n\n<ul>\n	<li>Additionally, having style defined before &lt;body&gt; can render the &lt;body&gt; content when it is still being&nbsp;loaded, e.g. the background color of the whole page</li>\n</ul>','2016-05-31 22:01:41',0),(207,'Apache','Commands','Dump Parsed Virtual Hosts And Run Settings','<h3><strong><span style=\"color:#B22222\">List all the virtual hosts supported by the Apache server:</span></strong></h3>\n\n<ul>\n	<li>first find the path of executables <span style=\"background-color:rgb(255, 118, 131)\">&#39;httpd&#39; or &#39;apache2&#39; or &#39;apachectl&#39;(according to linux distro)</span></li>\n	<li>then use run the executables with parameters as follows</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">counterall$ ./apachectl -t -D DUMP_VHOSTS\nVirtualHost configuration:\n*:80                   is a NameVirtualHost\n         default server localhost (/Applications/XAMPP/xamppfiles/etc/extra/httpd-vhosts.conf:26)\n         port 80 namevhost localhost (/Applications/XAMPP/xamppfiles/etc/extra/httpd-vhosts.conf:26)\n         port 80 namevhost one-drive.io (/Applications/XAMPP/xamppfiles/etc/extra/httpd-vhosts.conf:37)\n                 alias www.one-drive.io\n         port 80 namevhost desktop.io (/Applications/XAMPP/xamppfiles/etc/extra/httpd-vhosts.conf:51)\n                 alias www.desktop.io</code></pre>\n\n<h3><strong><span style=\"color:#B22222\">&nbsp;List running settings of Apache</span></strong></h3>\n\n<ul>\n	<li>first find the path of executables <span style=\"background-color:rgb(255, 118, 131)\">&#39;httpd&#39; or &#39;apache2&#39; or &#39;apachectl&#39;(according to linux distro)</span></li>\n	<li>then use run the executables with parameters as follows</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">./apachectl -t -D DUMP_RUN_CFG\nServerRoot: \"/Applications/XAMPP/xamppfiles\"\nMain DocumentRoot: \"/Applications/XAMPP/xamppfiles/htdocs\"\nMain ErrorLog: \"/Applications/XAMPP/xamppfiles/logs/error_log\"\nMutex rewrite-map: using_defaults\nMutex authdigest-client: using_defaults\nMutex ssl-stapling: using_defaults\nMutex ldap-cache: using_defaults\nMutex proxy: using_defaults\nMutex ssl-cache: using_defaults\nMutex authn-socache: using_defaults\nMutex default: dir=\"/Applications/XAMPP/xamppfiles/logs/\" mechanism=default\nMutex mpm-accept: using_defaults\nMutex authdigest-opaque: using_defaults\nMutex proxy-balancer-shm: using_defaults\nPidFile: \"/Applications/XAMPP/xamppfiles/logs/httpd.pid\"\nDefine: DUMP_RUN_CFG\nDefine: MODPERL2\nUser: name=\"counterall\" id=501 not_used\nGroup: name=\"daemon\" id=1 not_used</code></pre>\n\n<h3><strong><span style=\"color:#B22222\">NOTE: .&quot;/apachectl -S&quot; equals to the combination of the above two commands.</span></strong></h3>','2016-06-13 11:23:48',0),(208,'Apache','Basics','Performance Optimization','<h3><strong><span style=\"color:rgb(178, 34, 34)\">Why Server Got Slow?</span></strong></h3>\n\n<blockquote>\n<p style=\"margin-left:40px\">&quot;The single biggest hardware issue affecting webserver performance is RAM. <span style=\"background-color:rgb(255, 236, 0)\">A webserver should never ever have to swap</span>, as swapping increases the latency of each request beyond a point that users consider &quot;fast enough&quot;. This causes users to hit stop and reload, further increasing the load. You can, and should, <span style=\"background-color:rgb(122, 255, 145)\">control the&nbsp;<code>MaxClients</code>&nbsp;setting so that your server does not spawn so many children that it starts swapping</span>. The procedure for doing this is simple: determine the size of your average Apache process, by looking at your process list via a tool such as&nbsp;<code>top</code>, and divide this into your total available memory, leaving some room for other processes.&quot; - Apache</p>\n</blockquote>\n\n<h3><strong><span style=\"color:rgb(178, 34, 34)\">Make Amazon EC2 server as an example:</span></strong></h3>\n\n<p>1. Run <span style=\"background-color:white\">top</span>&nbsp;command to display a list of memory-resident processes on the instance. <span style=\"background-color:rgb(255, 236, 0)\">Sort the list in descending order by percentage of memory used</span>.</p>\n\n<ul>\n	<li>To sort on an rpm-based instance, press&nbsp;<span style=\"background-color:rgb(255, 118, 131)\">Shift+O&nbsp;and then press&nbsp;n</span>.</li>\n	<li>On Ubuntu, press <span style=\"background-color:rgb(255, 118, 131)\">Shift-F </span>and follow the instruction prompted.</li>\n</ul>\n\n<p>2. Scan the column of %MEM values returned for Apache processes and discern an average value. E.g</p>\n\n<pre>\n<code class=\"language-bash\">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n15141 apache    20   0  418m  85m 5200 S  0.0  8.6   0:36.92 httpd\n15138 apache    20   0  416m  84m 5176 S  0.0  8.5   0:35.87 httpd\n21629 apache    20   0  414m  84m 6712 S  0.0  8.5   0:05.72 httpd\n21427 apache    20   0  407m  83m 4160 S  0.0  8.4   0:05.75 httpd</code></pre>\n\n<p>3. If one or more Apache processes has an unusually large %MEM value compared to the %MEM value of other Apache processes, <span style=\"background-color:rgb(122, 255, 145)\">there could be a memory leak</span> in a web application running on the server. To mitigate the impact of a potential memory leak, you can change the default value for the configuration variable&nbsp;<span style=\"background-color:rgb(122, 255, 145)\">MaxRequestsPerChild&nbsp;(or&nbsp;MaxConnectionsPerChild&nbsp;on Apache 2.4) from 4000 to 1000</span>. This configuration value is set in the httpd.conf file for the instance. This change should provide some relief for the problem until the source of the memory leak can be identified and addressed.&nbsp;</p>\n\n<p>4. Calculate a value for the&nbsp;ServerLimit&nbsp;and&nbsp;MaxClients&nbsp;(or&nbsp;MaxRequestWorkers&nbsp;on Apache 2.4) configuration variables as follows:<br />\n&nbsp;&nbsp;&nbsp;&nbsp; a. If your instance has more than 4 GB of RAM, divide the average %MEM value for Apache processes<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; into 90%. For example, given an average %MEM value of 0.8%, divide 90% (.9) by 0.8% (.008) for a<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result of 112.5, and round down to the nearest whole number, 112 in this case.<br />\n&nbsp;&nbsp;&nbsp;&nbsp; b. If your instance has 4 GB of RAM or less, divide the average %MEM value for Apache processes into<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 80%. For example, given an average %MEM value of 0.8%, divide 80% (.8) by 0.8% (.008) for a<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result of 100.<br />\nNote<br />\nThese values are calculated with the assumption that the instance is a dedicated web server. If you are hosting other applications on the server, subtract the total percentage memory use of these applications from either 90% or 80% before doing the calculation. Performance might decrease if you run other applications in addition to Apache on an instance with 4 GB of RAM or less.</p>\n\n<p>5. Update the&nbsp;MaxClients&nbsp;(or&nbsp;MaxRequestWorkers) and&nbsp;ServerLimit&nbsp;configuration variables in the instance httpd.conf file with the new value and save your changes. For example:</p>\n\n<pre>\n<code class=\"language-bash\">MaxClients = 112\nServerLimit = 112</code></pre>\n\n<p>6. Restart the web server by running the following command from a terminal session:</p>\n\n<pre>\n<code class=\"language-bash\">service httpd graceful</code></pre>','2016-06-13 12:05:44',1),(209,'Statsit','ONE Admin','Add Influencer Via UI','<p><strong>From &#39;<span style=\"color:rgb(178, 34, 34)\">Add Influencers</span>&#39; link on ONE set admin panel, influencers can be manully added to influencer set(mongoDB) and panel sample(MySQL) at same time, and there are three options to choose:</strong></p>\n\n<p>1. <span style=\"color:rgb(178, 34, 34)\">Add explicitly given user names</span></p>\n\n<p>2. <span style=\"color:rgb(178, 34, 34)\">Add all distinct user names from an existing panel sample</span></p>\n\n<p>3. <span style=\"color:rgb(178, 34, 34)\">Filter usernames from an existing keywords sample by using PP&nbsp;keywords defined in the current&nbsp;ONE set, and add matching usernames into influencer set and panel sample.</span></p>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><strong>When adding usernames, following tasks will be handled:</strong></p>\n\n<p>1. if an username already exists&nbsp;on mongo with the current setID, then abandon this username, <span style=\"background-color:rgb(122, 255, 145)\">all the valid usernames left will continue the following steps</span></p>\n\n<p>2. then add&nbsp;usernames with the setID into mongo:</p>\n\n<ul>\n	<li>if username exists, then only insert the setID into the &#39;set&#39; field</li>\n	<li>if username does not exist, then insert a new document with username and &#39;set&#39; field filled by the setID.</li>\n</ul>\n\n<p>3. then add all usernames for the panel sample with &#39;list_id&#39; (panelID) and &#39;username&#39; fields defined, already existed usernames will be skiped.</p>\n\n<p>4. Update &#39;user_id&#39; field&nbsp;for the newly added usernames for the panel sample</p>\n\n<p>5. Scrape the latest 200 tweets of each of the newly added usernames into panel sample</p>','2016-06-16 15:27:50',0),(210,'PHP','Super Globals','$_POST & $_GET','<p><strong><span style=\"color:rgb(178, 34, 34)\">Trick 1: Make an element of $_POST or $_GET to be an Array</span></strong></p>\n\n<ul>\n	<li>we can categorise input elements, after submiting,&nbsp;each category will be an array in $_POST or $_GET, and this category array will structure like this [&#39;input1_key&#39; =&gt; &#39;&#39;input1_value&#39;, &#39;input2_key&#39; =&gt; &#39;&#39;input2_value&#39; ...]</li>\n	<li>the &#39;input_key&#39; inside category array can be numeric or string. <span style=\"background-color:rgb(255, 236, 0)\">Do not add quotes around the string key</span>,&nbsp;&nbsp;e.g.</li>\n</ul>\n\n<pre>\n<code class=\"language-html\">&lt;input type=&quot;text&quot; name=&quot;input[]&quot; id=&#39;input-1&#39;&gt;&lt;br&gt;\n&lt;input type=&quot;text&quot; name=&quot;input[key]&quot; id=&#39;input-2&#39;&gt;&lt;br&gt;</code></pre>\n\n<p>Let us check a live example:</p>\n\n<pre>\n<code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n	&lt;title&gt;Learn Post Global&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;form method=&quot;post&quot; action=&quot;&quot;&gt;\n\n	&lt;input type=&quot;text&quot; name=&quot;input[]&quot; value=&#39;Kan&#39;&gt;&lt;br&gt;\n	&lt;input type=&quot;text&quot; name=&quot;input[]&quot; value=&#39;Cong&#39;&gt;&lt;br&gt;\n	&lt;input type=&quot;text&quot; name=&quot;input[gender]&quot; value=&#39;Male&#39;&gt;&lt;br&gt;\n	&lt;input type=&quot;text&quot; name=&quot;input[age]&quot; value=&#39;33&#39;&gt;&lt;br&gt;\n	&lt;button type=&quot;submit&quot;&gt;Show Post Global&lt;/button&gt;\n\n&lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<pre>\n<code class=\"language-php\">&lt;?php \n\nif (count($_POST) &gt; 0) {\n  echo &#39;&lt;pre&gt;&#39;;\n  var_dump($_POST);\n  echo &#39;&lt;/pre&gt;&#39;;\n}\n\n?&gt;</code></pre>\n\n<p>Then, we will get $_POST like this</p>\n\n<pre>\n<code class=\"language-php\">array(1) {\n  [&quot;input&quot;]=&gt;\n  array(4) {\n    [0]=&gt;\n    string(3) &quot;Kan&quot;\n    [1]=&gt;\n    string(4) &quot;Cong&quot;\n    [&quot;gender&quot;]=&gt;\n    string(4) &quot;Male&quot;\n    [&quot;age&quot;]=&gt;\n    string(2) &quot;33&quot;\n  }\n}</code></pre>\n\n<p>&nbsp;</p>','2016-06-16 18:12:35',1),(211,'API','Twitter','Geotagging','<p>I have played around geotagging feature via Twitter API for a while, there are two scenarios when user agrees to share location when posting,&nbsp;</p>\n\n<p>1. user allows the precise coordinate to be shared, then &lsquo;coordinate&rsquo; and &lsquo;place&rsquo; fields of the tweet will be filled</p>\n\n<p>2. user allows the rough location without precise coordinate, then only &lsquo;place&rsquo; field of the tweet will be filled.</p>\n\n<hr />\n<p>And Twitter uses the following logic to query tweets according to given geocode(a bounding box)</p>\n\n<p>1. if &lsquo;coordinate&rsquo; field of a tweet exists, then check if it matches the bounding box</p>\n\n<p>2. if &lsquo;coordinate&rsquo; field does not exist but &lsquo;place&rsquo; field exists, then check if the coordinate info inside &lsquo;place&rsquo; field matches the bounding box</p>\n\n<p>3. if none of these two fields exists, then decode the &lsquo;location&rsquo; info of the author into geocode to check if it matches the given bounding box</p>\n\n<p>4. if it is a retweet, then will check &lsquo;coordinate&rsquo;, &lsquo;place&rsquo;, and the &lsquo;location&rsquo; info of the author of the original tweet one by one.</p>\n\n<hr />\n<p>So based on what I have found so far, I think geotagging query of Twitter API works, it just cannot return tweets which do not have any type of location info defined.</p>','2016-06-19 16:49:12',1),(212,'PHP','Misc','Case Sensitivity Of Naming Pattern','<p><strong><span style=\"color:#B22222\">In PHP, function names are case insensitive, while variable names are case sensitive.</span></strong></p>','2016-06-23 09:22:43',0),(213,'Statsit','ONE Admin','Create New Set','<p><strong><span style=\"color:#B22222\">URL called when creating new set</span></strong>:&nbsp;http://my.statsit.com/one/admin/createSet</p>\n\n<p>&nbsp;</p>','2016-06-27 11:47:28',0),(214,'Statsit','Database','Turn Off All Tasks Writing 112 Database','<h3><strong><span style=\"color:rgb(178, 34, 34)\">1. Server 117</span></strong></h3>\n\n<ul>\n	<li>comment off crontab list including <span style=\"background-color:rgb(255, 236, 0)\">&#39;scraping daemon&#39;, &#39;influcner update&#39;, &#39;pool cleaner&#39;.</span></li>\n	<li>terminates all processes with keyword <span style=\"background-color:rgb(255, 236, 0)\">&#39;scraping&#39; and &#39;dp.moderator&#39;</span></li>\n	<li>terminates all processes related to <span style=\"background-color:rgb(255, 236, 0)\">&#39;influencr&#39;</span></li>\n</ul>\n\n<h3><span style=\"color:rgb(178, 34, 34)\"><strong>2. Server 108</strong></span></h3>\n\n<ul>\n	<li>comment off crontab list related to panel<span style=\"background-color:rgb(122, 255, 145)\"> &#39;whitelist&#39;</span> scraping</li>\n	<li>terminates all processes with keyword <span style=\"background-color:rgb(122, 255, 145)\">&#39;whitelist&#39; and &#39;dp.moderator&#39;</span></li>\n</ul>','2016-06-27 13:38:16',0),(215,'JavaScript','Snippets','Hex To RGB','<pre>\n<code class=\"language-javascript\">function hexToRgb(hex) {\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    var shorthandRegex = /^#?([a-fd])([a-fd])([a-fd])$/i;\n    hex = hex.replace(shorthandRegex, function(m, r, g, b) {\n        return r + r + g + g + b + b;\n    });\n\n    var result = /^#?([a-fd]{2})([a-fd]{2})([a-fd]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}</code></pre>\n\n<p>&nbsp;</p>','2016-07-06 09:47:30',0),(216,'MySql','Basic Syntax','Mysqlcheck','<p>The&nbsp;<strong><span style=\"color:#B22222\">mysqlcheck</span></strong>&nbsp;client performs table maintenance: It checks, repairs, optimizes, or analyzes tables.</p>\n\n<pre>\n<code class=\"language-bash\">nohup mysqlcheck -h -u -p --auto-repair -c -o --all-databases &amp;</code></pre>\n\n<ul>\n	<li>-c : check for errors</li>\n	<li>-o: optimize</li>\n	<li>--auto-repair: if any errors found, then&nbsp;automatic repair the table</li>\n</ul>','2016-07-06 11:05:41',0),(217,'MySql','System Variable','Search Variable','<p><strong><span style=\"color:rgb(178, 34, 34)\">SHOW VARIABLES</span></strong>&nbsp;shows the values of MySQL system variables. This statement does not require any privilege. It requires only the ability to connect to the server.</p>\n\n<ul>\n	<li>system variable can be both <span style=\"color:rgb(178, 34, 34)\">global</span> or <span style=\"color:rgb(178, 34, 34)\">session-specific</span>.</li>\n</ul>\n\n<p>For example:</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. Show original variable value</span></p>\n\n<pre>\n<code class=\"language-sql\">show global variables like &#39;%group_concat%&#39;;\n+----------------------+-------+\n| Variable_name        | Value |\n+----------------------+-------+\n| group_concat_max_len | 1024  |\n+----------------------+-------+\n\nshow session variables like &#39;%group_concat%&#39;;\n+----------------------+-------+\n| Variable_name        | Value |\n+----------------------+-------+\n| group_concat_max_len | 1024  |\n+----------------------+-------+</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. modify session variable value</span></p>\n\n<pre>\n<code class=\"language-sql\">set @@session.group_concat_max_len = 2048;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3. Show the lastest value</span></p>\n\n<pre>\n<code class=\"language-sql\">show session variables like &#39;%group_concat%&#39;;\n+----------------------+-------+\n| Variable_name        | Value |\n+----------------------+-------+\n| group_concat_max_len | 2048  |\n+----------------------+-------+\n\nshow global variables like &#39;%group_concat%&#39;;\n+----------------------+-------+\n| Variable_name        | Value |\n+----------------------+-------+\n| group_concat_max_len | 1024  |\n+----------------------+-------+</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4.&nbsp;session value will be displayed by default</span></p>\n\n<pre>\n<code class=\"language-sql\">show variables like &#39;%group_concat%&#39;;\n+----------------------+-------+\n| Variable_name        | Value |\n+----------------------+-------+\n| group_concat_max_len | 2048  |\n+----------------------+-------+</code></pre>','2016-07-06 11:40:00',1),(218,'MongoDB','CRUD','Delete','<p>The basic syntax is&nbsp;</p>\n\n<pre>\n<code class=\"language-javascript\">db.collection.remove(query, justONE)</code></pre>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">query</span>: a JS object to filter out the documents matching the given query</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">justONE</span>: a boolean value, <span style=\"background-color:rgb(122, 255, 145)\">true or 1</span> to remove only one document out of all matching docs.</li>\n</ul>\n\n<p>For example</p>\n\n<p><strong><span style=\"color:#B22222\">1. Delete all matching docs with field &#39;qty&#39; more than 20</span></strong></p>\n\n<pre>\n<code class=\"language-javascript\">db.products.remove( { qty: { $gt: 20 } } )</code></pre>\n\n<p><strong><span style=\"color:#B22222\">2. Delete only the first matching doc</span></strong></p>\n\n<pre>\n<code class=\"language-javascript\">db.products.remove( { qty: { $gt: 20 } }, true )</code></pre>\n\n<p><strong><span style=\"color:#B22222\">&nbsp;3. Drop current database</span></strong></p>\n\n<pre>\n<code class=\"language-javascript\">use database\ndb.dropDatabase()</code></pre>\n\n<p><strong><span style=\"color:#B22222\">4. Drop a collection of current&nbsp;database</span></strong></p>\n\n<pre>\n<code class=\"language-javascript\">use database\ndb.collection.drop()</code></pre>','2017-01-10 14:25:40',0),(219,'JQuery','Deferred','Basics','<h3><strong>Definition</strong></h3>\n\n<p><span style=\"color:rgb(178, 34, 34)\">Deferred object</span> is the jQuery implementation of <span style=\"color:rgb(178, 34, 34)\">JavaScript Promises</span>.&nbsp;</p>\n\n<p>According to jQuery, <span style=\"color:rgb(178, 34, 34)\">$.Deferred()</span> is :</p>\n\n<p><em>&quot;A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function</em>.&quot;</p>\n\n<p>The basic syntax is&nbsp;</p>\n\n<pre>\n<code class=\"language-javascript\">$.Deferred(beforeStartFunction)</code></pre>\n\n<ul>\n	<li>it returns a jQuery deferred object</li>\n	<li>beforeStartFunction is an optional function executed before the deferred object is returned. The created deferred object is passed&nbsp;as the parameter of this optional function and also is the context &#39;this&#39; of this function as well</li>\n</ul>\n\n<p>&nbsp;For example:</p>\n\n<pre>\n<code class=\"language-javascript\">var dfd = $.Deferred(function(dfd){\n	console.log(dfd.state());//\'pending\'\n	console.log(dfd === this);//\'true\'\n});</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<h3><strong>Main functions</strong></h3>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. functions to change the state of a deferred object and trigger related callbacks</span></p>\n\n<p>There are 3 main states of an deferred object: <span style=\"background-color:rgb(255, 236, 0)\">&#39;pending&#39;, &#39;resolved&#39; or &#39;rejected&#39;</span>, and <span style=\"background-color:rgb(255, 236, 0)\">&#39;pending&#39;</span> is the inital state.</p>\n\n<ul>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">deferred.notify(params)</span> : this does not change the state of a deferred object, but trigger &#39;<span style=\"background-color:rgb(255, 118, 131)\">progressCallback</span>&#39; functions defined by <span style=\"background-color:rgb(255, 118, 131)\">deferred.progress()</span>(can be defined for multiple times in a chain), params defined together with&nbsp;this function will be passed to deferred.progress().</li>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">deferred.resolve(params)</span>: this will manually change the <span style=\"background-color:rgb(255, 118, 131)\">state to &#39;resolved&#39; from &#39;pending&#39;</span>, this won&#39;t work if the state has been &#39;resolved&#39; or &#39;rejected&#39; already when this function is called. And the state change will also trigger &#39;<span style=\"background-color:rgb(255, 118, 131)\">doneCallback</span>&#39; functions defined by <span style=\"background-color:rgb(255, 118, 131)\">deferred.done()</span>(can be defined for multiple times in a chain), params defined together with&nbsp;this function will be passed to deferred.done().</li>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">deferred.reject(params)</span>: this will manually change the <span style=\"background-color:rgb(255, 118, 131)\">state to &#39;rejected&#39; from &#39;pending&#39;</span>, this won&#39;t work if the state has been &#39;resolved&#39; or &#39;rejected&#39; already when this function is called. And the state change will also trigger &#39;<span style=\"background-color:rgb(255, 118, 131)\">failCallbacks</span>&#39; functions defined by <span style=\"background-color:rgb(255, 118, 131)\">deferred.fail()</span>(can be defined for multiple times in a chain), params defined together with&nbsp;this function will be passed to deferred.fail().</li>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">deferred.then(doneCallback, failCallback, progressCallback)</span>: this is a function to define all types of callbacks at the same time. It is equivalent to <span style=\"background-color:rgb(255, 118, 131)\">deferred.done(doneCallback).fail(failCallback).progress(progressCallback)</span>.</li>\n	<li><span style=\"background-color:#7AFF91\">deferred.always(alwaysCallbak)</span>: the callback function executed either deferred is resolved or rejected.</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-javascript\">var dfd = jQuery.Deferred();\nvar output = function(a,b,c){\n	console.log(a+b+c);\n};\n\ndfd.then(output, output, output);\n// or \ndfd.done(output).fail(output).progress(output);\n\ndfd.notify(\'Work\', \' in \', \'progress\');\n\nsetTimeout(function(){\n	dfd.resolve(\'Deferred\', \' is \', \'resolved\');\n}, Math.floor(Math.random() * 1000) + 2000);\n\nsetTimeout(function(){\n	dfd.reject(\'Deferred\', \' is \', \'rejected\');\n}, Math.floor(Math.random() * 1000) + 2000);\n\n/*\nThe final state of the deferred object depends on which of resolve() and reject() is called first, and the one called later won\'t change the state again\n*/</code></pre>\n\n<p>&nbsp;</p>\n\n<hr />\n<h3><strong>Ajax Call</strong></h3>\n\n<p><em>&quot;In most cases where a jQuery API call returns a Deferred or Promise-compatible object, such as<span style=\"background-color:rgb(255, 118, 131)\">&nbsp;jQuery.ajax()</span>&nbsp;or&nbsp;<span style=\"background-color:rgb(255, 118, 131)\">jQuery.when()</span>, you will only want to use the&nbsp;deferred.then(),&nbsp;deferred.done(), and&nbsp;deferred.fail()&nbsp;methods to add callbacks to the Deferred&#39;s queues. The internals of the API call or code that created the Deferred will invoke&nbsp;deferred.resolve()&nbsp;or&nbsp;deferred.reject()&nbsp;on the deferred at some point, causing the appropriate callbacks to run.&quot; - jQuery</em></p>\n\n<p><strong><span style=\"background-color:rgb(255, 236, 0)\">NOTICE: the arguments returned to callbacks of Ajax object is different from original Deferred object:</span></strong></p>\n\n<ul>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">Deferred object</span>: arguments are freely and manually defined in deferred.resolve(arg1, arg2, ...) or deferred.reject(arg1, arg2, arg3), which will be received by deferred.done() and deferred.fail() respectively</li>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">Ajax object</span>: type and order of arguments are predefined and cannot be modified, as shown below</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-javascript\">var ajaxCall = $.ajax({\n  url: \'http://desktop.io/\',\n  dataType: \'html\'\n});\n\nvar success = function(data, textStatus, jqXHR){\n  console.log(textStatus);\n};\n\nvar fail = function(jqXHR, textStatus, errorThrown){\n  console.log(textStatus);\n};\n\najaxCall.then(success, fail);\n\n// or an ajax \'get\' shortcut\nvar ajaxCall2 = $.get(\'http://desktop.io/\', success, \'html\').fail(fail);</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">&nbsp;$.when()</span></strong></p>\n\n<ul>\n	<li>it is used to attach and&nbsp;execuate callbacks based on the &#39;And&#39; results of multiple defered objects passed as parameters.</li>\n	<li>if all deferred succeed, then execute doneCallbacks attached</li>\n	<li>if any deferred fails, then execute failCallbacks attached</li>\n	<li>an array&nbsp;will be passed to callbacks&nbsp;for each deferred object respectively</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-javascript\">var whenDone = function(a, b){\n	console.log([a, b]);\n};\n\nvar whenFail = whenDone;\n\n// first deferred obj\nvar ajaxCall = $.ajax({\n  url: \'http://desktop.io/\',\n  dataType: \'html\',\n});\n\n//second deferred obj\nvar dfd = jQuery.Deferred();\ndfd.resolve(\'Deferred\', \' is \', \'resolved\');\n\n//execute callbacks\n$.when(ajaxCall, dfd).done(whenDone).fail(whenFail);\n/*\ncallback whenDone() or whenFail() will get two parameters for the two deferred objs\na = [data, textStatus, jqXHR];\nb = [\'Deferred\', \' is \', \'resolved\'];\n*/\n</code></pre>','2018-09-11 07:04:26',19),(220,'JQuery','Functions','JQuery(callback)','<h3><span style=\"color:rgb(178, 34, 34)\">jQuery(callback) binds a function to be executed when the DOM has finished loading</span></h3>\n\n<pre>\n<code class=\"language-javascript\">jQuery(function(){\n alert(\'show me when DOM is ready!\')\n});</code></pre>\n\n<ul>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">jQuery(callback)</span>&nbsp;function behaves just like&nbsp;<span style=\"background-color:rgb(122, 255, 145)\">$( document ).ready(callback)</span></li>\n</ul>\n\n<p>Global <strong><em>$ </em></strong>symbol is not only used by&nbsp;jQuery but also some other JS libs, in order to avoid the conflict in those cases, the following snippets can be used to make $ a local alias representing jQuery, e.g.:</p>\n\n<pre>\n<code class=\"language-javascript\">$ = \'wow\';\nconsole.log($ === jQuery);//false\n\njQuery(function($){\n console.log($ === jQuery);//true\n});</code></pre>','2016-07-20 17:23:57',2),(221,'JQuery','Snippets','Local $ Alias','<p>In order to avoid conflict of using $ alias by multiple JS libs, the following snippets can be used to work around:</p>\n\n<p><strong><span style=\"color:#B22222\">1. DOM manipulation</span></strong></p>\n\n<pre>\n<code class=\"language-javascript\">//callback when DOM is fully loaded\njQuery(function($){\n $(selector);\n});</code></pre>\n\n<p><strong><span style=\"color:#B22222\">2. Library Code</span></strong></p>\n\n<pre>\n<code class=\"language-javascript\">//make jQuery as the context and make it equal to $\n(function($){\n //code \n})(jQuery)</code></pre>\n\n<p>&nbsp;</p>','2016-07-20 17:32:05',0),(222,'JQuery','Properties','JQuery Prototype','<p><strong><span style=\"color:#B22222\">$.fn is the prototype object of jQuery</span></strong>, therefore the following two statement are equivalent:</p>\n\n<pre>\n<code class=\"language-javascript\">console.log($.fn === $.prototype);//true</code></pre>\n\n<p>&nbsp;</p>','2016-07-20 17:41:14',1),(223,'MySql','Configuration','~/.my.conf','<p><em>&quot;Most MySQL programs can read startup options from option files (also sometimes called configuration files). Option files provide a convenient way to specify commonly used options so that they need not be entered on the command line each time you run a program.&quot; - MySQL Doc</em></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">To determine whether a program reads option files, you can use following commands to check:</span></p>\n\n<pre>\n<code class=\"language-bash\"># via mysqld\n/Applications/XAMPP/xamppfiles/sbin/mysqld --verbose --help\n\n# via mysql client\nmysql --help</code></pre>\n\n<p>And you will find a statement like this:</p>\n\n<pre>\n<code>Default options are read from the following files in the given order:\n/Applications/XAMPP/xamppfiles/etc/xampp/my.cnf /Applications/XAMPP/xamppfiles/etc/my.cnf ~/.my.cnf</code></pre>\n\n<p>For example in the global configuration file &#39;/Applications/XAMPP/xamppfiles/etc/my.cnf&#39;:&nbsp;</p>\n\n<pre>\n<code class=\"language-bash\"># The following options will be passed to all MySQL clients\n[client]\n#password       = your_password\nport            = 3306\nsocket          = /Applications/XAMPP/xamppfiles/var/mysql/mysql.sock\n\n# The MySQL server\n[mysqld]\nuser = mysql\nport=3306\nsocket          = /Applications/XAMPP/xamppfiles/var/mysql/mysql.sock\nskip-external-locking\nkey_buffer = 16M\nmax_allowed_packet = 1M\ntable_open_cache = 64\nsort_buffer_size = 512K\nnet_buffer_length = 8K\nread_buffer_size = 256K</code></pre>\n\n<ul>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">[group] indicates a group of statements,</span> e.g. [client] for client programs, [mysqld] for mysql server</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Let us use user option file &#39;~/.my.cnf&#39; as the example here to set login info, so all clients can access the database server without explicitly giving info like &#39;host&#39;, &#39;username&#39;, &#39;password&#39; and so on:</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">[client]\n# The following password will be sent to all standard MySQL clients\nuser=\'counterall\'\npassword=\"mj23kb8i3\"\nhost=\'localhost\'\ndefault-character-set=utf8</code></pre>\n\n<ul>\n	<li>&#39;&#39;<span style=\"background-color:rgb(255, 236, 0)\">default-character-set=utf8&quot;</span> will initialize the mysql client by using UTF decoding, which means the un-common characters like Finnish&nbsp;&ouml;&auml;&aring; will be correctly displayed in the mysql terminal</li>\n</ul>','2017-01-11 19:17:25',5),(224,'Linux','Commands','Tee','<p><strong><span style=\"color:#B22222\">tee</span></strong> command</p>\n\n<ul>\n	<li>is used to copy the standard input to the standard output</li>\n	<li>it is ususally used inside a shell pipeline</li>\n	<li>it is quite similar to the &#39;&lt;&#39; symbol, but tee will relay the stdout along with the pipeline</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">echo \'hello\' &gt; out.txt</code></pre>\n\n<ul>\n	<li>&#39;&gt;&#39; will writes the output content only to the file, but out to the screen(stdout)</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">echo \'hello\' | tee out.txt\nhello</code></pre>\n\n<ul>\n	<li>it will output to both the screen(stdout) and the file specified</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">echo \'world\' | tee -a out.txt\nworld\ncat out.txt\nhello\nworld</code></pre>\n\n<ul>\n	<li>-a means to append the output to the file but not overwrite it</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">echo \'world\' | tee out.txt out1.txt\nworld\ncat out.txt\nworld\ncat out1.txt\nworld</code></pre>\n\n<ul>\n	<li>tee can output to multiple files simultenously</li>\n</ul>','2016-07-22 20:40:41',5),(225,'Linux','Standard Streams','Check Exit Status','<h3><strong><span style=\"color:rgb(178, 34, 34)\">Exist status:</span></strong></h3>\n\n<ul>\n	<li>\n	<p>every command returns an&nbsp;exit status&nbsp;(sometimes referred to as a&nbsp;return status&nbsp;or&nbsp;exit code).</p>\n	</li>\n	<li>\n	<p>a&nbsp;successful command returns a&nbsp;0, while an unsuccessful one returns a&nbsp;non-zero&nbsp;value that usually can be interpreted as an&nbsp;error code.&nbsp;</p>\n	</li>\n	<li>\n	<p>0 is TRUE</p>\n	</li>\n	<li>\n	<p>&gt; 0 is FALSE</p>\n	</li>\n</ul>\n\n<h3><span style=\"background-color:#FFEC00\"><strong>Show exit status the last command executed</strong></span></h3>\n\n<ul>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">$?&nbsp;</span></strong>reads the exit status of the last command executed.</li>\n	<li>After a function returns,&nbsp;<strong><span style=\"color:rgb(178, 34, 34)\">$?&nbsp;</span></strong>gives the exit status of the last command executed in the function. This is Bash&#39;s way of giving functions a &#39;return value&#39;</li>\n</ul>\n\n<p>For example:</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. Single command</span></p>\n\n<pre>\n<code class=\"language-bash\">#TRUE status\necho &#39;hello world&#39;\nhello world\necho $?\n0</code></pre>\n\n<pre>\n<code class=\"language-bash\">#FALSE status\ncat out2.txt\ncat: out2.txt: No such file or directory\necho $?\n1</code></pre>\n\n<pre>\n<code class=\"language-bash\">#FALSE status\na = 1\n-bash: a: command not found\necho $?\n127</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. multiple commands</span></p>\n\n<pre>\n<code class=\"language-bash\">echo &#39;hello world&#39; | grep -i &#39;error&#39;\necho $?\n1\n\necho &#39;hello world&#39; | grep -i &#39;world&#39;\nhello world\necho $?\n0</code></pre>\n\n<hr />\n<h3><span style=\"background-color:#FFEC00\"><strong>Show exit status of each command in a pipeline</strong></span></h3>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">PIPESTATUS</span></strong> is an array variable containing a list of exit status values from the processes in the most-recently-executed foreground pipeline. For example:</p>\n\n<pre>\n<code class=\"language-bash\">echo &#39;hello world&#39; | grep -i &#39;error&#39;\necho ${PIPESTATUS[@]}\n0 1</code></pre>\n\n<ul>\n	<li>${} is used to reference an array</li>\n	<li>[@] means to show all elements inside an array</li>\n</ul>','2016-07-22 21:07:45',0),(226,'Linux','Scripts','Command Substitution','<p><strong><em>&quot;Command substitution allows the output of a command to replace the command itself.&quot; -GNU</em></strong></p>\n\n<ul>\n	<li>Command substitution occurs when a command is enclosed as follows:&nbsp;<span style=\"color:rgb(178, 34, 34)\">$(command) </span>or <span style=\"color:rgb(178, 34, 34)\">`command` </span></li>\n	<li>Bash performs the expansion by executing&nbsp;command&nbsp;and replacing the command substitution with the <span style=\"background-color:rgb(122, 255, 145)\">standard output </span>of the command,&nbsp;with any trailing newlines deleted.&nbsp;Embedded newlines are not deleted</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">The standard output of the command will be the return value of&nbsp;the $() but not be output directly to screen</span></li>\n</ul>\n\n<p>For example:</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Return stdout as value without printing to the screen</span></strong></p>\n\n<ul>\n	<li><span style=\"background-color:rgb(255, 236, 0)\"><em>echo &#39;hello world&#39; </em></span>&nbsp;will generate&nbsp;string &#39;hello world&#39; as stdout</li>\n	<li><em><span style=\"background-color:rgb(255, 236, 0)\">$(echo &#39;hello world&#39;)</span> </em>returns&nbsp;&#39;hello world&#39; as the returned value</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">$ $(echo hello world)\n-bash: hello: command not found</code></pre>\n\n<p>is equivalent to&nbsp;</p>\n\n<pre>\n<code class=\"language-bash\">$ hello world\n-bash: hello: command not found</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Assign the command sustitution to variable</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">$ a=$(echo hello world)\n$ echo $a\nhello world</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. Capture stderr generated from command inside $()</span></strong></p>\n\n<p>Since the $() only capture stdout, so if you want to capture stderr as well, we need to merge stderr into stdout inside the command</p>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">Before merging:</span></p>\n\n<pre>\n<code class=\"language-bash\">$ error=$(mysqldump -u wrong-user cknote &gt; daily_notes_backup.sql)\nmysqldump: Got error: 1045: Access denied for user &#39;wrong-user&#39;@&#39;localhost&#39; (using password: YES) when trying to connect\n$ echo $error\n#get empty result</code></pre>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">After merging</span></p>\n\n<pre>\n<code class=\"language-bash\">$ error=$(mysqldump -u wrong-user cknote 2&gt;&amp;1)\n$ echo $error\nmysqldump: Got error: 1045: Access denied for user &#39;wrong-user&#39;@&#39;localhost&#39; (using password: YES) when trying to connect</code></pre>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">A special merging case when using &gt; to output content to file</span></p>\n\n<ul>\n	<li>when using &gt; to output content to a file, the command does not output any stdout, so if using 2&gt;&amp;1 inside the command substitution $(), the variable on the left side of &#39;=&#39; still gets no content</li>\n	<li>In this case, we can run the command inside <span style=\"background-color:rgb(122, 255, 145)\">subshell</span> &#39;(command)&#39; first, and then merging stderr into stdout</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">#original command generates stderr\n$ mysqldump -u wrong-user cknote &gt; daily_notes_backup.sql\nmysqldump: Got error: 1045: Access denied for user &#39;wrong-user&#39;@&#39;localhost&#39; (using password: YES) when trying to connect\n#direct merging would fail\n$ error=$(mysqldump -u wrong-user cknote &gt; daily_notes_backup.sql 2&gt;&amp;1)\n$ echo $error #empty\n#solution\n$ error=$( (mysqldump -u wrong-user cknote &gt; daily_notes_backup.sql) 2&gt;&amp;1)\n$ echo $error\nmysqldump: Got error: 1045: Access denied for user &#39;wrong-user&#39;@&#39;localhost&#39; (using password: YES) when trying to connect</code></pre>','2016-07-22 23:05:01',0),(227,'Linux','Scripts','Brackets','<h3><strong><span style=\"color:#B22222\">Brackets in bash scripts&nbsp;</span></strong></h3>\n\n<ol>\n	<li>Single Parenthesis - ( ... ) is creating a subshell</li>\n	<li>Double Parenthesis - (( ... )) is for arithmetic operation</li>\n	<li>Single Square Bracket - [ ... ] is the syntax for the POSIX&nbsp;test</li>\n	<li>Double Square Brackets - [[ ... ]] is the syntax for bash conditional expressions (similar to&nbsp;test&nbsp;but more powerful)</li>\n</ol>\n\n<p>are not exhaustive, you can use&nbsp;boolean logic</p>\n\n<pre>\n<code class=\"language-bash\">if command; then ...</code></pre>\n\n<p>too, because the commands have <span style=\"background-color:#FFEC00\">exit status. In&nbsp;bash,&nbsp;0&nbsp;is&nbsp;true&nbsp;and &gt;&nbsp;0&nbsp;is&nbsp;false.</span></p>\n\n<p>You can see the exit status like this :</p>\n\n<pre>\n<code class=\"language-bash\">command; echo $?</code></pre>','2016-07-24 17:50:59',0),(228,'Linux','Folder And Files','Tar Together With Gzip Or 7Z','<h3><strong><span style=\"color:rgb(178, 34, 34)\">Why using tar and gzip together?</span></strong></h3>\n\n<p>First, we need to clarify two concepts mixed-up sometimes:</p>\n\n<ul>\n	<li><span style=\"background-color:rgb(255, 236, 0)\">Archiving</span>: the&nbsp;operation to integrate multiple files into one big file.</li>\n	<li><span style=\"background-color:rgb(255, 236, 0)\">Compressing</span>: the operation to compress a raw file to be smaller in size.</li>\n</ul>\n\n<p>Dislike zip and rar formats in Windows, which are&nbsp;archives of multiple files compressed together.&nbsp;<span style=\"background-color:rgb(122, 255, 145)\">In Unix and Unix-like systems (like Ubuntu), archiving and compression are separate</span>.</p>\n\n<ul>\n	<li>tar handles archiving operation to put&nbsp;multiple files into a single (tar) file.</li>\n	<li>gzip&nbsp;compresses a single file (only).</li>\n</ul>\n\n<p>So to get a compressed archive, you combine the two,</p>\n\n<ul>\n	<li>first use&nbsp;tar&nbsp;to get all files into a single file (archive.tar)</li>\n	<li>then&nbsp;gzip&nbsp;it (archive.tar.gz).</li>\n	<li>If you only have one file you need to compress (notes.txt), there&#39;s no need for tar</li>\n	<li>There are other types of compression, such as&nbsp;compress,&nbsp;bzip2&nbsp;and&nbsp;xz&nbsp;which work in the same manner as gzip (apart from using different types of compression of course)</li>\n</ul>\n\n<h3><strong><span style=\"color:rgb(178, 34, 34)\">7Z is an exception</span></strong></h3>\n\n<p>7zip in Unix&nbsp;is more like zip and rar in Windows. It handles archiving and compression at the same time.&nbsp;<span style=\"background-color:rgb(255, 236, 0)\">However 7zip doesn&#39;t store unix ownership and permission of the archived files</span> (it seems to be mainly geared towards Windows, like zip and rar), <span style=\"background-color:rgb(255, 236, 0)\">so it makes sense to combine it with tar first to get ownership and permissions preserved</span>, e.g. <span style=\"background-color:rgb(211, 211, 211)\">.tar.7z</span></p>','2016-08-02 17:15:03',3),(229,'PHP','Folder And Files','Name Of File & Dir','<p>There is a list of functions and global constants used to return file name or file directory, e.g.&nbsp;</p>\n\n<pre>\n<code class=\"language-php\">echo __FILE__ . &quot;n&quot;;\n\necho __DIR__ .  &quot;n&quot;;\n\necho basename(__FILE__) .  &quot;n&quot;;\n\necho dirname(__FILE__) .  &quot;n&quot;;\n\necho dirname(__DIR__) .  &quot;n&quot;;</code></pre>\n\n<p>You will get:</p>\n\n<pre>\n<code>/Users/counterall/Documents/demos/testSnippets/terminal.php\n\n/Users/counterall/Documents/demos/testSnippets\n\nterminal.php\n\n/Users/counterall/Documents/demos/testSnippets\n\n/Users/counterall/Documents/demos</code></pre>\n\n<ul>\n	<li><span style=\"background-color:rgb(255, 236, 0)\">__DIR__ (as of PHP 5.3) is equivalent to dirname(__FILE__)</span></li>\n	<li>Remeber the <span style=\"background-color:rgb(255, 236, 0)\">difference between dirname(__FILE__) &amp; dirname(__DIR__)</span></li>\n</ul>','2016-08-04 12:32:14',4),(230,'PHP','Misc','PHP Tags','<h3><span style=\"color:rgb(178, 34, 34)\"><strong>Standard Tag</strong></span>:</h3>\n\n<ul>\n	<li>When PHP parses a file, it looks for opening and closing tags, which are &quot;<span style=\"background-color:rgb(255, 236, 0)\">&lt;?php&quot; and &quot;?&gt;&quot;&nbsp;</span>which tell PHP to start and stop interpreting the code between them.</li>\n	<li>Parsing in this manner allows PHP to be embedded in all sorts of different documents, as everything outside of a pair of opening and closing tags is ignored by the PHP parser.</li>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">If a file is pure PHP code, it is preferable to omit the PHP closing tag at the end of the file.</span> This prevents accidental whitespace or new lines being added after the PHP closing tag, which may cause unwanted effects because PHP will start output buffering when there is no intention from the programmer to send any output at that point in the script.</li>\n</ul>\n\n<h3><strong><span style=\"color:rgb(178, 34, 34)\">Short Open Tag:</span></strong></h3>\n\n<ul>\n	<li>PHP also allows for short open tag&nbsp;<span style=\"background-color:rgb(122, 255, 145)\">&lt;? ?&gt;</span>(which is discouraged since it is only available if enabled using the&nbsp;<span style=\"background-color:rgb(255, 236, 0)\">short_open_tag</span>&nbsp;php.ini configuration file directive, or if PHP was configured with the&nbsp;--enable-short-tags&nbsp;option).</li>\n	<li>This <span style=\"background-color:rgb(255, 236, 0)\">short_open_tag</span>&nbsp;directive also affected the <span style=\"background-color:rgb(122, 255, 145)\">shorthand&nbsp;&lt;?= &nbsp;before PHP 5.4.0, which is identical to&nbsp;&lt;? echo</span>. Use of this shortcut required short_open_tag&nbsp;to be on. Since PHP 5.4.0,&nbsp;&lt;?=&nbsp;is always available.</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">&lt;?php echo &#39;hello world!&#39;; ?&gt;\n\n//is equivalent to \n\n&lt;?= &#39;hello world&#39;; ?&gt;</code></pre>','2017-03-15 11:19:42',1),(231,'JavaScript','Snippets','Validity Of Src Url','<p>By using the following snippets, we can confirm if the an html element&#39;s src or link url is correctly loaded:</p>\n\n<pre>\n<code class=\"language-javascript\">var img = document.getElementById(\'img1\');\nvar url = \'http://demo.site.com/sample.gif\';\nimg.src = url;\nimg.onload = function(){\n alert(\'Loaded!\');\n};\nimg.onerror = function(){\n alert(\'Failed to load!\');\n};</code></pre>\n\n<p>With jQuery together, it is equivalent to</p>\n\n<pre>\n<code class=\"language-javascript\">$(\'#img1\').on(\'load\', function(){\n  alert(\'Loaded!\');\n});\n\n$(\'#img1\').on(\'error\', function(){\n  alert(\'Failed to load!\');\n});</code></pre>\n\n<p>Or directly add script into html element</p>\n\n<pre>\n<code class=\"language-html\">&lt;img id=\'img1\' src=\'\' onload=\'alert(\"Loaded\")\' onerror=\'alert(\"Failed to load\")\'&gt;</code></pre>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">DO REMEMBER onload and onerror are asynchronous as well, and dislike ajax call, there is no &#39;same domain&#39; limitation over onload or onerror.</span></p>','2016-08-06 20:17:10',0),(232,'PHP','Tricks And Traps','In_array | Switch','<p>Check the following code</p>\n\n<pre>\n<code class=\"language-php\">//in_array()\n$a = [&#39;hello&#39;];\nvar_dump(in_array(0, $a));//true\n\n//switch\n$n = 0; \nswitch ($n){\n	case &#39;hello&#39;:\n	  echo &#39;hello world!&#39;;\n	  break;\n	default:\n	  echo &#39;colorful day!&#39;;\n	  break;\n}// &#39;hello world!&#39;</code></pre>\n\n<p>As you can see in the above examples, <span style=\"background-color:rgb(255, 236, 0)\">0 is considered the same as a match to a string, this reason is that php will convert the string to its numeric counterpart before comparing 0 and string</span>, just as follows:</p>\n\n<pre>\n<code class=\"language-php\">var_dump(0 == &#39;hello&#39;);//true</code></pre>\n\n<p>But if compare them without type convertion, then</p>\n\n<pre>\n<code class=\"language-php\">var_dump(0 === &#39;hello&#39;);false</code></pre>\n\n<p>So if the above output of the in_array() code above is not what you want, you can add the third paramerter to use &#39;STRICT&#39; mode</p>\n\n<pre>\n<code class=\"language-php\">$a = [&#39;hello&#39;];\nvar_dump(in_array(0, $a, true));//false</code></pre>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">For switch(), maybe you can convert the type of variable before sending them to the switch function</span></p>','2016-08-16 22:12:43',0),(233,'PHP','Tricks And Traps','Array_filter | Strlen','<p>Check the following code</p>\n\n<pre>\n<code class=\"language-php\">$b = [0,1,3,4, \'hello\', null];\n$b = array_filter($b);\nprint_r($b);//[1,3,4,\'hello\']\n</code></pre>\n\n<p>As we know, <span style=\"background-color:rgb(122, 255, 145)\">array_filter($array) will remove any array element which equals to FALSE, which means &#39;&#39;, NULL, or 0 will be removed if they exist in the array.</span></p>\n\n<p>If in the same case, you only want to remove empty string and NULL but keep 0 number, you can try the following snippets:</p>\n\n<pre>\n<code class=\"language-php\">$b = [0,1,3,4, \'hello\', null];\nprint_r(array_filter($b, \'strlen\'));\nprint_r($b);//[0,1,3,4,\'hello\']</code></pre>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">the solution is to use strlen() as the callback function, the strlen(0) is 1.</span></p>\n\n<pre>\n<code class=\"language-php\">print_r(strlen(0));//1\nprint_r(strlen(NULL));//0\nprint_r(strlen(\'\'));//0</code></pre>\n\n<p>&nbsp;</p>','2016-08-16 22:26:00',4),(234,'JQuery','Event','Add Event Listener For Eles Created After Page Loa','<p>A big&nbsp;problem of adding event listener is that it will make no effect to the elements dynamically added after the script of adding event listener has been executed.</p>\n\n<p>So here is the solution to add event listener regardless of when the matched elements are added into the DOM tree.</p>\n\n<pre>\n<code class=\"language-javascript\">$(document).on(\"click\", \".box-header.with-border\", function(){\n  var boxContent = $(this).siblings(\'.box-body, .box-footer\');\n  var box = $(this).parent(\'.box\');\n  var collapseBtnIcon = $(this).find(\".btn-box-tool i.fa\");\n  boxContent.slideToggle(500);\n  boxContent.promise().done(function(){\n    box.toggleClass(\'collapsed-box\');\n    collapseBtnIcon.toggleClass(\'fa-minus fa-plus\');\n  });\n});</code></pre>\n\n<ol>\n	<li>add event listener to &quot;document&quot;</li>\n	<li>but event will be triggered by the descedant&nbsp;elements with class &quot;.box-header.with-border&quot;</li>\n	<li>any elements with the class &quot;.box-header.with-border&quot; will bind this event no matter when the elements are created.</li>\n</ol>','2016-08-25 23:39:54',4),(235,'PHP','Snippets','Expand Shorten URL','<p>We can use the following script to expand shorten URL (e.g. embeded in tweet)</p>\n\n<pre>\n<code class=\"language-php\">function unshorten_url($url) {\n  $ch = curl_init($url);\n  curl_setopt_array($ch, array(\n    CURLOPT_FOLLOWLOCATION =&gt; TRUE,  // the magic sauce\n    CURLOPT_RETURNTRANSFER =&gt; TRUE,\n    CURLOPT_SSL_VERIFYHOST =&gt; FALSE, // suppress certain SSL errors\n    CURLOPT_SSL_VERIFYPEER =&gt; FALSE, \n    CURLOPT_NOBODY =&gt; true //the final resource isn\'t actually fetched\n  ));\n  curl_exec($ch); \n  $expandedUrl = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);\n  curl_close($ch);\n  return $expandedUrl;\n}\n</code></pre>\n\n<p>&nbsp;</p>','2016-08-30 16:30:52',0),(236,'Sphinx Search','Wiki','Index Extension','<p>For reference, different index files store the following data:</p>\n\n<ul>\n	<li>.spa&nbsp;stores document attributes (used in&nbsp;extern docinfo&nbsp;storage mode only);</li>\n	<li>.spd&nbsp;stores matching document ID lists for each word ID;</li>\n	<li>.sph&nbsp;stores index header information;</li>\n	<li>.spi&nbsp;stores word lists (word IDs and pointers to&nbsp;.spd&nbsp;file);</li>\n	<li>.spk&nbsp;stores kill-lists;</li>\n	<li>.spm&nbsp;stores MVA data;</li>\n	<li>.spp&nbsp;stores hit (aka posting, aka word occurrence) lists for each word ID;</li>\n	<li>.sps&nbsp;stores string attribute data.</li>\n	<li>.spe&nbsp;stores skip-lists to speed up doc-list filtering</li>\n</ul>\n\n<p>&nbsp;</p>','2016-08-30 17:56:05',0),(237,'PHP','Regex','Preg_ VS Mb_','<p>The main difference is that&nbsp;<span style=\"background-color:#FFEC00\">preg_&nbsp;functions use the&nbsp;pcre library</span>, when the&nbsp;<span style=\"background-color:#7AFF91\">mb_ereg_&nbsp;functions (including&nbsp;mb_split) use the&nbsp;oniguruma library&nbsp;</span>(used in ruby before the version 2.0).</p>\n\n<p><span style=\"background-color:#FFEC00\">The main reason is that oniguruma can deal with multiple encodings&nbsp;</span>(ASCII, UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, UTF-32LE, EUC-JP, EUC-TW, EUC-KR, EUC-CN, Shift_JIS, Big5, GB18030, KOI8-R, CP1251, ISO-8859-1, ISO-8859-2, ISO-8859-3, ISO-8859-4, ISO-8859-5, ISO-8859-6, ISO-8859-7, ISO-8859-8, ISO-8859-9, ISO-8859-10, ISO-8859-11, ISO-8859-13, ISO-8859-14, ISO-8859-15, ISO-8859-16)&nbsp;<span style=\"background-color:#7AFF91\">when pcre can&#39;t (only UTF-8)</span>.</p>\n\n<p>Note that a lot of encodings available for&nbsp;mb_&nbsp;functions like&nbsp;mb_detect_encoding&nbsp;are not in this list (UTF-7, ArmSCII-8, CP866 for example) limiting the relevance of&nbsp;mb_ereg_&nbsp;functions.&nbsp;(Since you need to convert the string to a supported encoding before working on it, and to convert it back after.)</p>\n\n<p>The two regex engines share more or less the same features, nevertheless you can find some differences (not exhaustive, as it comes):</p>\n\n<p><span style=\"color:#B22222\">Oniguruma doesn&#39;t support:</span></p>\n\n<ul>\n	<li>one letter unicode shorthand character classes to be written without curly brackets.&nbsp;Example:&nbsp;pN&nbsp;is seen as&nbsp;pN, you need to write:p{N}</li>\n	<li>the unicode character classes: Xan, Xps, Xsp, Xwd</li>\n	<li>non-escaped square brackets in a character class: Oniguruma see&nbsp;[][]&nbsp;as two empty character classes, when pcre see a character class that contains&nbsp;]&nbsp;and&nbsp;[</li>\n	<li>the&nbsp;K&nbsp;feature</li>\n	<li>the&nbsp;R&nbsp;alias for newline sequences</li>\n	<li>named groups that use the Python syntax&nbsp;(?P&lt;name&gt;...). Only&nbsp;(?&lt;name&gt;...)&nbsp;or&nbsp;(?&#39;name&#39;...)&nbsp;are allowed.</li>\n	<li>group references with something else than the Oniguruma syntax:&nbsp;g&lt;name&gt;&nbsp;(Perl syntax&nbsp;(?&amp;name)&nbsp;and&nbsp;(?1)&nbsp;or&nbsp;(?R)&nbsp;are not allowed).</li>\n	<li>backtracking control verbs</li>\n</ul>\n\n<p><span style=\"color:#B22222\">PCRE doesn&#39;t support:</span></p>\n\n<ul>\n	<li>duplicated named groups (by default). You need to use the&nbsp;(?J)&nbsp;modifier to switch on this feature.</li>\n	<li>numbered back-references with&nbsp;k&lt;...&gt;&nbsp;syntax. You can write&nbsp;k&lt;name&gt;&nbsp;but not&nbsp;k&lt;1&gt;&nbsp;or&nbsp;k&lt;-1&gt;.</li>\n	<li>back-references to a specific nest level. Oniguruma is able to do that using&nbsp;k&lt;name+n&gt;&nbsp;wheren&nbsp;is the nest level.</li>\n</ul>\n\n<p><br />\nTo match newlines with the dot, Oniguruma uses the&nbsp;m&nbsp;modifier, when PCRE uses the&nbsp;s&nbsp;modifier. In&nbsp;mb_ereg_&nbsp;functions, the dot matches newlines by default. (So the&nbsp;m&nbsp;modifier is on by default).</p>\n\n<p>PCRE uses the&nbsp;s&nbsp;modifier to match newline with the dot. The m modifier behave differently with PCRE, it changes the meaning of&nbsp;^&nbsp;and&nbsp;$&nbsp;anchors from &quot;start&quot; and &quot;end&quot; of the string to &quot;start&quot; and &quot;end&quot; of the line.</p>\n\n<p>With Oniguruma, the meaning of these anchors doesn&#39;t change, they match always the start and end of the line. To match the limit of the string, it uses&nbsp;A&nbsp;and&nbsp;z&nbsp;also available with PCRE.</p>\n\n<p>Note that Oniguruma has been forked to give Onigmo (used in current Ruby versions) that implements more Perl features and syntactic elements, and that is more similar to PCRE.</p>','2016-08-31 22:20:41',4),(238,'CSS','Snippets','Annoying Gap Between Inline-block Eles','<p>It is very annoying and weird that a space is set between inline-block elements by default, which is mostly undesirable. And there are many solutions or wordarounds to solve this:</p>\n\n<p><strong><span style=\"color:#B22222\">1. workaround with font-size</span></strong></p>\n\n<pre>\n<code class=\"language-css\">inline-ele-parent{\n font-size: 0;\n}\n\ninline-ele{\n font-size: 12px\n}</code></pre>\n\n<p><strong><span style=\"color:#B22222\">2. Just use float instead.</span></strong></p>','2016-09-02 11:39:21',5),(239,'CSS','Snippets','Border Width Problem','<p>A sharp angle will appear at the point where two borders with differernt width connect, e.g. 3px for left and right border while 1px for top and bottom border.</p>\n\n<p>In this case, in order to avoid the sharp angle, we can set left &amp; right border on the parent element, and set top &amp; bottom on child element, or vice versa.</p>\n\n<p>&nbsp;</p>\n\n<pre>\n<code class=\"language-css\">.box-footer .label-tab{\n  cursor: initial;\n  border-bottom: 3px solid #3d9970;\n}\n\n.box-footer .label-tab span{\n  display: block;\n  border-left: 1px solid #f4f4f4;\n  border-right: 1px solid #f4f4f4;\n}</code></pre>\n\n<p>&nbsp;</p>','2016-09-02 11:52:28',0),(240,'JQuery','Snippets','Checkbox','<p>Some tips of using jQuery to manipulate checkbox input element, for example we have an checkbox like this</p>\n\n<pre>\n<code class=\"language-html\">&lt;input type=\'checkbox\' id=\'checkbox\'/&gt;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. do something based on if checkbox is checked or not</span></p>\n\n<pre>\n<code class=\"language-javascript\">var $checkbox = $(\'#checkbox\'); \n$checkbox.on(\'change\', function(){\n  if (this.checked) {\n   //code\n  }else{\n   //code\n  }\n});\n</code></pre>\n\n<p><span style=\"color:#B22222\">2. check or uncheck the checkbox</span></p>\n\n<pre>\n<code class=\"language-javascript\">//check\n$checkbox.prop(\"checked\", true);\n//uncheck\n$checkbox.prop(\"checked\", true);</code></pre>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">Use prop() instead of attr() in jQuery (after version 1.6) to manipulate status of checkbox</span></p>\n\n<pre>\n<code class=\"language-javascript\">elem.checked	//true (Boolean) Will change with checkbox state\n$( elem ).prop( \"checked\" )	//true (Boolean) Will change with checkbox state\nelem.getAttribute( \"checked\" )	//\"checked\" (String) Initial state of the checkbox; does not change\n$( elem ).attr( \"checked\" ) //(1.6)	\"checked\" (String) Initial state of the checkbox; does not change\n$( elem ).attr( \"checked\" ) //(1.6.1+)	\"checked\" (String) Will change with checkbox state\n$( elem ).attr( \"checked\" ) //(pre-1.6)	true (Boolean) Changed with checkbox state</code></pre>\n\n<p><span style=\"color:#B22222\">3. &quot;Change&quot; event&nbsp;can only be triggered via mouse, property changes won&#39;t trigger the event</span></p>\n\n<pre>\n<code class=\"language-html\">&lt;script&gt;\n$(document).ready(function(){\n    $(\"button\").click(function(){\n        $(\'#ckbx\').prop(\'checked\', true);\n    });\n    $(\'#ckbx\').change(function(){\n     alert(\'changed\');\n    });\n});\n&lt;/script&gt;\n&lt;p&gt;Click the button to trigger the change event (even if the element has not been changed).&lt;/p&gt;\n&lt;button&gt;Check the checkbox&lt;/button&gt;\n&lt;input id=\'ckbx\' value=\'test\' name=\'test\' type=\'checkbox\'&gt; Test\n</code></pre>\n\n<ul>\n	<li>Click the button and Test checkbox will be checked, but no alert will popup</li>\n	<li>Click the checkbox itself and alert will be triggered&nbsp;</li>\n</ul>','2017-03-13 19:51:54',5),(241,'Apache','.htaccess','Set Server Variables','<p>We can use .htaccess to set $_SERVER elements easily to be fetched by backend language like&nbsp;PHP to serve many purposes, for example, to set the envrionment type(test, staging, production) variable to let backend handle tasks differently.</p>\n\n<p>For instance, let us set an element named &#39;ENV&#39; with value &#39;staging&#39;</p>\n\n<pre>\n<code class=\"language-apache\">SetEnv ENV staging</code></pre>\n\n<p>Then, at backend</p>\n\n<pre>\n<code class=\"language-php\">echo $_SERVER[&#39;ENV&#39;]; // &quot;staging&quot;</code></pre>','2016-09-09 10:17:42',0),(242,'PHP','Array Functions','Array_map() & Array_walk()','<p>Both of these array functions aim to run callback functions to each element inside the given array, but they have many differences need to bear in mind:</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. array_map(&#39;callback_name&#39;, $array1, $array2, ...) </strong></span></p>\n\n<ul>\n	<li>name of callback is the first parameter</li>\n	<li>multiple arrays are&nbsp;the following parameters, and each of them is a parameter passed to callback function in the same order</li>\n	<li><span style=\"background-color:rgb(255, 236, 0)\">it returns the a new array</span>&nbsp;containing all the elements of $array1(or multiple arrays) after applying the&nbsp;callback&nbsp;function to each element of $arary1 (or set of elements of multiple arrays given as parameters of callback function)</li>\n</ul>\n\n<p><strong>For example:</strong></p>\n\n<pre>\n<code class=\"language-php\">$a = [\'color\'=&gt;\'red\', \'weather\'=&gt;\'sunny\'];\n\n$b = array_map(\'printDemo\', array_keys($a), array_values($a));\n\nprint_r($a);//Array ( [color] =&gt; red [weather] =&gt; sunny )\nprint_r($b);//Array ( [0] =&gt; color is red [1] =&gt; weather is sunny )\n\nfunction printDemo($key, $val){\n	return \"$key is $val\";\n}</code></pre>\n\n<p><strong>using&nbsp;reference as parameters of callback seems does not affect original array anyway</strong></p>\n\n<pre>\n<code class=\"language-php\">$a = [32, 177];\n\n$b = array_map(\'printDemo\',$a);\n\nprint_r($a);//Array ( [0] =&gt; 32 [1] =&gt; 177 )\nprint_r($b);//Array ( [0] =&gt; 33 [1] =&gt; 178 )\n\nfunction printDemo(&amp;$val){\n	$val++;\n	return $val;\n}</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. array_walk&nbsp;(&amp;$array&nbsp;, &#39;callback_name&#39; [,&nbsp;mixed&nbsp;$userdata&nbsp;=&nbsp;NULL&nbsp;] )</span></strong></p>\n\n<ul>\n	<li>the first parameter is the targeting array, or reference of the array</li>\n	<li>the name of the callback function which has by default two parameters: <span style=\"background-color:rgb(122, 255, 145)\">value of an element as the 1st and index of it as the second</span></li>\n	<li>the 3rd optional parameter will be passed as the third parameter of the callback function</li>\n	<li>returns&nbsp;TRUE&nbsp;on success or&nbsp;FALSE&nbsp;on failure.</li>\n	<li><span style=\"background-color:rgb(255, 236, 0)\">it is not affected by the internal array pointer of&nbsp;array.&nbsp;array_walk()&nbsp;will walk through the entire array regardless of pointer position</span></li>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">if you want to modify the $value of each element inside the callback function, pass the value&nbsp;parameter to callback as reference<span style=\"background-color:white\">, <span style=\"background-color:rgb(255, 236, 0)\">passing key parameter as reference to callback seems does not work</span></span></span></li>\n</ul>\n\n<p><strong>For example, basic usage:</strong></p>\n\n<pre>\n<code class=\"language-php\">$a = [\'color\'=&gt;\'red\', \'weather\'=&gt;\'sunny\'];\n\n$b = array_walk($a, \'printDemo\');\n/*\ncolor is red \nweather is sunny\n*/\n\nprint_r($a);//Array ( [color] =&gt; red [weather] =&gt; sunny ) \nvar_dump($b);//true\n\nfunction printDemo($val, $key){\n	echo \"$key is $val, \";\n}</code></pre>\n\n<p><strong>use&nbsp;reference as first parameter of callback:</strong></p>\n\n<pre>\n<code class=\"language-php\">$a = [\'age\'=&gt;32, \'height\'=&gt;177];\n\n$b = array_walk($a, \'printDemo\');\n\nprint_r($a);//Array ( [age] =&gt; 33 [height] =&gt; 178 )\nvar_dump($b);//True\n\nfunction printDemo(&amp;$val, &amp;$key){\n	$val++;\n    $key = $key . \'ful\';\n}</code></pre>','2016-09-12 22:27:03',3),(243,'Statsit','Database','Archive & Deletion','<p>Samples marked as &quot;Archiving &amp; Deletion&quot; is&nbsp;handled manually, two related directories are:</p>\n\n<ul>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">/shared/statsit/tools/maintenance/archive_delete_slots</span>: which includes scripts to process the actual tasks</li>\n	<li><span style=\"background-color:rgb(255, 236, 0)\">/storage/archive_then_delete</span>: saves the archived samples waiting to be uploaded to the cloud and then purged</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Steps of runing archiving tasks</span></strong></p>\n\n<pre>\n<code class=\"language-bash\"># generate a new file including list of sample IDS which are marked as &quot;Archive and Deletion&quot;\nphp archive_scheduled-to-archive_slots.php\n# the path of the file looks like &quot;out/archive-2016-09-13-02-58-16.txt&quot;\n\n# then trigger the real archiving process\nnohup php archive_scheduled-to-archive_slots_kan.php archive out/archive-2016-09-13-02-58-16.txt db &amp;\nnohup php archive_scheduled-to-archive_slots_kan.php archive out/archive-2016-09-13-02-58-16.txt mentions_all &amp;\n\n# after completing archiving, then can purge the sample data from database and mentions pool\nnohup php delete_scheduled-to-delete_slots_kan.php delete out/archive-2016-09-16-12-28-39.txt db &amp;\nnohup php delete_scheduled-to-delete_slots_kan.php delete out/archive-2016-09-16-12-28-39.txt mentions_all &amp;</code></pre>\n\n<p>FTP Address</p>\n\n<pre>\n<code class=\"language-php\">$server = &quot;ftp.livedrive.com&quot;;\n$ftp_user_name = &quot;juha.rantala@statsit.com&quot;;\n$ftp_user_pass = &quot;s1lvermug&quot;;</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Steps of manually deleting scheduled samples</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">nohup /usr/local/bin/php /shared/statsit/tools/maintenance/archive_delete_slots/delete_scheduled-to-delete_slots.php delete &amp;</code></pre>','2017-05-04 11:34:35',6),(244,'PHP','Error Handler','Why And When To Use Try/catch','<p><strong><span style=\"color:#B22222\">A good explanation from StackOverflow</span></strong></p>\n\n<p>&quot;I&#39;d use the try/catch block when the normal path through the code should proceed without error unless there are truly some exceptional conditions -- like the server being down, your credentials being expired or incorrect. I wouldn&#39;t necessarily use it to handle non-exceptional errors -- say like the current user not being in the correct role. That is, when you can reasonably expect and handle an error that is not an exceptional condition, I think you should do your checks.</p>\n\n<p>In the case that you&#39;ve described -- setting up and performing a query, a try/catch block is an excellent way to handle it as you normally expect the query to succeed. On the other hand, you&#39;ll probably want to check that the contents of result are what you expect with control flow logic rather than just attempting to use data that may not be valid for your purpose.</p>\n\n<p>One thing that you want to look out for is sloppy use of try/catch. Try/catch shouldn&#39;t be used to protect yourself from bad programming -- the &quot;I don&#39;t know what will happen if I do this so I&#39;m going to wrap it in a try/catch and hope for the best&quot; kind of programming. Typically you&#39;ll want to restrict the kinds of exceptions you catch to those that are not related to the code itself (server down, bad credentials, etc.) so that you can find and fix errors that are code related (null pointers, etc.).&quot;</p>','2016-09-13 19:58:56',0),(245,'JQuery','Deferred','Attach Dynamic Number Of Deferred To $.when()','<p>We can use .<span style=\"background-color:#7AFF91\">apply()</span> to attach dynamically generated number of deferred objects to $.when() and then <span style=\"background-color:#FFEC00\">arguments</span> object passed to callback function will include all returned datasets</p>\n\n<pre>\n<code class=\"language-javascript\">$.when.apply($, requests).done(function () {\n    console.log(arguments); //it is an array like object which can be looped\n    var total = 0;\n    $.each(arguments, function (i, data) {\n        console.log(data); //data is the value returned by each of the ajax requests\n\n        total += data[0]; //if the result of the ajax request is a int value then\n    });\n\n    console.log(total)\n});</code></pre>\n\n<p>&nbsp;</p>','2016-09-15 13:06:44',5),(246,'JavaScript','Array Object Methods','Max & Min Value','<p>We can call <span style=\"background-color:rgb(255, 236, 0)\">Math.max.apply() or Math.min.apply()</span> against array element to get the maxmium or minimum value inside an array with numeric values.</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Legacy Way</span></strong></p>\n\n<pre>\n<code class=\"language-javascript\">var a = [1, 2, 3, 4, 5]\nMath.max.apply(null, a)\n//5\nMath.min.apply(null, a)\n//1\nMath.min.apply(Math, a)\n//1\nMath.max.apply(Math, a)\n//5</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">ECMAScript 6 Way via &quot;Spread Operator&quot;</span></strong></p>\n\n<pre>\n<code class=\"language-javascript\">Math.max(...a);//5, is equivalent to Math.max(1,2,3,4,5)\nMath.min(...a);//1\n//spread operator ... will expand the array elements automatically</code></pre>\n\n<p>&nbsp;</p>','2016-09-15 17:03:46',0),(247,'HTML','DOM','Iframe','<p>Something useful about iframe from Stack OverFlow:</p>\n\n<p><span style=\"background-color:#7AFF91\">An iframe is a &#39;hole&#39; in your page that displays another web page inside of it. The contents of the iframe is not in any shape or form part of your parent page.</span></p>\n\n<p>Your options are:</p>\n\n<ol>\n	<li>give the file that is being loaded in the iframe the necessary CSS</li>\n	<li><span style=\"background-color:#FFEC00\">if the file in the iframe is from the same domain as your parent, then you can access the DOM of the document in the iframe from the parent.</span></li>\n	<li>don&#39;t use an iframe (are you SURE you need one?)</li>\n</ol>','2016-09-16 20:48:23',1),(248,'Statsit','Beat','Configuration Database','<h3>Multiple databases are used to configure project installed in BEAT</h3>\n\n<h3><strong><span style=\"color:rgb(178, 34, 34)\">1. Filters</span></strong></h3>\n\n<p>The database is <span style=\"background-color:rgb(122, 255, 145)\"><strong>Statsit.brands_dashboard_filters.</strong></span></p>\n\n<p>Some useful SQL:</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">a) check available filter&nbsp;types of a given project</span></p>\n\n<pre>\n<code class=\"language-sql\">SELECT brand_id, type, GROUP_CONCAT(distinct country) FROM brands_dashboard_filters WHERE brand_id = 1 GROUP BY type ORDER BY type DESC;\n+----------+------------------------------+--------------------------------+\n| brand_id | type                         | group_concat(distinct country) |\n+----------+------------------------------+--------------------------------+\n|        1 | share_of_voice               | SA,EG,TH,IN                    |\n|        1 | sentiment_filter_by_language | SA,IN,EG,TH                    |\n|        1 | emotional_words              | TH,SA,EG,IN                    |\n|        1 | customised_tracking          | SA,TH,EG,IN                    |\n|        1 | brand_equity                 | EG,IN,SA,TH                    |\n+----------+------------------------------+--------------------------------+</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">b) check brand-specifc brand_equity filters:</span></p>\n\n<pre>\n<code class=\"language-sql\">SELECT brand_id, brand, GROUP_CONCAT(DISTINCT label) FROM brands_dashboard_filters WHERE brand_id = 5 AND type = \'brand_equity\' GROUP BY brand ORDER BY brand DESC LIMIT 2;\n+----------+----------+------------------------------+\n| brand_id | brand    | group_concat(distinct label) |\n+----------+----------+------------------------------+\n|        5 | SBI      | Group,Individual,Online      |\n|        5 | RELIGARE | Health,Travel,Fixed Benefit  |\n+----------+----------+------------------------------+</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">c) check project-wise brand_equity filters(&#39;UNKNOWN&#39; brand column)</span></p>\n\n<pre>\n<code class=\"language-sql\">SELECT brand_id, brand, label, GROUP_CONCAT(DISTINCT country) FROM brands_dashboard_filters WHERE brand_id = 1 AND type = \'brand_equity\' GROUP BY label ORDER BY brand desc;\n+----------+---------+--------------+--------------------------------+\n| brand_id | brand   | label        | group_concat(distinct country) |\n+----------+---------+--------------+--------------------------------+\n|        1 | UNKNOWN | Daily ritual | IN,TH,SA,EG                    |\n|        1 | UNKNOWN | Great Taste  | IN,TH,EG,SA                    |\n|        1 | UNKNOWN | Love         | IN,SA,EG,TH                    |\n|        1 | UNKNOWN | Refreshment  | SA,EG,IN,TH                    |\n+----------+---------+--------------+--------------------------------+</code></pre>','2016-12-12 11:31:54',0),(249,'MVC Framework','CodeIgniter','Database Access','<h3><span style=\"color:rgb(178, 34, 34)\"><strong>Access database server and run query</strong></span></h3>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. Default way </span></p>\n\n<pre>\n<code class=\"language-php\">$this-&gt;load-&gt;database(\'group_name\');\n$query = \'SELECT NOW()\';\n$result = $this-&gt;db-&gt;query($query);</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. Asssign the established connection to an object</span></p>\n\n<pre>\n<code class=\"language-php\">$DB1 = $this-&gt;load-&gt;database(\'db1\');\n$query = \'SELECT NOW()\';\n$result = $DB1-&gt;query($query);</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3. Choose the database name to act</span></p>\n\n<p>For example, there are databases &#39;master1&#39;, &#39;master2&#39;, and &#39;master3&#39; inside db server &#39;db1&#39;</p>\n\n<pre>\n<code class=\"language-php\">$DB1 = $this-&gt;load-&gt;database(\'db1\');\n$DB1-&gt;db_select(\'master1\');\n$query = \'SELECT COUNT(*) FROM table1\';\n$result = $DB1-&gt;query($query);</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4. Handle the errors raised in last query</span></p>\n\n<pre>\n<code class=\"language-php\">$DB1 = $this-&gt;load-&gt;database(\'db1\');\n$DB1-&gt;db_select(\'master1\');\n$query = \'SELECT COUNT(*) FROM table1\';\n\nif(!$result = $DB1-&gt;query($query)){\n  echo $DB1-&gt;error();\n}</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">5. Handle the query results in objects</span></p>\n\n<pre>\n<code class=\"language-php\">$DB1 = $this-&gt;load-&gt;database(\'db1\');\n$DB1-&gt;db_select(\'master1\');\n$query = \'SELECT title, name, body FROM table1\';\n\nif(!$result = $DB1-&gt;query($query)){\n  echo $DB1-&gt;error();\n}else{\n  foreach ($query-&gt;result() as $row){\n    echo $row-&gt;title;\n    echo $row-&gt;name;\n    echo $row-&gt;body;\n  }\n}</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">6. Handle the query results in arraies</span></p>\n\n<pre>\n<code class=\"language-php\">$DB1 = $this-&gt;load-&gt;database(\'db1\');\n$DB1-&gt;db_select(\'master1\');\n$query = \'SELECT title, name, body FROM table1\';\n\nif(!$result = $DB1-&gt;query($query)){\n  echo $DB1-&gt;error();\n}else{\n  foreach ($query-&gt;result_array() as $row){\n    echo $row[\'title\'];\n    echo $row[\'name\'];\n    echo $row[\'body\'];\n  }\n}</code></pre>','2016-10-20 21:29:19',0),(250,'HTML','Focus The Detail','Textarea Tag','<p>It is very common that we add new lines inside a html element, and brower will automatically trim the new lines and spaces for us, for example:</p>\n\n<pre>\n<code class=\"language-html\">&lt;p&gt;\n	hello \n	world!\n&lt;/p&gt;</code></pre>\n\n<p>And you will still get <span style=\"color:rgb(178, 34, 34)\">&quot;hello world!&quot;</span> in browser.</p>\n\n<p>However, for &lt;textarea&gt; tag, content inside it will not be trimmed automatically, for example:</p>\n\n<pre>\n<code class=\"language-html\">&lt;textarea col=\'10\' row=\'4\'&gt;\n	hello\n	world\n	Finland\n	Helsinki\n&lt;/textarea&gt;</code></pre>\n\n<p>You will get this:</p>\n\n<p><img alt=\"\" src=\"http://desktop.io/cknote/assets/img/textarea_newline.png\" /></p>','2016-10-21 19:55:47',0),(251,'HTML','Focus The Detail','Value Of Disabled Input Field','<h3><strong><span style=\"color:rgb(178, 34, 34)\">Value of disabled input field won&#39;t be submitted, even though the value is predefined</span></strong></h3>\n\n<p>For example we have such input field defined in html</p>\n\n<pre>\n<code class=\"language-html\">&lt;form action=&quot;post.php&quot; method=&quot;POST&quot;&gt;\n  &lt;input type=&quot;text&quot; name=&quot;testInput&quot; value=&#39;default value&#39;&gt;\n  &lt;input type=&#39;submit&#39; name=&#39;submit&#39; value=&#39;submit&#39;&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>After clicking submit, we will get POST value as follows:</p>\n\n<pre>\n<code class=\"language-php\">array(2) {\n  [&quot;testInput&quot;]=&gt;\n  string(13) &quot;default value&quot;\n  [&quot;submit&quot;]=&gt;\n  string(6) &quot;submit&quot;\n}</code></pre>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">After disable the input field by doing following change</span></p>\n\n<pre>\n<code class=\"language-html\">&lt;form action=&quot;post.php&quot; method=&quot;POST&quot;&gt;\n  &lt;input type=&quot;text&quot; name=&quot;testInput&quot; value=&#39;default value&#39; disabled&gt;\n  &lt;input type=&#39;submit&#39; name=&#39;submit&#39; value=&#39;submit&#39;&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>we will get POST value like this:</p>\n\n<pre>\n<code class=\"language-php\">array(1) {\n  [&quot;submit&quot;]=&gt;\n  string(6) &quot;submit&quot;\n}\n//$_POST[&#39;testInput&#39;] is not defined</code></pre>','2016-10-23 16:50:47',4),(252,'Statsit','Database','MongoDB On 108','<p><strong><span style=\"color:rgb(178, 34, 34)\">Start MongoD:</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">sudo /usr/local/mongodb-linux-x86_64-2.2.2/bin/mongod -f /storage/mongodb/mongod.conf</code></pre>\n\n<ul>\n	<li>-f: indicate the path of&nbsp;configuration file to use to initialize the mongodb, all following options are defined inside the file</li>\n	<li>--fork: means to run mongo server in daemon mode (serving at background)</li>\n	<li>--logappend: append new logs to log path but not overwrite it.</li>\n	<li>--journal: it is chosen by default, used to ensure mongodb can be recovered to the consistent status after unclean shutdown happens</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Run mongo client</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">/usr/local/mongodb-linux-x86_64-2.2.2/bin/mongo</code>\n</pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>Check key info of Influencer</strong></span></p>\n\n<pre>\n<code class=\"language-javascript\">db.influencr_sets.find({id: 152}, {_id:0, id:1, ids:1, ida:1, sid:1, sids:1, brand:1, blfilter:1, name:1, status:1, reqBrand:1, reqPassion:1}).pretty()\n#Check subscores\ndb.twitter.find({set: 5, &#39;sc_brand.5&#39;: {$gt: 0}}, {_id:0, sc_ampl:1, sc_brand:1, sc_cont:1, handle:1, sc:1}).sort({&#39;sc.5&#39;: -1}).limit(2).pretty()</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>Default IAB filters IDs</strong></span></p>\n\n<p>1. English: 2, 1, 6, 22, 13, 5, 15, 14, 19, 17, 4, 9, 11, 12, 10, 0, 8, 21, 7, 16, 20</p>\n\n<p>2. Finnish: 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316</p>\n\n<p>For example, update a set&#39;s cloud ids in a batch<br />\ndb.influencr_sets.update({id: 132}, {$set: {cloud: [296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316]}});</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Check MongoDB ports</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">sudo lsof -iTCP -n -P | grep -E &#39;27017|PID&#39;\nsudo lsof -iTCP -n -P | grep -E &#39;27017.*LISTEN|PID&#39;\nnetstat -anp | grep -Ei &#39;27017.*listen|proto&#39;</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Check all listening ports</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">ss -tln</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>Backup and Restore</strong></span></p>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">$TODAY</span> is an environmental variable that give date as folder name</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. Backup All</span></p>\n\n<pre>\n<code class=\"language-bash\">/usr/local/mongodb-linux-x86_64-2.2.2/bin/mongodump --out /storage/mongodb/backup/$TODAY</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. Backup Chosen DB and Collections</span></p>\n\n<pre>\n<code class=\"language-bash\">/usr/local/mongodb-linux-x86_64-2.2.2/bin/mongodump --collection collection --db db --out /storage/mongodb/backup/$TODAY</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3. Restore All</span></p>\n\n<pre>\n<code class=\"language-bash\">/usr/local/mongodb-linux-x86_64-2.2.2/bin/mongorestore /storage/mongodb/backup/$TODAY</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4. Restore Chosen DB</span></p>\n\n<pre>\n<code class=\"language-bash\">/usr/local/mongodb-linux-x86_64-2.2.2/bin/mongorestore --db backup_test /storage/mongodb/backup/$TODAY/backup_test</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">5. Restore Chosen DB and Collections</span></p>\n\n<pre>\n<code class=\"language-bash\">/usr/local/mongodb-linux-x86_64-2.2.2/bin/mongorestore -c test -d backup_test /storage/mongodb/backup/$TODAY/backup_test/test.bson</code></pre>','2017-03-30 11:54:02',7),(253,'JQuery','3rd Party Libs','JVectorMap','<h3><strong><span style=\"color:#B22222\">How to create any national map supported by jVector Map by converting open map data sources?</span></strong></h3>\n\n<p>&nbsp;</p>','2016-11-02 17:02:06',2),(254,'PHP','Regex','Full Word Search','<p>If you want to use regex to search the appearance of an exact pattern as a whole word. Then you need to add word boudary operate &quot;b&quot;</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">When no word boundary operator added</span></strong></p>\n\n<pre>\n<code class=\"language-php\">$pattern = \'Banjar\';\n$word = \'Banjarbaru\';\n	\nvar_dump(preg_match(\'~\' . $pattern . \'~iu\', $word));//1 means matching</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>When word boundary operator added</strong></span></p>\n\n<pre>\n<code class=\"language-php\">$pattern = \'Banjar\';\n$word = \'Banjarbaru\';\n	\nvar_dump(preg_match(\'~\\b\' . $pattern . \'\\b~iu\', $word));//0 means no match</code></pre>','2016-11-03 22:34:45',1),(255,'PHP','Date','Set Default','<p>When data and time related functions are called, system sometimes forces a line of code to set the timezone, if occurs, then use the following code as an example:</p>\n\n<pre>\n<code class=\"language-php\">date_default_timezone_set(\'Europe/Helsinki\');</code></pre>\n\n<p>And you can find more supported timezones <a href=\"http://php.net/manual/en/timezones.php\">here</a></p>','2016-11-14 17:13:51',0),(256,'MySql','Data Types','Character Length Vs Display Width','<pre>\n<code class=\"language-sql\">CREATE TABLE test(a INT, b SMALLINT, c BIGINT);\nDESCRIBE test;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| a     | int(11)     | YES  |     | NULL    |       |\n| b     | smallint(6) | YES  |     | NULL    |       |\n| c     | bigint(20)  | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+</code></pre>\n\n<p>You didn&#39;t put those values&nbsp;11,&nbsp;6, and&nbsp;20&nbsp;in there. Where did they come from and what are they?</p>\n\n<p>You might think that the digit inside the parentheses means maximum number of digits which can be stored, just like&nbsp;string data type, <strong><span style=\"color:rgb(178, 34, 34)\">actually they are not the same at all !!!!</span></strong></p>\n\n<ol>\n	<li>For an integer type (the value in parentheses called the&nbsp;<span style=\"background-color:rgb(122, 255, 145)\">display width</span>&nbsp;of the field. This is different from (and somewhat less intuitive than) the parenthesised value in character fields&mdash;such as&nbsp;VARCHAR(10)&mdash;where it&#39;s the <span style=\"background-color:rgb(255, 236, 0)\">maximum number of characters</span> you can store in the field, and for floating types where it describes the <span style=\"background-color:rgb(255, 118, 131)\">total number of digits</span> you can store.</li>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">The display width does&nbsp;not&nbsp;constrain the range of values that can be stored in the column</span>. <span style=\"background-color:rgb(255, 236, 0)\">Nor does it prevent values wider than the column display width from being displayed correctly. </span>For example, a column specified as&nbsp;SMALLINT(3)&nbsp;has the usual&nbsp;SMALLINTrange of&nbsp;-32768&nbsp;to&nbsp;32767, and values outside the range permitted by three digits are displayed in full using more than three digits.</li>\n</ol>\n\n<p>You can see the difference of having display width defined with &#39;zerofill&#39; option:</p>\n\n<pre>\n<code class=\"language-sql\">CREATE TABLE d2(c1 BIGINT(5) ZEROFILL, c2 BIGINT ZEROFILL, c3 BIGINT(30) ZEROFILL);\nINSERT INTO d2 VALUES (1, 1, 1);\nINSERT INTO d2 VALUES (123456, 123456, 123456);\nSELECT * FROM d2;\n+--------+----------------------+--------------------------------+\n| c1     | c2                   | c3                             |\n+--------+----------------------+--------------------------------+\n|  00001 | 00000000000000000001 | 000000000000000000000000000001 |\n| 123456 | 00000000000000123456 | 000000000000000000000000123456 |\n+--------+----------------------+--------------------------------+</code></pre>\n\n<p>&nbsp;</p>','2016-11-16 17:38:13',1),(257,'HTML','DOM','Multiple Select','<h3><strong><span style=\"color:rgb(178, 34, 34)\">1. General way of using &#39;action&#39; attribute</span></strong></h3>\n\n<ul>\n	<li>In order to enable multiple select, you need to<span style=\"background-color:rgb(255, 236, 0)\"> add &#39;multiple&#39; attribute</span> to the target select element</li>\n</ul>\n\n<pre>\n<code class=\"language-html\">&lt;form action=\"post.php\" method=\"POST\"&gt;\n  &lt;select id =\'multi\' name=\"cars[]\" multiple&gt;\n    &lt;option value=\"volvo\"&gt;Volvo&lt;/option&gt;\n	&lt;option value=\"saab\"&gt;Saab&lt;/option&gt;\n	&lt;option value=\"opel\"&gt;Opel&lt;/option&gt;\n	&lt;option value=\"audi\"&gt;Audi&lt;/option&gt;\n  &lt;/select&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code></pre>\n\n<p>Backend file</p>\n\n<pre>\n<code class=\"language-php\">echo \"&lt;pre&gt;\";\nvar_dump($_POST);\necho \"&lt;/pre&gt;\";</code></pre>\n\n<p>And in order to get multiple value transferred to backend<span style=\"background-color:#FF7683\"> as an array of values</span>, <span style=\"background-color:rgb(255, 236, 0)\">you need to add a square brackets suffix to the name of the select element</span>, just as shown above. And if you choose &#39;Volvo&#39; and &#39;Opel&#39; simultaneously, the backend will catch <span style=\"background-color:rgb(122, 255, 145)\">$_POST</span> as follows:</p>\n\n<pre>\n<code class=\"language-php\">array(1) {\n  [\"cars\"]=&gt;\n  array(2) {\n    [0]=&gt;\n    string(5) \"volvo\"\n    [1]=&gt;\n    string(4) \"opel\"\n  }\n}</code></pre>\n\n<h3><strong><span style=\"color:rgb(178, 34, 34)\">2. When using jQuery Ajax call</span></strong></h3>\n\n<ul>\n	<li>\n	<p>There is <span style=\"background-color:rgb(255, 236, 0)\">no need to add &#39;square brackets&#39;</span> following the name of the select element</p>\n	</li>\n	<li>\n	<p>There is <span style=\"background-color:rgb(255, 236, 0)\">no need to set &#39;method&#39; and &#39;action&#39; attributes </span>inside form element as well</p>\n	</li>\n</ul>\n\n<pre>\n<code class=\"language-html\">&lt;form id=\'target\'&gt;\n  &lt;select id =\'multi\' name=\"cars\" multiple&gt;\n	&lt;option value=\'\'&gt;None&lt;/option&gt;\n	&lt;option value=\"volvo\"&gt;Volvo&lt;/option&gt;\n	&lt;option value=\"saab\"&gt;Saab&lt;/option&gt;\n	&lt;option value=\"opel\"&gt;Opel&lt;/option&gt;\n	&lt;option value=\"audi\"&gt;Audi&lt;/option&gt;\n  &lt;/select&gt;\n  &lt;input id=\'submit\' type=\"submit\"&gt;\n&lt;/form&gt;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">&nbsp;2.1 Provide parameters as an object</span></p>\n\n<pre>\n<code class=\"language-javascript\">$(\'#target\').on(\'submit\', function(e){\n  console.log($(\'#multi\').val());//orginal value of the multiple select\n  e.preventDefault();\n  var data = {\n	multiSelect: $(\'#multi\').val()\n  };\n  $.ajax({\n	url: \'post.php\',\n	type: \'POST\',\n	data: data,\n	success: function(data){\n      $(\'#result\').html(data);\n	},\n	error: function(){\n	}\n  });\n});\n</code></pre>\n\n<p>Then you will get an array of values selected</p>\n\n<pre>\n<code class=\"language-php\">//console.log\nArray [ \"volvo\", \"saab\", \"opel\"]\n\n//$_POST\narray(1) {\n  [\"multiSelect\"]=&gt;\n  array(3) {\n    [0]=&gt;\n    string(5) \"volvo\"\n    [1]=&gt;\n    string(4) \"saab\"\n    [2]=&gt;\n    string(4) \"opel\"\n  }\n}</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2.2 Provide parameters as a string.</span></p>\n\n<pre>\n<code class=\"language-javascript\">$(\'#target\').on(\'submit\', function(e){\n  console.log($(\'#multi\').val());\n  e.preventDefault();\n  $.ajax({\n	url: \'post.php\',\n	type: \'POST\',\n	data: \'multiSelect=\' + $(\'#multi\').val(),\n	success: function(data){\n      $(\'#result\').html(data);\n	},\n	error: function(){\n	}\n  });\n});\n</code></pre>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">Then you will get all values concatenated as a string</span></p>\n\n<pre>\n<code class=\"language-php\">//console.log\nArray [ \"volvo\", \"saab\", \"opel\"]\n\n//$_POST\narray(1) {\n  [\"multiSelect\"]=&gt;\n  string(15) \"volvo,saab,opel\"\n}</code></pre>','2017-03-30 20:08:07',5),(258,'Statsit','Work-Flow','Twitter Extraction','<p>I have written some scripts to</p>\n\n<ul>\n	<li>extract hashtag and urls from tweets via Twitter extractor library</li>\n	<li>fetch most retweeted tweets from mentions pool</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><span style=\"background-color:rgb(122, 255, 145)\">The scripts are under &#39;statsit_sphinx&#39; project folder locally and under &#39;kan_script&#39; folder under home directory of 117 server. </span>Here is the work-flow to use these scripts</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. Extract hashtags and embedded urls from tweets</span></p>\n\n<pre>\n<code class=\"language-bash\">nohup php get_hashtag_url.php 10845 &amp;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. Filter out most retweeted tweets</span></p>\n\n<pre>\n<code class=\"language-bash\">nohup php get_top_retweets.php 10845 &amp;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3. Expand extracted shorten URLs from step 1</span></p>\n\n<pre>\n<code class=\"language-bash\">nohup php expand_url.php 10845 &amp;</code></pre>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">All output will be saved as individual files with time tag&nbsp;under &#39;twitter_extraction&#39; folder under &#39;kan_script&#39; folder</span></p>','2016-11-21 13:25:23',0),(259,'MongoDB','Basics','Shutdown','<pre>\n<code class=\"language-bash\">&gt; use admin\nswitched to db admin\n&gt; db.shutdownServer()</code></pre>','2016-11-21 14:40:47',0),(260,'PHP','Iteration','Foreach In Detail','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Basic rules of the foreach() construct </span></strong></p>\n\n<ul>\n	<li>works for <span style=\"background-color:rgb(255, 236, 0)\">both Array and Object</span></li>\n	<li>as of PHP 5, foreach resets internal array pointer automatically, so no need to use reset() against the array before executing foreach function</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Variables feeded by the array or object in each loop are with global scope but not local scope within the foreach() function</span></strong></p>\n\n<pre>\n<code class=\"language-php\">$a = [&#39;color&#39;=&gt;&#39;red&#39;, &#39;mood&#39;=&gt;&#39;colorful&#39;];\nforeach($a as $key =&gt; $val){\n}\nvar_dump($key, $val);//&#39;mood&#39;, &#39;colorful&#39;</code></pre>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">NOTE</span>: So if you have variables with the same name as &#39;$key&#39; or &#39;$val&#39;, then they will be overriden after foreach function.</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>3. Can use reference &#39;&amp;&#39; to directly modify values inside an array via foreach function&nbsp;</strong></span></p>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-php\">$arr = array(1, 2, 3, 4);\nforeach ($arr as &amp;$value) {\n    $value = $value * 2;\n}\nprint_r($arr);// array(2, 4, 6, 9)</code></pre>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">NOTE</span>: when using reference, after the entire foreach loop, the $value remains the reference of the last element of the array. So it is better to use unset($value) after the loop to avoid any possible unexpected behaviors, for example:</p>\n\n<pre>\n<code class=\"language-php\">$arr = array(1, 2, 3, 4);\nforeach ($arr as &amp;$value) {\n    $value = $value * 2;\n}\n// $arr is now array(2, 4, 6, 8)\n// without an unset($value), $value is still a reference to the last item: $arr[3]\n$value = 10;\nprint_r($arr);// array(2, 4, 6, 10)</code></pre>','2016-11-23 21:08:49',0),(261,'CSS','Snippets','Table Related','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Draw borders over all cells inside a table</span></strong></p>\n\n<pre>\n<code class=\"language-css\">table, td, th{\n  border: 1px solid #ccc;\n}</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Leave no space between cells inside a table, i.e. collapse</span></strong></p>\n\n<pre>\n<code class=\"language-css\">table{\n  border-collapse: collapse;\n}</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. Set spacing between cells inside a table</span></strong></p>\n\n<pre>\n<code class=\"language-css\">table{\n  border-collapse: separate;\n  border-spacing: 10px 20px;\n}</code></pre>\n\n<ul>\n	<li>&#39;border-spacing&#39; only works together with &#39;border-collapse: separate&#39;</li>\n	<li>If two values set for spacing, then first one is for horizontal space, second is for vertical space</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>4. Set padding inside each cell</strong></span></p>\n\n<pre>\n<code class=\"language-css\">td, th{\n  padding: 10px 20px;\n}</code></pre>','2016-11-29 10:18:11',1),(262,'Statsit','Accounts','Amazon','<p>username: aws@statsit.com password: awsgr888</p>\n\n<p>username: amazon@statsit.com password: amagr888</p>','2017-05-04 11:36:00',7),(263,'Apache','.htaccess','Redirect','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. Redirect a single page</strong></span></p>\n\n<pre>\n<code class=\"language-apache\">Redirect 301 /oldpage.html http://www.yoursite.com/newpage.html\nRedirect 301 /oldpage2.html http://www.yoursite.com/folder/</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Redirect an entire site</span></strong></p>\n\n<pre>\n<code class=\"language-apache\">Redirect 301 / http://newsite.com/</code></pre>','2016-12-01 21:57:12',0),(264,'PHP','Tricks And Traps','Small Details','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. only variable can be used as reference</span></strong></p>\n\n<pre>\n<code class=\"language-php\">function hi(&amp;$a){\n  var_dump($a);\n}\nhi(false);//won\'t work\nhi($a=false);//will work</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. json_encode only supports UTF8 string </span></strong></p>\n\n<pre>\n<code class=\"language-php\">// avoid error raised by json_encode() which only supports UTF8\n$utf8String = mb_convert_encoding($string, \'UTF-8\');\n$json = json_encode($utf8String);</code></pre>\n\n<p><strong><span style=\"color:#B22222\">3. list() can only be assigned by array with numberic index </span></strong></p>\n\n<pre>\n<code class=\"language-php\">$a = [\'hello\'=&gt;\'world\'];\nlist($b) = $a;//error\n\n$a = [\'world\'];\nlist($b) = $a;\necho $b; //\'world\'</code></pre>','2016-12-08 21:53:47',3),(265,'MySql','Regex','Basic Usage','<h3><strong><span style=\"color:rgb(178, 34, 34)\">Basic Syntax:</span></strong></h3>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. REGEXP or RLIKE (alias): match a pattern</span></p>\n\n<pre>\n<code class=\"language-sql\">expression REGEX pattern\n--for example\nSELECT \'hello\' REGEXP \'hello\';\nSELECT * FROM table WHERE attr REGEXP pattern;\nSELECT * FROM table WHERE attr RLIKE pattern;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. NOT REGEXP: does not match a pattern</span></p>\n\n<pre>\n<code class=\"language-sql\">SELECT * FROM table WHERE attr NOT REGEXP pattern;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3. Returned Value</span></p>\n\n<ul>\n	<li>Returns 1 if expr matches pat; otherwise it returns 0.</li>\n	<li>If either expr or pat is NULL, the result is NULL.</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4. Case-sensitive REGEXP</span></p>\n\n<ul>\n	<li>REGEXP is not case sensitive, except when used with binary strings.</li>\n</ul>\n\n<pre>\n<code class=\"language-sql\">SELECT \'HELLO\' REGEXP \'hello\';--true, case-insensitive\nSELECT \'HELLO\' REGEXP BINARY \'hello\';--false, case-sensitive</code></pre>\n\n<h3><span style=\"color:rgb(178, 34, 34)\"><strong>Regular Expression Examples</strong></span></h3>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. Word boundary(full text search)</span></p>\n\n<pre>\n<code class=\"language-sql\">SELECT \'godness\' REGEXP \'god\';--true\nSELECT \'godness\' REGEXP \'[[:&lt;:]](god)[[:&gt;:]]\';--false</code></pre>\n\n<ul>\n	<li>left boundary: [[:&lt;:]]</li>\n	<li>right boundary: [[:&gt;:]]</li>\n	<li>word inside boudaries much consist of only word characters. A word character is an alphanumeric character in the alnum class or an underscore (_).&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. Match any of the given keywords</span></p>\n\n<ul>\n	<li>Remember to use curly brackets to wrap the keywords separated by &#39;|&#39;</li>\n</ul>\n\n<pre>\n<code class=\"language-sql\">SELECT \'my love godness\' REGEXP \'[[:&lt;:]](my love god)|(my lovee)[[:&gt;:]]\';--true, because left boundary works only for left part keywords, right boundary only works for right part, so in the end, the left part matches the part\nSELECT \'my love godness\' REGEXP \'[[:&lt;:]]((my love god)|(my lovee))[[:&gt;:]]\';--false, because both keywords must be matched in full-text</code></pre>','2017-01-03 13:42:54',1),(266,'Mac OS X','SSH','SSH-agent','<p>As of Mac OS Sierra 10.12.2, in order to skip typing passphrase each time connecting to a remote server, add the following to the ssh config</p>\n\n<pre>\n<code class=\"language-apache\">Host *\n    ServerAliveInterval 100\n    ForwardAgent yes\n    AddKeysToAgent yes\n    UseKeychain yes\n    IdentityFile ~/.ssh/id_rsa</code></pre>\n\n<p>And use the following commands to add private keys to SSH agent</p>\n\n<pre>\n<code class=\"language-bash\">// check added keys\nssh-add -L\n// add new one\nssh-add -K ~/.ssh/id_rsa\n</code></pre>\n\n<p>&nbsp;</p>','2016-12-28 10:26:32',9),(267,'Statsit','Work-Flow','Pool Cleaning','<p><strong><span style=\"color:rgb(178, 34, 34)\">Some basic settings</span></strong></p>\n\n<ul>\n	<li>Maxium number of running processes is 32</li>\n	<li>Path of pool: /shared/statsit_var/pool</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Here is the main steps of cleaning scraped files in pool</span></strong></p>\n\n<ul>\n	<li>Find all files last modified for more than 1 min, trigger &#39;history&#39; pool cleaning; and increase the maximum number of running processes to 44.</li>\n	<li>Find all files last modified for more than 5 mins, trigger &#39;normal&#39; pool cleaning</li>\n	<li>If a file last modified for no more than 1 hour, then mark the cleaning process as &#39;<span style=\"background-color:#7AFF91\">readability</span>&#39;, otherwise, mark it &#39;<span style=\"background-color:#7AFF91\">boilerpipe</span>&#39;</li>\n</ul>','2017-02-09 09:04:38',1),(268,'CSS','Bootstrap','Table','<p><strong><span style=\"color:#B22222\">The following snippet is&nbsp;a quick note to use Bootstrap to quickly style the table:</span></strong></p>\n\n<pre>\n<code class=\"language-html\">&lt;div class=\"table-responsive\"&gt;\n  &lt;table class=\"table table-striped table-bordered table-hover table-sm\"&gt;\n	&lt;thead&gt;\n	  &lt;tr&gt;\n	    &lt;th style=\'width:5%\'&gt;Platform&lt;/th&gt;\n	    &lt;th&gt;Author&lt;/th&gt;\n	    &lt;th&gt;Date&lt;/th&gt;\n	    &lt;th class=\'col-md-8 col-sm-8 col-xs-8\'&gt;Abstract&lt;/th&gt;\n	    &lt;th&gt;URL&lt;/th&gt;\n	  &lt;/tr&gt;\n	&lt;/thead&gt;\n	&lt;tbody&gt;\n	&lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/div&gt;</code></pre>\n\n<p>1. &#39;<span style=\"background-color:#7AFF91\">table-responsive</span>&#39; div element will make the wrapped table responsive by adding horizontal scrolling bar in small screen size of mobile devices</p>\n\n<p>2.&nbsp;<span style=\"background-color:#FFEC00\">&#39;table</span>&#39; adds default styles to table element, e.g.</p>\n\n<pre>\n<code class=\"language-css\">table {\n  width: 100%;\n  max-width: 100%;\n  margin-bottom: 20px;\n  background-color: transparent;\n  border-spacing: 0;\n  border-collapse: collapse;\n}</code></pre>\n\n<p>3. <span style=\"background-color:#FF7683\">&#39;table-striped&#39; </span>makes zebra looks over rows of table</p>\n\n<p>4. &#39;<span style=\"background-color:#7AFF91\">table-bordered</span>&#39; adds border to table and all cells</p>\n\n<p>5. &#39;<span style=\"background-color:#FFEC00\">table-hover</span>&#39; adds background color when hover on any row inside table</p>\n\n<p>6. &#39;<span style=\"background-color:#FF7683\">table-sm</span>&#39;&nbsp;makes tables more compact by cutting cell padding in half.</p>','2017-01-02 18:34:59',0),(269,'JQuery','Functions','\"data-\" Attribute','<p><strong><span style=\"color:rgb(178, 34, 34)\">jQuery provides .data() function to set or get data-* attribute easily and fast</span></strong></p>\n\n<pre>\n<code class=\"language-javascript\">$(selector).data(&#39;hello&#39;, &#39;world&#39;);\n$(selector).data({&#39;mood&#39;: &#39;colorful&#39;});\n$(selector).data();\n//it will return entire data object\n{ \n  hello: &#39;world&#39;,\n  mood: &#39;colorful&#39;\n}\n$(selector).data(&#39;mood&#39;);\n//it will return &#39;colorful&#39;</code></pre>\n\n<ul>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">all newly added data will extend the existing ones but not override</span></strong></li>\n</ul>','2017-02-27 20:32:55',1),(270,'MongoDB','Security','Basic Setting(v2.2)','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Check if your mongo server is publicly accessible:</span></strong></p>\n\n<pre>\n<code class=\"language-bash\"># format: path/of/mongo/client remote-ip:mongod-port\n# for example\nmongo 69.160.245.108:27017</code></pre>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">If you can successfully access and execute the commands like &#39;show dbs&#39; or &#39;show collections&#39;, then you have a big risk of data exposure.</span></p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Creating a configuration file to easily configure mongod</span></strong></p>\n\n<pre>\n<code class=\"language-ini\">logpath = /var/log/mongodb.log\nlogappend = true\nfork = true\nauth = false\ndbpath = /storage/mongodb/db/\njournal = true\nnohttpinterface = true\nbind_ip = 127.0.0.1,192.168.0.18</code></pre>\n\n<ul>\n	<li>&#39;<span style=\"background-color:rgb(122, 255, 145)\">fork</span>&#39; makes mongod a service running on the background</li>\n	<li>&#39;<span style=\"background-color:rgb(255, 236, 0)\">auth</span>&#39; enables user authentication and authrization, data cannot be accessed without correct credentials. It is recommended and optional, you can add firewall to your server running mongodb to limit allowed ip addresses to access your mongod server</li>\n	<li>&#39;<span style=\"background-color:rgb(122, 255, 145)\">bind_ip</span>&#39; will set the ips where mongod listens the connection request, .i.e all apps have to access mongod by calling this ip address, for example as above, only localhost and machines within same local network can connect. External IPs are not able to connect mongod</li>\n	<li>&#39;<span style=\"background-color:#FF7683\">nohttpinterface</span>&#39; will disable the http access interface, it is highly recommended to set it to true on production server</li>\n</ul>','2017-01-10 14:01:20',0),(271,'Linux','Scripts','Useful Bash Variables','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Give formated date of today</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">export TODAY=$(date +%F)\necho $TODAY\n2017-01-10</code></pre>','2017-01-10 15:43:15',0),(272,'Statsit','Scraping & Processing','Scraping Process Monitoring','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. scraping runner</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">ps aux --sort=start_time | grep -E \'PID|scraping.runner\' | grep -v \'grep\'\nps aux --sort=start_time | grep -E \'PID|dp.moderator.machine.php\' | grep -v \'grep\'</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. pool cleaning</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">ps aux --sort=start_time | grep -E \'PID|dp.moderator\' | grep -v \'grep\'\nps aux --sort=start_time | grep -E \'PID|pool\' | grep -v \'grep\'</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. scraping log by platforms and by keywords</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">/shared/statsit_var/logs/scraping/scraping.runner.10899.$platformName.$keywordID.log, e.g.:\n/shared/statsit_var/logs/scraping/scraping.runner.10899.twitter.0.log</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">4. Trigger single clean task manually</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">nohup /usr/local/bin/php /shared/statsit/medmon/processing/dp.moderator.machine.kan.php 10458 news /storage/shared/statsit_var/pool/news_5_14848127492102933590_db3.statsit.com boilerpipe &amp;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>5. All active keywords</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">SELECT brand FROM new_mm_pool.account_brand WHERE accountID = 10895;</code></pre>\n\n<p><strong><span style=\"color:#B22222\">&nbsp;6. Trigger scraping against one keyword of a platform manually</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">nohup /usr/local/bin/php /shared/statsit/medmon/scraping/scripts/scraping.runner.kan.php 10900 discussion 15 &amp;</code></pre>','2017-05-04 11:41:56',2),(273,'Statsit','Google Search','API Parameters','<p>https://www.google.com/search?sa=N&amp;start=0&amp;num=100&amp;hl=en&amp;cr=countryFI&amp;tbo=1&amp;tbs=qdr:a,ctr:countryFI,sbd:1&amp;tbas=0&amp;q=&quot;Viking Line&quot; inurl:forum|viewthread|foorum|keskustelu|showthread|viewtopic|showtopic</p>\n\n<ol>\n	<li><span style=\"color:rgb(178, 34, 34)\">tbo</span>=1 means &ldquo;Always show search tools in the left sidebar&rdquo;, seems irrelevant</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">sa</span>= &nbsp;&nbsp; &nbsp;User search behavior parameter\n	<ul>\n		<li>sa=N &ndash; User searched</li>\n		<li>sa=X &ndash; User clicked on related searches in the SERP</li>\n	</ul>\n	</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">as_qdr</span>: means search by time filter&nbsp;(<span style=\"background-color:rgb(255, 236, 0)\">has lower priority than tbs=qdr parameter when both are given</span>)\n	<ul>\n		<li><span style=\"background-color:rgb(122, 255, 145)\">&amp;as_qdr=m&amp;tbs=qdr:w,sbd:1</span>&nbsp;then it will search last week&#39;s data sorted by date&nbsp;</li>\n		<li><span style=\"background-color:rgb(122, 255, 145)\">&amp;as_qdr=m&amp;tbs=sbd:1 (same as &amp;tbs=qdr:m,sbd:1)</span> then it will search last month&#39;s data sorted by date</li>\n		<li>&amp;as_qdr=a or &amp;as_qdr</li>\n	</ul>\n	</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">cr=country</span>FI means search for results from the given region(Finland as &#39;FI&#39;)</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">tbs</span>\n	<ul>\n		<li>Any time: tbs=qdr:a</li>\n		<li>Last second: tbs=qdr:s (Read more about this &ldquo;real time search&rdquo; on Lifehacker)</li>\n		<li>Last minute: tbs=qdr:n (Note! n like in nuts)</li>\n		<li>Last 10 minutes: tbs=qdr:n10 (and so on for any number of minutes)</li>\n		<li>Last hour: tbs=qdr:h</li>\n		<li>Last 12 hours: tbs=qdr:h10 (and so on for any number of hours)</li>\n		<li>Last day: tbs=qdr:d</li>\n		<li>Last week: tbs=qdr:w</li>\n		<li>Last month: tbs=qdr:m</li>\n		<li>Last year: tbs=qdr:y</li>\n		<li>A specific time range, for example from March 2 1984 to June 5 1987: tbs=cdr:1,cd_min:3/2/1984,cd_max:6/5/1987</li>\n		<li>Sort by date: tbs=sbd:1 <span style=\"background-color:#FFEC00\">(only works together with any qdr or as_qdr is given when search discussions, works alone when search news with &amp;tbm=nws)</span></li>\n		<li>Sort by relevance: tbs=sbd:0 (or remove sbd parameter)</li>\n		<li>Results from a verbatim search:<strong>&nbsp;tbs=li:1</strong>&nbsp;(tell Google not to guess alternative spellings etc)</li>\n	</ul>\n	</li>\n	<li><span style=\"color:rgb(178, 34, 34)\">tbas</span>=0: Reset all specific settings used in the previous search</li>\n</ol>','2017-01-20 11:21:03',3),(274,'Linux','Scripts','PPA Management','<p><strong><span style=\"color:#B22222\">1. Check available PPA list</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">find /etc/apt/ -name *.list\n/etc/apt/sources.list\n/etc/apt/sources.list.d/gitlab_gitlab-ce.list</code></pre>\n\n<p>&nbsp;</p>','2017-01-22 12:00:19',1),(275,'Linux','Commands','Run Cmd At Background','<p><span style=\"background-color:#FFEC00\">&amp;</span> detaches the&nbsp;command&nbsp;from&nbsp;stdin.<br />\n<span style=\"background-color:#7AFF91\">&gt;/dev/null</span>&nbsp;detaches the&nbsp;shell session&nbsp;from&nbsp;stdout&nbsp;and&nbsp;stderr.<br />\n<span style=\"background-color:#FF7683\">&amp;disown</span>&nbsp;removes the command from the&nbsp;shell&#39;s job list. You can also use&nbsp;<span style=\"background-color:#FFEC00\">&amp;!</span>&nbsp;instead of&nbsp;&amp;disown; they&#39;re both the same command.</p>\n\n<p>Also, when putting a command inside of a variable, it&#39;s more proper to use<span style=\"background-color:#FFEC00\">&nbsp;eval &quot;${cmd}&quot;</span>&nbsp;rather than&nbsp;&quot;${cmd}&quot;:</p>\n\n<pre>\n<code class=\"language-bash\">cmd=\"google-chrome\" \neval \"${cmd}\" &amp;&gt;/dev/null &amp;disown</code></pre>','2017-02-21 12:00:55',1),(276,'SSH','Advanced','SSH-Agent','<p>If you don&#39;t want to re-enter your passphrase every time you use your SSH key, you can&nbsp;add your key to the SSH agent,<span style=\"background-color:rgb(255, 236, 0)\"> which manages your SSH keys and remembers your passphrase</span></p>\n\n<p>Running&nbsp;ssh-agent&nbsp;starts the agent in the background, and outputs a bunch of variable assignments, which could be set in the current shell and used by child processes (the&nbsp;ssh&nbsp;commands you would run). In order to set those SSH shell variables, for example</p>\n\n<pre>\n<code class=\"language-bash\">SSH_AGENT_PID=7334\nSSH_AUTH_SOCK=/tmp/ssh-0RV0edeSICIi/agent.7333</code></pre>\n\n<p>we can use &quot;eval&quot; command to start ssh-agent and automatically set above variables outputed by ssh-agent:</p>\n\n<pre>\n<code class=\"language-bash\">eval &quot;$(ssh-agent -s)&quot;</code></pre>\n\n<p>And the current shell will get the variables for other commands to inherit.</p>\n\n<p>Then add private key to ssh-agent</p>\n\n<pre>\n<code class=\"language-bash\">ssh-add ~/.ssh/id_rsa\nssh-add -k ~/.ssh/id_rsa</code></pre>\n\n<p>-k: Kill the current agent (given by the SSH_AGENT_PID environment variable).</p>','2017-02-21 12:20:17',5),(277,'Git','Installation','Upgrade In Ubuntu','<p>Ubuntu provides the latest version of Git up to the date when the Ubuntu version installed is&nbsp;shipped, so in order to always use the latest version of Git, you need to add the source and do the upgrade</p>\n\n<pre>\n<code class=\"language-bash\">sudo add-apt-repository ppa:git-core/ppa\nsudo apt-get update \nsudo apt-get upgrade</code></pre>','2017-02-27 11:24:20',0),(278,'NodeJS','NPM','Install','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Install a package globally when you want to run a command from the terminal, e.g.</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">npm install -g flightplan</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Install a package inside a project folder and save its info into package.json configuration file</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">#save to &#39;Dependencies&#39;\nnpm install flightplan -S \n\n#save to &#39;DevDependencies&#39;\nnpm install flightplan -D </code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. Install packages based on package.json</span></strong></p>\n\n<pre>\n<code class=\"language-bash\"># install all packages defined in &#39;Dependencies&#39; and &#39;DevDependencies&#39;\nnpm install \n\n# install all packages defined in &#39;Dependencies&#39; or &#39;DevDependencies&#39;\nnpm install --only={prod[uction]|dev[elopment]} </code></pre>','2017-02-27 16:34:13',4),(279,'CSS','Flexbox','Overflow Flex Items','<p><span style=\"color:rgb(178, 34, 34)\"><strong>1. The flexbox snippets of this example are:</strong></span></p>\n\n<pre>\n<code class=\"language-html\">&lt;style&gt;\n.flex-container {\n    display: -webkit-flex;\n    display: flex;\n    width: 400px;\n    height: 150px;\n    background-color: lightgrey;\n}\n\n.flex-item {\n    background-color: cornflowerblue;\n    margin: 10px;\n}\n\n&lt;/style&gt;\n\n&lt;div class=\"flex-container\"&gt;\n  &lt;div class=\"flex-item\"&gt;flex item 1&lt;/div&gt;\n  &lt;div class=\"flex-item\"&gt;flex item 2&lt;/div&gt;\n  &lt;div class=\"flex-item flex-item-overflow\"&gt;flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item&lt;/div&gt;  \n&lt;/div&gt;</code></pre>\n\n<div class=\"flex-container\" style=\"display: flex; width: 400px; height: 150px; background-color: lightgrey; margin-bottom: 5px;\">\n<div class=\"flex-item\" style=\"background-color: cornflowerblue; margin: 10px 10px 5px;\">flex item 1</div>\n\n<div class=\"flex-item\" style=\"background-color: cornflowerblue; margin: 10px 10px 5px;\">flex item 2</div>\n\n<div class=\"flex-item flex-item-overflow\" style=\"background-color: cornflowerblue; margin: 10px 10px 5px;\">flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item</div>\n</div>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">As you can see, the first two flex items wrap&nbsp;to as minimum length as possible becasue the 3rd one has lots of text</span></p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. When you set overflowed flex item to be wrapped and hide the overflow, flexbox will look like this:</span></strong></p>\n\n<pre>\n<code class=\"language-css\">.flex-item-overflow{\n  white-space: nowrap;\n  overflow: hidden;\n}</code></pre>\n\n<div class=\"flex-container\" style=\"display: flex; width: 400px; height: 150px; background-color: lightgrey; margin-bottom: 5px;\">\n<div class=\"flex-item\" style=\"background-color: cornflowerblue; margin: 10px 10px 5px;\">flex item 1</div>\n\n<div class=\"flex-item\" style=\"background-color: cornflowerblue; margin: 10px 10px 5px;\">flex item 2</div>\n\n<div class=\"flex-item flex-item-overflow\" style=\"white-space: nowrap; overflow: hidden; background-color: cornflowerblue; margin: 10px 10px 5px;\">flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item</div>\n</div>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">The width of first two flex items remain the minimun level</span></p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. If we only set width of the flex item with overfow content</span></strong></p>\n\n<ul>\n	<li>then first two items will be restored to text length without wrapping</li>\n	<li>the flex item with text overflow will take rest of the length of the flex container regardless of value of &#39;flex&#39; attribute because no other flex item with &#39;flex&#39; configured to compare with it</li>\n</ul>\n\n<pre>\n<code class=\"language-css\">.flex-item-overflow{\n  flex: 3;\n}</code></pre>\n\n<div class=\"flex-container\" style=\"display: flex; width: 400px; height: 150px; background-color: lightgrey; margin-bottom: 5px;\">\n<div class=\"flex-item\" style=\"background-color: cornflowerblue; margin: 10px 10px 5px;\">flex item 1</div>\n\n<div class=\"flex-item\" style=\"background-color: cornflowerblue; margin: 10px 10px 5px;\">flex item 2</div>\n\n<div class=\"flex-item flex-item-overflow\" style=\"white-space: nowrap; overflow: hidden; background-color: cornflowerblue; margin: 10px 10px 5px; flex: 3 1 0%;\">flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item</div>\n\n<p>&nbsp;</p>\n</div>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">4. Then we set width of the second flex item to check the changes</span></strong></p>\n\n<ul>\n	<li>first flex item will take full width of the its embedded text without wrapping</li>\n	<li>flex item 2 and 3 will be resized based on their &#39;flex&#39; values</li>\n</ul>\n\n<pre>\n<code class=\"language-css\">.flex-item:nth-child(2){\n  flex: 1;\n}\n.flex-item-overflow{\n  flex: 3;\n}</code></pre>\n\n<div class=\"flex-container\" style=\"display: flex; width: 400px; height: 150px; background-color: lightgrey; margin-bottom: 5px;\">\n<div class=\"flex-item\" style=\"background-color: cornflowerblue; margin: 10px 10px 5px;\">flex item 1</div>\n\n<div class=\"flex-item\" style=\"background-color: cornflowerblue; margin: 10px 10px 5px; flex: 1 1 0%;\">flex item 2</div>\n\n<div class=\"flex-item flex-item-overflow\" style=\"white-space: nowrap; overflow: hidden; background-color: cornflowerblue; margin: 10px 10px 5px; flex: 3 1 0%;\">flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item</div>\n\n<p>&nbsp;</p>\n</div>\n\n<p>As you can see, flex item 2 and flex item 3 are 1:3 in width</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">5. Set width to all flex items</span></strong></p>\n\n<pre>\n<code class=\"language-css\">.flex-item:nth-child(1){\n  flex: 2;\n}\n.flex-item:nth-child(2){\n  flex: 2;\n}\n.flex-item-overflow{\n  flex: 3;\n}</code></pre>\n\n<div class=\"flex-container\" style=\"display: flex; width: 400px; height: 150px; background-color: lightgrey; margin-bottom: 5px;\">\n<div class=\"flex-item\" style=\"background-color: cornflowerblue; margin: 10px 10px 5px; flex: 2;\">flex item 1</div>\n\n<div class=\"flex-item\" style=\"background-color: cornflowerblue; margin: 10px 10px 5px; flex: 2;\">flex item 2</div>\n\n<div class=\"flex-item flex-item-overflow\" style=\"white-space: nowrap; overflow: hidden; background-color: cornflowerblue; margin: 10px 10px 5px; flex: 3;\">flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item 3flex item</div>\n\n<p>&nbsp;</p>\n</div>\n\n<p>So width of all items is set to 2:2:3&nbsp;</p>','2017-02-28 18:59:35',9),(280,'CSS','Flexbox','Item Centering','<p><strong><span style=\"color:rgb(178, 34, 34)\">The normal way of set a child item to be both vertically and horizontally center is:</span></strong></p>\n\n<pre>\n<code class=\"language-html\">&lt;style&gt;\n  .parent{\n    position: relative;\n    width: 200px;\n    height: 200px;\n    background-color: lightgreen;\n  }\n  .child{\n    position: absolute;\n    width: 100px;\n    height: 100px;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: blue;\n  }\n&lt;/style&gt;\n&lt;div class=&#39;parent&#39;&gt;\n  &lt;div class=&#39;child&#39;&gt;&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n<div style=\"position: relative; width: 200px; height: 200px; background-color: lightgreen; margin-bottom: 5px;\">\n<div style=\"position: absolute; width: 100px; height: 100px; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: blue; margin-bottom: 5px;\">&nbsp;</div>\n</div>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>By using flexbox, it will become super easy by &quot;margin: auto&quot;:</strong></span></p>\n\n<pre>\n<code class=\"language-html\">&lt;style&gt;\n  .parent{\n    display: flex;\n    width: 200px;\n    height: 200px;\n    background-color: lightgreen;\n  }\n  .child{\n    width: 100px;\n    height: 100px;\n    background-color: blue;\n    margin: auto\n  }\n&lt;/style&gt;\n&lt;div class=&#39;parent&#39;&gt;\n  &lt;div class=&#39;child&#39;&gt;&lt;/div&gt;\n&lt;/div&gt;</code></pre>','2017-02-28 19:14:00',8),(281,'Linux','Ubuntu','Force APT To Use IPv4','<p>In case your ISP does not support IPv6, we can force apt to use IPv4, Create the file</p>\n\n<pre>\n<code class=\"language-bash\">/etc/apt/apt.conf.d/99force-ipv4</code></pre>\n\n<p>Put the following contents in it:</p>\n\n<pre>\n<code class=\"language-bash\">Acquire::ForceIPv4 &quot;true&quot;;</code></pre>','2017-03-01 09:14:58',1),(282,'API','Facebook(V2.5)','API Call Examples','<p><strong><span style=\"color:rgb(178, 34, 34)\">General keyword search</span></strong></p>\n\n<p>Facebook Graph API can do keyword searchs over different type of objects, as to version 2.5, e.g. user, page, place, event, group, etc. Detail can be found <a href=\"https://developers.facebook.com/docs/graph-api/using-graph-api/\" style=\"margin-bottom: 5px;\">here</a>.</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. Graph API not longer supports post search by keywords (tested in version 2.2)</span></p>\n\n<p>For example the api call :&nbsp;https://graph.facebook.com/search?q=viking%20line&amp;<span style=\"background-color:rgb(255, 236, 0)\">type=post</span>&amp;limit=3</p>\n\n<pre>\n<code class=\"language-json\">{\n  \"error\":  {\n    \"message\": \"(#11) Post search has been deprecated\",\n    \"type\": \"OAuthException\",\n    \"code\": 11,\n    \"fbtrace_id\": \"Fm+FS2PfK2Y\"\n  }\n}</code></pre>\n\n<p>2. Page search</p>\n\n<p>&nbsp;</p>','2017-03-06 20:21:11',1),(283,'Standards','Internet','Timestamp-RFC3339','<p><strong><span style=\"color:#B22222\">5.6. Internet Date/Time Format</span></strong></p>\n\n<p>The following profile of ISO 8601 [ISO8601] dates SHOULD be used in new protocols on the Internet. This is specified using the syntax description notation defined in [ABNF].</p>\n\n<ul>\n	<li>date-fullyear = 4DIGIT</li>\n	<li>date-month = 2DIGIT ; 01-12</li>\n	<li>date-mday = 2DIGIT ; 01-28, 01-29, 01-30, 01-31 based on ; month/year</li>\n	<li>time-hour = 2DIGIT ; 00-23</li>\n	<li>time-minute = 2DIGIT ; 00-59</li>\n	<li>time-second = 2DIGIT ; 00-58, 00-59, 00-60 based on leap second rules</li>\n	<li>time-secfrac = &quot;.&quot; 1*DIGIT</li>\n	<li>time-numoffset = (&quot;+&quot; / &quot;-&quot;) time-hour &quot;:&quot; time-minute</li>\n	<li>time-offset = &quot;Z&quot; / time-numoffset (<span style=\"background-color:#FFEC00\">Z means no offset</span>)</li>\n	<li>partial-time = time-hour &quot;:&quot; time-minute &quot;:&quot; time-second [time-secfrac]</li>\n	<li>full-date = date-fullyear &quot;-&quot; date-month &quot;-&quot; date-mday</li>\n	<li>full-time = partial-time time-offset</li>\n	<li>date-time = full-date &quot;T&quot; full-time (<span style=\"background-color:#FFEC00\">T is a separator</span>)</li>\n</ul>\n\n<p>For example</p>\n\n<p>Here are some examples of Internet date/time format.</p>\n\n<p>1985-04-12T23:20:50.52Z</p>\n\n<p>This represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.</p>\n\n<p>1996-12-19T16:39:57-08:00</p>\n\n<p>This represents 39 minutes and 57 seconds after the 16th hour of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time). Note that this is equivalent to 1996-12-20T00:39:57Z in UTC.</p>\n\n<p>1990-12-31T23:59:60Z</p>\n\n<p>This represents the leap second inserted at the end of 1990. 1990-12-31T15:59:60-08:00 This represents the same leap second in Pacific Standard Time, 8 hours behind UTC.</p>\n\n<p>1937-01-01T12:00:27.87+00:20</p>\n\n<p>This represents the same instant of time as noon, January 1, 1937, Netherlands time. Standard time in the Netherlands was exactly 19 minutes and 32.13 seconds ahead of UTC by law from 1909-05-01 through 1937-06-30. This time zone cannot be represented exactly using the HH:MM format, and this timestamp uses the closest representable UTC offset.</p>\n\n<p>&nbsp;</p>','2017-03-12 20:59:59',0),(284,'HTML','Focus The Detail','Click Event Over Label Element','<p>This is the normal case of label element which is used together with an input element</p>\n\n<pre>\n<code class=\"language-html\">&lt;input type=\'checkbox\' name=\'checkbox\' id=\'test\'&gt; &amp;nbsp &lt;label for=\'test\'&gt;Test Label Onclick event&lt;/label&gt;</code></pre>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">The for=&#39;test&#39; part actually implies an onclick event propagating&nbsp;up to the input element,&nbsp;</span></p>\n\n<pre>\n<code class=\"language-html\">&lt;script&gt;\nfunction test(self, evt){\n if(typeof window.num == \"undefined\"){\n   window.num = 1;\n } \n console.log(window.num); \n window.num++;\n}\n&lt;/script&gt;\n&lt;input onclick=\'test(this, event)\' type=\'checkbox\' name=\'test\' id=\'test\'&gt; &amp;nbsp &lt;label onclick=\'test(this, event)\' for=\'test\' &gt;Test Label Onclick event&lt;/label&gt;\n&lt;!-- \"event\", \"this\" are preserved keywords, must write correctly to work --&gt;</code></pre>\n\n<p>So when you click label, you will see 1 and 2 inside console because onclick event is triggered against both label and its related input element.</p>','2017-03-13 11:54:20',0),(285,'Statsit','Work-Flow','Keyword Sample Creation','<p><strong><span style=\"color:rgb(178, 34, 34)\">The basic worflow of creating a new keyword sample is as follows:</span></strong></p>\n\n<p>1. fetch sample creation table from slots/slot_create.php</p>\n\n<p>2. when fill the creation table up, select &#39;create&#39; to process sample creation via slots/slot_create_process.php</p>\n\n<ul>\n	<li>insert a new row into <span style=\"background-color:rgb(122, 255, 145)\">Statsit.accounts</span> table in 117 to set the basic info of a newly created sample, e.g. unique sample ID</li>\n	<li>create sample&#39;s database in 112 by duplicating the structure of MMonitor_0 database, and add &#39;shares&#39; and &#39;settings&#39; (serialized sample&#39;s settings) tables additionally</li>\n	<li>if a user account is chosen, add slot info into <span style=\"background-color:rgb(122, 255, 145)\">Statsit.user_accounts</span> table which maps usernames to sample IDs that can be accessed in the Favorites list in ListenR for example.</li>\n	<li>insert a new row into <span style=\"background-color:rgb(122, 255, 145)\">new_mm_pool.account_info</span> table to save serialized settings of an sample</li>\n	<li>save sample specific instagram tags or facebook page tags into <span style=\"background-color:rgb(122, 255, 145)\">new_mm_pool.instgram_tags</span> and <span style=\"background-color:rgb(122, 255, 145)\">new_mm_pool.facebook_page_tags</span> table respectively</li>\n	<li>save scraping tasks of newly created sample into <span style=\"background-color:rgb(122, 255, 145)\">new_mm_pool.scraping_queue table</span> (slot_id, platform, frequency)</li>\n	<li>set <span style=\"background-color:rgb(122, 255, 145)\">new_mm_pool.domains_white_black_lists</span> table to add whitelisted country domains to be scraped.</li>\n	<li>set sample&#39;s scraping priority in <span style=\"background-color:rgb(122, 255, 145)\">Statsit.accounts</span> table (<span style=\"color:rgb(178, 34, 34)\"><strong>no idea the usage of this</strong></span>)</li>\n	<li>set sample&#39;s scraping tasks to status &#39;waiting&#39; in <span style=\"background-color:rgb(122, 255, 145)\">new_mm_pool.scraping_queue table</span></li>\n</ul>','2017-03-18 21:15:33',2),(286,'NodeJS','Installtion','ZSH','<p>If you are using zsh and nvm at the same time, then you need to add the nvm-loading line to .zprofile or .zshenv (whichever works), otherwise nvm is not able to be detected.</p>\n\n<p>You can check the current shell by</p>\n\n<pre>\n<code class=\"language-bash\">echo $SHELL\n/usr/bin/zsh</code></pre>\n\n<p>If so, you need to add nvm-loading line to .zprofile or .zshenv. You can find the code from .bashrc or .zshrc</p>\n\n<pre>\n<code class=\"language-bash\">export NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; . \"$NVM_DIR/nvm.sh\"  # This loads nvm</code></pre>','2017-03-14 22:53:08',3),(287,'MySql','Data Types','NULL Value','<p><strong><span style=\"color:rgb(178, 34, 34)\">When connecting mysql via php mysqli class, all columns with empty value&#39; or NULL will stay returned as &#39;&#39; or NULL:</span></strong></p>\n\n<p>For example, here is how column looks inside mysql client</p>\n\n<pre>\n<code class=\"language-sql\">select original_author, city from mentions where source != 6 limit 1;\n+-----------------+------+\n| original_author | city |\n+-----------------+------+\n| NULL            |      |\n+-----------------+------+\n</code></pre>\n\n<p>Then if we use PHP to connect</p>\n\n<pre>\n<code class=\"language-php\">$query = &#39;SELECT original_author, city FROM mentions where source !=6 limit 1&#39;;\n$result = querySql($query);\n$resultArray = $result-&gt;fetch_array(MYSQLI_ASSOC);\nvar_dump($resultArray);</code></pre>\n\n<p>Finally you will get an array like below:</p>\n\n<pre>\n<code class=\"language-bash\">array(2) {\n  [&quot;original_author&quot;]=&gt;\n  NULL\n  [&quot;city&quot;]=&gt;\n  string(0) &quot;&quot;\n}\n</code></pre>','2017-03-15 11:20:36',0),(288,'MySql','MariaDB','Installation','<p><strong><span style=\"color:#B22222\">The enviroment is Ubutnu 16.04, use the following command to install MariaDB Client&nbsp;and Server:</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">sudo apt update\nsudo apt install mariadb-client mariadb-server\n\n# check version to be installed\napt-cache policy mariadb-client\napt-cache policy mariadb-server\n</code></pre>\n\n<p><span style=\"color:#B22222\">You may be prompted to set root password during the installation process, after that, run the following command to further configure mariadb</span></p>\n\n<pre>\n<code class=\"language-bash\">sudo mysql_secure_installation</code></pre>\n\n<p>After that, you can access mariaDB with the user you configured</p>','2017-03-15 19:20:43',3),(289,'MySql','MariaDB','Reset Root User','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. After the installation process, when you try to access the mariaDB with root user without sudo, you may get access-denied error:</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">mysql -u root -p\nEnter password: \nERROR 1698 (28000): Access denied for user \'root\'@\'localhost\'</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">If you are pretty sure the password is correct, then the reason should be that you must be root user of the system (i.e. sudo) in order to access the mariaDB via its root user, the reason is:</span></p>\n\n<pre>\n<code class=\"language-sql\">select User, Host, Plugin from user;\n+------+-----------+-------------+\n| User | Host      | Plugin      |\n+------+-----------+-------------+\n| root | localhost | unix_socket |\n| kan  | localhost |             |\n+------+-----------+-------------+\n</code></pre>\n\n<p>As you can see, &quot;Plugin&quot; parameter of root is &#39;<a href=\"https://mariadb.com/kb/en/mariadb/unix_socket-authentication-plugin/\" style=\"margin-bottom: 5px;\">unix_socket</a>&#39; which needs mariaDB user name and system user name are identical in order to access</p>\n\n<p>So the solution is either empty Plugin field of root user or use sudo to access</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Reset Password of Root</span></strong></p>\n\n<p>If you really forget the password, then following the steps below to reset root user&#39;s password</p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">Access the database without any access control</span></li>\n</ul>\n\n<pre>\n<code class=\"language-bash\"># Stop mysqld process if it is running\nsudo service mysql stop\n\n# Execute mysqld by bypassing user control temporarily and close network connection for safty\'s sake\nsudo mysqld_safe --skip-grant-tables --skip-networking &amp;</code></pre>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">update root user&#39;s password</span></li>\n</ul>\n\n<pre>\n<code class=\"language-sql\"># try following\nUPDATE mysql.user SET authentication_string = PASSWORD(\'MyNewPass\') WHERE User = \'root\' AND Host = \'localhost\';\n#or\nUPDATE mysql.user SET Password = PASSWORD(\'MyNewPass\') WHERE User = \'root\' AND Host = \'localhost\';\n\nFLUSH PRIVILEGES;</code></pre>\n\n<ul>\n	<li>Finally stop the manually triggered mysqld and restart the mysql service</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">sudo service mysql start</code></pre>','2017-03-15 19:43:57',5),(290,'MySql','Data Types','Set Unix_timestamp As Default Value Of An Integer','<p>By default, mysql does not support unix_timestamp as a default value for an INT field, we can use following to quickly get the unix timestamp value of a date:</p>\n\n<pre>\n<code class=\"language-sql\">create table test1(\n  created timestamp default current_timestamp on update current_timestamp\n)\nselect unix_timestamp(time) from test1;</code></pre>\n\n<p>If you want to save unix_timestamp value automatically by default, then we can use &quot;trigger&quot; to achieve, e.g.</p>\n\n<pre>\n<code class=\"language-sql\">create table test_date_type(\nid int unsigned not null auto_increment primary key,\nunix_time int unsigned null,\ntimestamp timestamp default current_timestamp on update current_timestamp,\ndatetime timestamp null default null\n)\nENGINE = InnoDB\nDEFAULT CHARACTER SET = utf8\nCOLLATE = utf8_unicode_ci;\n\ndelimiter $$\n\ncreate trigger tr_unixtime_test_date_type before insert on test_date_type for each row\nbegin\n  if (new.unix_time is null)\n  then\n    set new.unix_time = unix_timestamp();\n  end if;\nend $$\n\ndelimiter ;</code></pre>\n\n<p>Then you can check the trigger with the database selected&nbsp;via</p>\n\n<pre>\n<code class=\"language-sql\">show triggers;\n+----------------------------+--------+----------------+---------------------------------------------------------------------------------------------------+--------+---------+----------+----------------+----------------------+----------------------+--------------------+\n| Trigger                    | Event  | Table          | Statement                                                                                         | Timing | Created | sql_mode | Definer        | character_set_client | collation_connection | Database Collation |\n+----------------------------+--------+----------------+---------------------------------------------------------------------------------------------------+--------+---------+----------+----------------+----------------------+----------------------+--------------------+\n| tr_unixtime_test_date_type | INSERT | test_date_type | begin\n  if (new.unix_time is null)\n  then\n    set new.unix_time = unix_timestamp();\n  end if;\nend | BEFORE | NULL    |          | root@localhost | utf8mb4              | utf8mb4_general_ci   | utf8mb4_general_ci |\n</code></pre>','2017-03-15 19:53:17',0),(291,'PHP','Class & Object','Curl','<p><strong><span style=\"color:#B22222\">1. Get full url of an shorten twitter url</span></strong></p>\n\n<pre>\n<code class=\"language-php\"> $ch = curl_init($url);\n curl_setopt_array($ch, array(\n   CURLOPT_FOLLOWLOCATION =&gt; TRUE,  // the magic sauce, if url redirects\n   CURLOPT_RETURNTRANSFER =&gt; TRUE, // return the transfter instead of outputing directly\n   CURLOPT_SSL_VERIFYHOST =&gt; FALSE, // suppress certain SSL errors\n   CURLOPT_SSL_VERIFYPEER =&gt; FALSE,\n   CURLOPT_NOBODY =&gt; FALSE //if the final resource is actually fetched\n ));\n $content = curl_exec($ch);\n $expandedUrl = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);\n curl_close($ch);\n</code></pre>\n\n<p><strong><span style=\"color:#B22222\">2. Get access token of Instagram API with POST requests</span></strong></p>\n\n<pre>\n<code class=\"language-php\">function curl_get_contents($url, $params){\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n        curl_setopt($ch, CURLOPT_POST, TRUE);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n        $data = curl_exec($ch);\n        curl_close($ch);\n        return $data;\n}\n$clientID = \'c6038d8d54664a9db0cd05eb5df93db5\';\n$clientSecret = \'ca5d922c872243009b4cc29860007081\';\n$redirectURI = \'http://my.statsit.com/instagram/call_back.php\';\n$grantPermissionURI = \"https://api.instagram.com/oauth/authorize/?scope=public_content&amp;client_id=$clientID&amp;redirect_uri=$redirectURI&amp;response_type=code\";\n$getAccessTokenURI = \"https://api.instagram.com/oauth/access_token\";\n$accessTokenParams = array(\'client_id\' =&gt; $clientID, \'client_secret\' =&gt; $clientSecret, \'grant_type\' =&gt; \'authorization_code\', \'redirect_uri\' =&gt; $redirectURI);\n\nif(!empty($_GET[\'code\'])){\n $accessTokenParams[\'code\'] = $_GET[\'code\'];\n $data = curl_get_contents($getAccessTokenURI, $accessTokenParams);\n echo \"&lt;pre&gt;\";\n print_r($data);\n echo \"&lt;/pre&gt;\";\n}else{\n echo \"&lt;a style=\'font-size: 1.2em\' href=\'$grantPermissionURI\'&gt;Grant Permission&lt;/a&gt;\";\n}\n</code></pre>\n\n<p><span style=\"color:#B22222\"><strong>3. Get status code of response of an url request</strong></span></p>\n\n<pre>\n<code class=\"language-php\">$url = \'http://www.rantapallo.fi/pakoarjesta/wp-json/\';\n$ch = curl_init($url);\ncurl_setopt_array($ch, array(\n CURLOPT_FOLLOWLOCATION =&gt; TRUE,  // the magic sauce, if url redirects\n CURLOPT_RETURNTRANSFER =&gt; TRUE, // return the transfter instead of outputing directly\n CURLOPT_SSL_VERIFYHOST =&gt; FALSE, // suppress certain SSL errors\n CURLOPT_SSL_VERIFYPEER =&gt; FALSE,\n CURLOPT_NOBODY =&gt; TRUE //if the final resource is actually fetched\n));\ncurl_exec($ch);\n$statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\ncurl_close($ch);\nvar_dump($statusCode); // int(200)</code></pre>\n\n<p>&nbsp;</p>','2017-04-21 09:54:39',7),(292,'PHP','Functions','Unset','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Can a variable be unset if a reference of it is unset? The answer is NO</span></strong></p>\n\n<pre>\n<code class=\"language-php\">$a = \'hello\';\nfunction trys(&amp;$a){\n $a .= \' world!\';\n unset($a); \n var_dump(isset($a));  \n}\ntrys($a); //output \'false\', the reference has been unset\necho $a; //\"hello world!\", the original variable is still defined and valid</code></pre>\n\n<p>&nbsp;</p>','2017-03-23 08:08:17',0),(294,'PHP','Tricks And Traps','Constant Is Global','<p>Constant is global available no matter where it is defined:</p>\n\n<pre>\n<code class=\"language-php\">c();\nfunction c(){\n    define(&#39;DEBUG&#39;, &#39;HELLO&#39;);\n}\nvar_dump(DEBUG); // &#39;HELLO&#39;</code></pre>','2017-03-24 20:43:15',0),(295,'PHP','Tricks And Traps','Trick Of \'Include\'','<p>Assuming we have two php files<span style=\"color:#B22222\"> test_constants.php</span> and<span style=\"color:#B22222\"> test_include.php</span></p>\n\n<p><strong><span style=\"color:#B22222\">test_constants.php</span></strong></p>\n\n<pre>\n<code class=\"language-php\">showConstants();\ndefine(\'DEBUG\', TRUE);\ndefine(\'FB_RESULTS_LIMIT\', DEBUG ? 10: 100);\nfunction showConstants(){\n  echo FB_RESULTS_LIMIT;\n}\n</code></pre>\n\n<p>Because &#39;define&#39; statements are placed after showConstants function is called, so you will find that FB_RESULTS_LIMIT is not defined when running the function</p>\n\n<p>However if we include the test_constants.php first in another file, and call the showConstants function in that file, then</p>\n\n<p><strong><span style=\"color:#B22222\">test_include.php</span></strong></p>\n\n<pre>\n<code class=\"language-php\">include \'test_constants.php\';\nshowConstants();\n</code></pre>\n\n<p>Then it will output 10 as the value of constant FB_RESULTS_LIMIT</p>','2017-03-24 20:48:38',0),(296,'Linux','Miscs','Version Control Of Crontab Tasks','<p>Since the only interface for people to configure crontab is literally text, so in order to track the changes made and rollback to a specific status of crontab, it is good to git the crontab configuration files under the following folder</p>\n\n<ul>\n	<li>CentOS: /var/spool/cron/</li>\n	<li>Ubuntu: /var/spool/cron/crontabs/</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">[root@db3 cron]# ll\ntotal 8\n-rw------- 1 root    root  678 Mar 17 07:01 root\n-rw------- 1 statsit root 3316 Mar 27 02:50 statsit\n</code></pre>','2017-03-27 09:03:12',0),(297,'MySql','Data Types','Create Table Example','<pre>\n<code class=\"language-sql\">-- first NULL means to allow NULL value for TIMESTAMP type\n\nCREATE TABLE facebook_page_tags(\nid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\nslot_id INT UNSIGNED NOT NULL,\ntag VARCHAR(100) NOT NULL,\ncreated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\nscanned_at TIMESTAMP NULL DEFAULT NULL,\nUNIQUE INDEX fb_tag (slot_id, tag)\n)\nENGINE = InnoDB\nDEFAULT CHARACTER SET = utf8\nCOLLATE = utf8_unicode_ci\n\n\nCREATE TABLE facebook_official_pages(\nid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\ntag_id INT UNSIGNED NOT NULL,\nslot_id INT UNSIGNED NOT NULL,\npage_name VARCHAR(100) NOT NULL,\npage_id VARCHAR(100) NOT NULL,\nusername VARCHAR(100) DEFAULT NULL,\nlocation VARCHAR(100),\nscanned_at TIMESTAMP NULL DEFAULT NULL,\nUNIQUE INDEX fb_page (slot_id, page_id),\nFOREIGN KEY fk_tag_pages (tag_id)\nREFERENCES facebook_page_tags (id)\nON DELETE CASCADE\n)\nENGINE = InnoDB\nDEFAULT CHARACTER SET = utf8\nCOLLATE = utf8_unicode_ci</code></pre>\n\n<p>&nbsp;</p>','2017-04-06 16:49:39',3),(298,'MySql','Function','Escaped Values','<p>What are the escaped value of TRUE, FALSE or NULL?</p>\n\n<pre>\n<code class=\"language-php\">var_dump(array($db-&gt;escape(false), $db-&gt;escape(true), $db-&gt;escape(NULL)));</code></pre>\n\n<p>It outputs</p>\n\n<pre>\n<code class=\"language-bash\">array(3) {\n  [0]=&gt;\n  string(0) \"\"\n  [1]=&gt;\n  string(1) \"1\"\n  [2]=&gt;\n  string(0) \"\"\n}\n</code></pre>\n\n<p>&nbsp;</p>','2017-04-10 10:51:35',0),(299,'Git','History Review','List All Tracked Files','<p>In order to show all tracked files recursively in an given branch, you can use command as follows</p>\n\n<pre>\n<code class=\"language-bash\">git ls-tree -r master --name-only\ngit ls-tree -r HEAD --name-only</code></pre>\n\n<ul>\n	<li>-r means recursively</li>\n	<li>--name-only, as name implies, only show file names</li>\n	<li>master is the specified branch name</li>\n	<li>HEAD is to show current branch without explicitely giving the branch name</li>\n</ul>','2017-04-18 15:34:00',0),(300,'Git','Repo Initialization','Archive & Bundle Remote Repository','<p>Sometimes, it is impossible to pull remote repository to local machine, and you need both the source files and tracking history, i.e. directory .git, in this case, we can use &quot;git bundle&quot;:</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. Under the project directory on remote machine</span></p>\n\n<pre>\n<code class=\"language-bash\">git bundle create /path/to/save/bundle branch_name\n\n#for example\ngit bundle create ../wordpress.bundle master\ngit bundle create ~/wordpress.bundle HEAD</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. Transfer the bundle file to the destination machine through, e.g. ftp or flash disk, etc.</span></p>\n\n<pre>\n<code class=\"language-bash\">git clone -b master /path/of/the/bundle/file /path/to/create/the/repository\n\n#for example\ngit clone -b master wordpress.bundle ~/wordpress</code></pre>\n\n<ul>\n	<li>-b means branch</li>\n</ul>\n\n<p>Then the repository is ready with all tracking history of given master</p>','2017-07-21 16:40:24',2),(301,'Statsit','Scraping & Processing','Search Multiple Keywords','<p>For <span style=\"color:rgb(178, 34, 34)\"><strong>Twitter</strong></span>, you can give word 1 word2 word3 word4 without double quotes, and twitter will give you tweets containing all these words regardless of the order of these words, i.e. not a phrase search.</p>\n\n<p>And <span style=\"color:rgb(178, 34, 34)\"><strong>Google</strong></span> search works the simiar way, double quotes means phrase search, giving&nbsp;these 4 words without double quotes will return news, blogs and discussions containing as many&nbsp;keywords as possible regardless of the order of these 4 words as well,&nbsp;but not guaranteed that each result contains all keywords.</p>\n\n<p>Double quotes do not take effect for <strong><span style=\"color:rgb(178, 34, 34)\">Youtube</span></strong> API which always tries to find videos mentioning all given words most of the time, but not 100% guaranteed, sometimes some videos missing some keywords are still returned.</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Facebook</span></strong> scraping is based on page, so we can only manually filter out page content which contains all those given keywords, currently, my new version is using phrase match over page content, so it might not support keywords filtering regardless of the keywords&#39; order.</p>\n\n<p>For <strong><span style=\"color:rgb(178, 34, 34)\">Instagram</span></strong> which finds content based on tags, but not sure how it filters content since I have not gotten time to check the code yet.</p>','2017-04-19 17:27:41',0),(302,'PHP','Misc','Round Brackets Around \"if\" Condition Inside SQL St','<p><strong><span style=\"color:#B22222\">Actually it is all about privilege, for example:</span></strong></p>\n\n<pre>\n<code class=\"language-php\">$now = time();\n$scanAllBlogs = false;\n$sql = \"SELECT id, blog_cms, url, platform_account AS account, platform_account_id AS accountID, country, max_id, UNIX_TIMESTAMP(last_scraped) AS last_scraped FROM platform_user_accounts WHERE source = 6 AND (next_scraped is NULL or UNIX_TIMESTAMP(next_scraped) &lt;= $now)\" . !$scanAllBlogs ? \" AND blog_cms != \'UNKNOWN\'\" : \"\";\n\necho $sql;\n// output\n\"AND blog_cms != \'UNKNOWN\'\"</code></pre>\n\n<p>The reason is that all text prior to &quot;!$scanAllBlogs&quot; is part of the expression to be checked if true or not, so the fix will be quite easy:</p>\n\n<pre>\n<code class=\"language-php\">$now = time();\n$scanAllBlogs = false;\n$sql = \"SELECT id, blog_cms, url, platform_account AS account, platform_account_id AS accountID, country, max_id, UNIX_TIMESTAMP(last_scraped) AS last_scraped FROM platform_user_accounts WHERE source = 6 AND (next_scraped is NULL or UNIX_TIMESTAMP(next_scraped) &lt;= $now)\" . (!$scanAllBlogs ? \" AND blog_cms != \'UNKNOWN\'\" : \"\");\n\necho $sql;\n// output\n\"SELECT id, blog_cms, url, platform_account AS account, platform_account_id AS accountID, country, max_id, UNIX_TIMESTAMP(last_scraped) AS last_scraped FROM platform_user_accounts WHERE source = 6 AND (next_scraped is NULL or UNIX_TIMESTAMP(next_scraped) &lt;= 1492777632) AND blog_cms != \'UNKNOWN\'\"</code></pre>\n\n<p>&nbsp;</p>','2017-04-21 15:27:28',0),(303,'PHP','Misc','Byte Order Mask (BOM)','<p>Based on Wikipedia:</p>\n\n<blockquote>\n<p>The<span style=\"color:#B22222\">&nbsp;<strong>byte order mark</strong>&nbsp;(<strong>BOM</strong>)</span> is a&nbsp;Unicode&nbsp;character, whose appearance as a&nbsp;magic number&nbsp;at the start of a text stream can signal several things to a&nbsp;program&nbsp;consuming the text:</p>\n\n<ul>\n	<li>What byte order, or&nbsp;endianness, the text stream is stored in;</li>\n	<li>The fact that the text stream is Unicode, to a high level of confidence;</li>\n	<li>Which of several Unicode encodings that text stream is encoded as.</li>\n</ul>\n\n<p>The&nbsp;<span style=\"color:#B22222\">UTF-8&nbsp;representation of the BOM</span> is the (hexadecimal) byte sequence&nbsp;<span style=\"color:#B22222\"><code>0xEF,0xBB,0xBF</code></span></p>\n</blockquote>\n\n<p>One use case of BOM in PHP is to write the UTF-8 BOM to top of a file to indicate it is an UTF-8 encoded file:</p>\n\n<pre>\n<code class=\"language-php\">$fp = fopen(\'php://output\', \'w\');\n$bom = chr(0xEF) . chr(0xBB) . chr(0xBF);\nfputs($fp, $bom);</code></pre>','2017-05-02 23:53:00',2),(304,'Statsit','Accounts','Servers Credentials','<p><strong><span style=\"color:rgb(178, 34, 34)\">&nbsp;New passwords of 108, 112, 117 servers</span></strong></p>\n\n<pre>\n<code>c4mBTF2N6Ta_b*7A7N117=4-$x*PYWTn*ZM\n\nc4mBTF2N6Ta_b*7A7N112=4-$x*PYWTn*ZM\n\nc4mBTF2N6Ta_b*7A7N108=4-$x*PYWTn*ZM</code></pre>','2017-05-04 11:37:39',0),(305,'Statsit','Scraping & Processing','Platforms Defined','<pre>\n<code class=\"language-php\">define(&#39;TECHNORATI&#39;,1);\ndefine(&#39;DIGG&#39;,2);\ndefine(&#39;YOUTUBE&#39;,3);\ndefine(&#39;FLICKR&#39;,4);\ndefine(&#39;YAHOO_NEWS&#39;,5);\ndefine(&#39;TWITTER&#39;,6);\ndefine(&#39;GOOGLE_BLOG_SEARCH&#39;,7);\ndefine(&#39;GOOGLE_GROUP_SEARCH&#39;,8);\ndefine(&#39;FACEBOOK&#39;,9);\ndefine(&#39;FACEBOOK_POSTS&#39;,10);\ndefine(&#39;INSTAGRAM&#39;,11);\ndefine(&#39;CMS_Blog&#39;,12);</code></pre>','2017-06-09 10:31:06',1),(306,'Statsit','Influencer','MongoDB Commands','<pre>\n<code class=\"language-json\">1. Influencer and Influencer Sets Query\n\ndb.users.update({&#39;surname&#39;: &#39;Kan&#39;}, {$set: {&#39;education.bachelor&#39;: {name: &#39;Sichuan University&#39;, &#39;date&#39;: &#39;2001-2005&#39;}, &#39;education.master&#39;: {name: &#39;Lapeenranta University of Technology&#39;, &#39;date&#39;: &#39;2010-2013&#39;}}}, {upsert: true})\n\n\nCheck key info of Influencer sets\ndb.influencr_sets.find({id: 152}, {_id:0, id:1, ids:1, ida:1, sid:1, sids:1, brand:1, blfilter:1, name:1, status:1, reqBrand:1, reqPassion:1}).pretty()\n\n\nCheck subscores\ndb.twitter.find({set: 5, &#39;sc_brand.5&#39;: {$gt: 0}}, {_id:0, sc_ampl:1, sc_brand:1, sc_cont:1, handle:1, sc:1}).sort({&#39;sc.5&#39;: -1}).limit(2).pretty()\n\n\nDefault IAB filters IDs\n2, 1, 6, 22, 13, 5, 15, 14, 19, 17, 4, 9, 11, 12, 10, 0, 8, 21, 7, 16, 20\n\n\nFinnish IAB filters IDs\n296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316\n\nFor example, update a set&#39;s cloud ids in a batch\ndb.influencr_sets.update({id: 132}, {$set: {cloud: [296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316]}});\n\n2. Check MongoDB ports\nsudo lsof -iTCP -n -P | grep -E &#39;27017|PID&#39;\nsudo lsof -iTCP -n -P | grep -E &#39;27017.*LISTEN|PID&#39;\nnetstat -anp | grep -Ei &#39;27017.*listen|proto&#39;\n\n\n3. Check all listening ports\nss -tln\n\n\n4. Backup and Restore\n\n$TODAY is an environmental variable that give date as folder name\n\n4.1. Backup All\n/usr/local/mongodb-linux-x86_64-2.2.2/bin/mongodump --out /storage/mongodb/backup/$TODAY\n\n\n4.2. Backup Chosen DB and Collections\n/usr/local/mongodb-linux-x86_64-2.2.2/bin/mongodump --collection collection --db db --out /storage/mongodb/backup/$TODAY\n\n\n4.3. Restore All\n/usr/local/mongodb-linux-x86_64-2.2.2/bin/mongorestore /storage/mongodb/backup/$TODAY\n\n\n4.4. Restore Chosen DB and Co\n/usr/local/mongodb-linux-x86_64-2.2.2/bin/mongorestore --db backup_test /storage/mongodb/backup/$TODAY/backup_test\n\n\n4.5. Restore Chosen DB and Collections\n/usr/local/mongodb-linux-x86_64-2.2.2/bin/mongorestore -c test -d backup_test /storage/mongodb/backup/$TODAY/backup_test/test.bson\n</code></pre>','2017-05-04 11:46:21',0),(307,'JavaScript','Misc','Stop Running Script','<p>For debugging purpose, it is very handy to have functions like die() in PHP, but there is no such a dedicated function to acheive so in JS, but an easy wordaround is as follows:</p>\n\n<pre>\n<code class=\"language-javascript\">function test(){\n //scripts to debug\n return false;\n //more scripts not to run\n}</code></pre>','2017-05-15 12:42:39',0),(308,'Virtual Machine','Installation','Resize Virtualbox Disk','<p>1. Backup you virtualbox file just in case</p>\n\n<p>2. Remove the virtualbox file from the virtual machine storage settings</p>\n\n<p>3. Resize the disk size of the virtualbox file in cmd line, e.g. resize to 50GB in Windows 10 host</p>\n\n<pre>\n<code class=\"language-bash\">&lt;path of VBoxmanage executive&gt; modifyhd D:Programsvirtual_machinesmint-xfcemint-xfce.vdi --resize 50000</code></pre>\n\n<p>4. Mount the resized vitualbox back on to the virutal machine in storage settings</p>\n\n<p>5. Mount Gparted live CD iso to optical drive of the same virtual machine and set it as first booting device</p>\n\n<p>6. Start the virtual machine to boot into Gparated iso and choose all default settings until you see the partition tool ui</p>\n\n<p>7. Remove swap partition and its parent partition, otherwise the resize of the master partition is not allowed</p>\n\n<p>8. Resize the master Linux partition to take all available space except some space for swap usage later, e.g. 6144MB(6GB)</p>\n\n<p>9. Create a new &#39;Extended&#39; partition to take all unallocated space, e.g. 6GB</p>\n\n<p>10. Under the new &#39;Extended&#39; partition, create a new &#39;logical partition&#39; with type &#39;linux-swap&#39; to take all unallocated space, e.g. 6GB</p>\n\n<p>11. Apply all changes above to take effect and restart to login to your Linux system</p>\n\n<p>12. After you login,&nbsp; the Linux system won&#39;t recogonize swap due to the change of UUID of the swap partition, so you need to install Gparted on your Linux and open it, right click the swap partition and select &#39;Information&#39; which displays the UUID of the new swap partition</p>\n\n<p>13. Edit /etc/fstab as Admin and paste the new UUID of new swap partition</p>\n\n<pre>\n<code class=\"language-ini\"># /etc/fstab: static file system information.\n#\n# Use \'blkid\' to print the universally unique identifier for a\n# device; this may be used with UUID= as a more robust way to name devices\n# that works even if disks are added and removed. See fstab(5).\n#\n# &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;\n# / was on /dev/sda1 during installation\nUUID=67f33fd2-0f2c-4aea-9265-7bdbfc6232eb /               ext4    errors=remount-ro 0       1\n# swap was on /dev/sda5 during installation\nUUID=66ecac03-8903-4de2-8ab2-f9147582ee7d none            swap    sw              0       0\n</code></pre>\n\n<p>14. Save and restart the Linux system to make swap mounted automatically again.</p>','2017-05-18 12:57:29',5),(309,'MongoDB','Index','Add Single Field Index','<p>The reason why I checked out index creation issue of Mongo is that, when sort a collection by chosen field,<span style=\"background-color:rgb(255, 236, 0)\"> if this field is not indexed, then some limitation will be applied,</span> as shown below:</p>\n\n<p><em>&quot;In MongoDB, sort operations can obtain the sort order by retrieving documents based on the ordering in an index. If the query planner cannot obtain the sort order from an index, it will sort the results in memory. Sort operations that use an index often have better performance than those that do not use an index. In addition, sort operations that do&nbsp;not&nbsp;use an index will abort when they use 32 megabytes of memory.&quot;</em></p>\n\n<p>Creating a single field index is quite easy</p>\n\n<pre>\n<code class=\"language-json\">db.twitter.createIndex({followers: -1);</code></pre>\n\n<p>&nbsp;Which means to create an index against &#39;followers&#39; field of &#39;twitter&#39; collection <span style=\"background-color:rgb(255, 236, 0)\">in DESC order</span>. The sorting order used when creating index does not matter, you can use the index to sort both in ASC or&nbsp;DESC after creation.</p>\n\n<p>You can check existing indexes of your collection via following cmd</p>\n\n<pre>\n<code class=\"language-javascript\">db.twitter.getIndexes()\n[\n	{\n		&quot;v&quot; : 1,\n		&quot;key&quot; : {\n			&quot;_id&quot; : 1\n		},\n		&quot;ns&quot; : &quot;influencers.twitter&quot;,\n		&quot;name&quot; : &quot;_id_&quot;\n	},\n	{\n		&quot;v&quot; : 1,\n		&quot;key&quot; : {\n			&quot;followers&quot; : -1\n		},\n		&quot;ns&quot; : &quot;influencers.twitter&quot;,\n		&quot;name&quot; : &quot;followers_-1&quot;\n	}\n]\n</code></pre>\n\n<p>&nbsp;</p>','2017-06-01 18:58:06',3),(310,'Statsit','Influencer','Influencer Management Path','<p>An influencer management path would go a bit something like this:</p>\n\n<p>1. Rank</p>\n\n<p>2. Mark to be contacted</p>\n\n<p>3. Follow</p>\n\n<p>4. Get them Following you (retweet or use promotion if required)</p>\n\n<p>5. Get them Mention or React on you</p>\n\n<p>6. Make an offer</p>','2017-06-02 16:32:52',0),(311,'Statsit','Scraping & Processing','Facebook Post Scraping','<p>Database for facebook posts configuration is <span style=\"background-color:#FFEC00\">new_mm_pool</span></p>\n\n<p><strong><span style=\"color:#B22222\">1. Fetch keywords used to find matching facebook official pages</span></strong></p>\n\n<ul>\n	<li>facebook page tags given by analysts, from database <span style=\"background-color:#FFEC00\">facebook_page_tags</span></li>\n	<li>if tags do&nbsp;not exist, then fetch sample&#39;s own scraping keywords and insert them into facebook_page_tags</li>\n</ul>\n\n<p><strong><span style=\"color:#B22222\">2. Scan keywords for valid official FB pages</span></strong></p>\n\n<ul>\n	<li>Only keywords not scanned before or scanned longer than 30 days will be searched.</li>\n	<li>Insert newly found pages into database<span style=\"background-color:#FFEC00\"> facebook_official_pages </span>and update scanned timestamp for each tag inside facebook_page_tags&nbsp;</li>\n</ul>\n\n<p><strong><span style=\"color:#B22222\">3. Get all available official pages and fetch posts for them</span></strong></p>\n\n<ul>\n	<li>Get page meta-data from facebook_official_pages</li>\n	<li>Get data via graph api one page by another</li>\n</ul>','2017-06-09 17:43:57',0),(312,'Statsit','Influencer','New Influencer Set Config','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Add Influencer Score calculation benchmark inside &quot;influencr.score.php&quot;</span></strong></p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. If localized brand filter is available, configure set to use localized brand filter inside &#39;influencr.score.php&#39;.</span></strong></p>\n\n<pre>\n<code class=\"language-php\">public static function getFilters($keywordsType = &#39;BRANDS COUNT&#39;, $setId = false) {\n        $filters = array();\n        $db = new database();\n        $db-&gt;setReThrowExceptions(TRUE);\n        $db-&gt;connect(DB_UI_HOST, DB_UI_USER, DB_UI_PWD, &#39;Statsit&#39;);\n\n        //Brand names are moved to central kw storage: http://my.statsit.com/admin/apps/keywords/show/31\n        if(in_array($keywordsType, array(&#39;BRANDS COUNT&#39;))){\n            // Kan modified, 05.2016, to add custom brand filters in addition, e.g. Arabic brand names.\n            // @todo decided localized brand filter automatically based on set&#39;s market\n            $arabicSets = array();\n            $finnishSets = array(130, 132, 134, 136, 138);\n            $estonianSets = array();\n            if ($setId &amp;&amp; in_array($setId, $arabicSets)) {\n              $sql = &quot;SELECT word FROM keywords WHERE cat_name in (&#39;BRANDS&#39;, &#39;BRANDS_AR&#39;, &#39;BRANDS_MENA_EN&#39;)&quot;;\n            }else if ($setId &amp;&amp; in_array($setId, $finnishSets)) {\n              $sql = &quot;SELECT word FROM keywords WHERE cat_name in (&#39;BRANDS&#39;, &#39;BRANDS_FI&#39;)&quot;;\n            }else if ($setId &amp;&amp; in_array($setId, $estonianSets)){\n              $sql = &quot;SELECT word FROM keywords WHERE cat_name in (&#39;BRANDS&#39;, &#39;BRANDS_EE&#39;)&quot;;\n            }else{\n              $sql = sprintf(&#39;SELECT word FROM keywords WHERE cat_name =&#39;%s&#39;&#39;, &#39;BRANDS&#39;);\n            }\n\n            $db-&gt;query($sql);\n            $tmpKeywords = $db-&gt;fetchAll();\n\n            foreach($tmpKeywords as $kw){\n                $kw = $kw[&#39;word&#39;];\n                $tagName = TweetsAnalyzer::getKeywordTag($kw);\n                $kw = trim($kw);\n                $filters[$tagName] = $kw;\n            }\n        }\n}</code></pre>','2017-06-16 12:46:08',1),(313,'Statsit','Scraping & Processing','Twitter Scraping Tips','<p><strong><span style=\"color:#B22222\">1. Historical scraping</span></strong></p>\n\n<p>Historical scraping older than one week is technically not feasible, as Twitter API said: &#39;Keep in mind that the search index has a 7-day limit. In other words, no tweets will be found for a date older than one week.&#39;</p>','2017-06-21 22:46:54',0),(314,'Apache','Basics','IP-based Virtual Host','<p><strong><span style=\"color:#B22222\">Apache support IP-based virutal host, mostly it means you can use different ip+host combination to support multiple websites hosted in the same server, for example, ip:80 for one website, and ip:8080 for another.</span></strong></p>\n\n<pre>\n<code class=\"language-apache\">&lt;VirtualHost *:3000&gt;\n        # The ServerName directive sets the request scheme, hostname and port that\n        # the server uses to identify itself. This is used when creating\n        # redirection URLs. In the context of virtual hosts, the ServerName\n        # specifies what hostname must appear in the request\'s Host: header to\n        # match this virtual host. For the default virtual host (this file) this\n        # value is not decisive as it is used as a last resort host regardless.\n        # However, you must set it for any further virtual host explicitly.\n        # ServerName pdxagent.com\n\n        ServerAdmin kan@statsit.com\n        DocumentRoot /var/www/html2\n\n        # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,\n        # error, crit, alert, emerg.\n        # It is also possible to configure the loglevel for particular\n        # modules, e.g.\n        #LogLevel info ssl:warn\n\n        ErrorLog ${APACHE_LOG_DIR}/pdxagent.error.log\n        CustomLog ${APACHE_LOG_DIR}/paxagent.access.log combined\n\n        # For most configuration files from conf-available/, which are\n        # enabled or disabled at a global level, it is possible to\n        # include a line for only one particular virtual host. For example the\n        # following line enables the CGI configuration for this host only\n        # after it has been globally disabled with \"a2disconf\".\n        #Include conf-available/serve-cgi-bin.conf\n\n        &lt;Directory /var/www/html2&gt;\n                Options -Indexes\n                AllowOverride All\n                Order allow,deny\n                allow from all\n        &lt;/Directory&gt;\n&lt;/VirtualHost&gt;\n</code></pre>','2017-07-19 20:43:37',1),(315,'Linux','Commands','Symbolic Link','<p><strong><span style=\"color:rgb(178, 34, 34)\">Create Symbolic Link is quite easy with &#39;ln&#39; command</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">ln -s &lt;source path&gt; &lt;link path&gt;</code></pre>\n\n<p>For example&nbsp;</p>\n\n<pre>\n<code class=\"language-bash\">â•­â”€kan@mint-xfce /etc/nginx/sites-enabled  \nâ•°â”€$ sudo ln -s /etc/nginx/sites-available/demos demos\nâ•­â”€kan@mint-xfce /etc/nginx/sites-enabled  \nâ•°â”€$ ll\ntotal 0\nlrwxrwxrwx 1 root root 34 Jul 21 08:12 default -&gt; /etc/nginx/sites-available/default\nlrwxrwxrwx 1 root root 32 Jul 21 08:47 demos -&gt; /etc/nginx/sites-available/demos</code></pre>\n\n<p><strong><span style=\"color:#B22222\">Remember to use full path in case not working, for example on Mac&nbsp;</span></strong></p>','2018-08-16 11:53:15',2),(316,'WordPress','Installation','Update Settings','<p>When WP prompted you to give FTP connection information when you try to update WP, theme or plugins, usually it means a permission problem in your WP installation folder, you can fix this by doing following step:</p>\n\n<pre>\n<code class=\"language-bash\">sudo chown -R www-data:www-data ./wordpress/\nsudo chmod -R 775 ./wordpress/</code></pre>','2017-07-28 19:47:47',0),(317,'WordPress','Actions','Wp_head & Wp_footer','<p><strong><span style=\"color:rgb(178, 34, 34)\">wp_head</span></strong> and<strong><span style=\"color:rgb(178, 34, 34)\"> wp_footer</span></strong> actions are mainly used to add scripts, stylesheets or meta tags to header and before end of body element respectively.</p>\n\n<p>We can create following code inside functions.php under root folder of a theme to output what these two actions output to the html:</p>\n\n<pre>\n<code class=\"language-php\">function start_wp_head_buffer() {\n    ob_start();\n}\nadd_action(\'wp_head\',\'start_wp_head_buffer\', 0);\n\nfunction end_wp_head_buffer() {\n    $in = ob_get_clean();\n\n    // here do whatever you want with the header code\n    debugDump($in); // output the result unless you want to remove it\n}\nadd_action(\'wp_head\',\'end_wp_head_buffer\',999);\n\nfunction start_wp_footer_buffer() {\n    ob_start();\n}\nadd_action(\'wp_footer\',\'start_wp_footer_buffer\', 0);\n\nfunction end_wp_footer_buffer() {\n    $in = ob_get_clean();\n\n    // here do whatever you want with the header code\n    debugDump($in); // output the result unless you want to remove it\n}\nadd_action(\'wp_footer\',\'end_wp_footer_buffer\',999);</code></pre>\n\n<p>0 and 100 are priority values, lower number means earlier execution. So it means ob_start will be executed at the very beginning of wp_head or wp_footer actions, and ob_get_clean() is executed after all other actions.</p>','2017-07-28 19:53:52',0),(318,'PHP','Session & Cookie','Remove Cookies','<p><strong><span style=\"color:rgb(178, 34, 34)\">Remove one cookie</span></strong></p>\n\n<p>For example you have set a cookie like this:</p>\n\n<pre>\n<code class=\"language-php\">setcookie(\"hello\", world, strtotime( \'+30 days\' ), \"/\", \"\", \"\", TRUE);\n</code></pre>\n\n<p>You can remove such a cookie easily via</p>\n\n<pre>\n<code class=\"language-php\">setcookie(\'hello\', \'\', 1);\nsetcookie(\'hello\', \'\', 1, \'/\');\n</code></pre>\n\n<ul>\n	<li><span style=\"background-color:rgb(255, 255, 255); color:rgb(36, 39, 41); font-family:arial,helvetica neue,helvetica,sans-serif; font-size:15px\">A value of &quot;1&quot; means January 1st, 1970, which ensures expiration 100%</span></li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Remove all cookies</span></strong></p>\n\n<p>You can use following scripts to remove all cookies</p>\n\n<pre>\n<code class=\"language-php\">if (isset($_SERVER[\'HTTP_COOKIE\'])) {\n    $cookies = explode(\';\', $_SERVER[\'HTTP_COOKIE\']);\n    foreach($cookies as $cookie) {\n        $parts = explode(\'=\', $cookie);\n        $name = trim($parts[0]);\n        setcookie($name, \'\', 1);\n        setcookie($name, \'\', 1, \'/\');\n    }\n}</code></pre>\n\n<p>Rather than using the value of <span style=\"background-color:#FFEC00\">$_COOKIE</span> super global. The reason is that if cookie names are in Array notation, eg: user[username] , loop keys of <span style=\"background-color:rgb(255, 236, 0)\">$_COOKIE</span> array cannot remove such a cookie, but <span style=\"background-color:rgb(255, 236, 0)\">$_SERVER[&#39;HTTP_COOKIE&#39;]</span> can, e.g.</p>\n\n<pre>\n<code class=\"language-php\">setcookie(\"hello[color]\", \'red\', strtotime( \'+30 days\' ), \"/\", \"\", \"\", TRUE);\n</code></pre>\n\n<p>In <span style=\"background-color:rgb(255, 236, 0)\">$_COOKIE</span>, it looks like</p>\n\n<pre>\n<code class=\"language-php\">array(2) {\n    [\"PHPSESSID\"]=&gt;\n    string(26) \"r37ovpollblrquk0j7bamrd9m0\"\n    [\"hello\"]=&gt;\n    array(1) {\n      [\"color\"]=&gt;\n      string(1) \"1\"\n    }\n  }</code></pre>\n\n<p>while for <span style=\"background-color:rgb(255, 236, 0)\">$_SERVER[&#39;HTTP_COOKIE&#39;]</span>, it looks like</p>\n\n<pre>\n<code class=\"language-php\">string(52) \"PHPSESSID=r37ovpollblrquk0j7bamrd9m0; hello[color]=1\"</code></pre>','2017-07-30 13:43:06',0),(319,'PHP','Class & Object','Set & Get Methods','<p>Check the following code to see why __set() and __get() are magic methods compare with normal user-defined setter or getter methods</p>\n\n<pre>\n<code class=\"language-php\">class test{\n \n    private $a = 3;\n    public $b = 4;\n    \n    public function __get($p) { \n      $m = &quot;get_$p&quot;;\n      if(method_exists($this, $m)) return $this-&gt;$m();\n      user_error(&quot;undefined property $p&quot;);\n    }\n    \n    public function __set($p, $v) {\n        $m = &quot;set_$p&quot;;\n        if (method_exists($this, $m)) {\n            return $this-&gt;$m($v);\n        }\n    }\n    \n    public function get_a(){return $this-&gt;a;}\n    \n    public function set_a($v){return $this-&gt;a = $v + 1;}\n}\n\n\n$t = new test();\n$t-&gt;a = 4;\necho $t-&gt;a;//5\necho $t-&gt;b;//4</code></pre>','2017-08-10 12:16:34',0),(320,'PHP','Callable','Call_user_func & Call_user_func_array','<p><span style=\"color:#B22222\"><strong>What are call_user_func() and call_user_func_array()?</strong></span></p>\n\n<pre>\n<code class=\"language-php\">function test($a, $b){\n    echo \"$a $b&lt;br&gt;\";\n}\n$args = [\'wonderful\', \'world\'];\ncall_user_func(test, $args[0], $args[1]);// \'wonderful world\'\ncall_user_func_array(test, $args);// \'wonderful world\'\ncall_user_func_array(function($a, $b){echo \"$a $b&lt;br&gt;\";}, $args);// \'wonderful world\'</code></pre>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"color:#B22222\">Why using call_user_func() or call_user_func_array() instead of directly calling the function?</span></strong></p>\n\n<blockquote>\n<p><code>call_user_func_array</code>&nbsp;is mostly used in dynamic contexts, when you don&#39;t know which function you will call and what arguments you are going to pass beforehand</p>\n</blockquote>\n\n<p>&nbsp;But<span style=\"background-color:#FFEC00\"> variable function </span>can do the same thing with array unpacking, for example</p>\n\n<pre>\n<code class=\"language-php\">function multi($a, $b){\n    echo $a * $b . \"&lt;br&gt;\";\n}\n\nfunction add($a, $b){\n    echo $a + $b . \"&lt;br&gt;\";\n}\n$args = [2, 100];\n$func = \'multi\';\ncall_user_func($func, $args[0], $args[1]);//200\n$func = \'add\';\ncall_user_func_array($func, $args);//102\n$func(...$args);//102</code></pre>\n\n<p><strong><span style=\"color:#B22222\">Check the example with anonymous functions (Lambda or Closure)</span></strong></p>\n\n<pre>\n<code class=\"language-php\">$multi = function ($a, $b){\n    echo $a * $b . \"&lt;br&gt;\";\n};\n$add = function ($a, $b){\n    echo $a + $b . \"&lt;br&gt;\";\n};\n$args = [2, 100];\n$func = $multi;\n$func2 = &amp;$add;//reference\ncall_user_func($add, $args[0], $args[1]);//102\ncall_user_func($multi, $args[0], $args[1]);//200\ncall_user_func_array($func, $args);//200\ncall_user_func_array($func2, $args);//102\ncall_user_func_array(function ($a, $b){echo pow($b, $a) . \"&lt;br&gt;\";}, $args);//10000\n$func2(...$args);//102\n\n$a = 27;\n$b = 4;\n$func3 = function($x) use($a, $b){\n echo $a % $b * $x;\n};\ncall_user_func($func3, 100);//300</code></pre>\n\n<p>&nbsp;</p>','2017-08-12 18:30:52',1),(321,'JQuery','Deferred','Jsonp','<p>Defination of JSONP by its author:</p>\n\n<blockquote>\n<p>A new technology agnostic standard methodology for the script tag method for cross-domain data fetching:&nbsp;<em>JSON with Padding</em>, or simply&nbsp;JSONP</p>\n</blockquote>\n\n<p>&nbsp;So this is how JSONP basically works:</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Use &lt;script&gt; tag to access the cross-domain url, e.g.&nbsp;</span></strong></p>\n\n<pre>\n<code class=\"language-html\">&lt;script&gt;\n  function world(data){\n    console.log(data);\n  }\n&lt;/script&gt;\n&lt;script src=\'http://remote.io/jsonp.php?p=hello&amp;callback=world\'&gt;&lt;/script&gt;\n</code></pre>\n\n<ul>\n	<li>the url includes normal parameters to pass and one &#39;<span style=\"background-color:rgb(255, 236, 0)\">callback</span>&#39; parameter which will tell the remote script which callback function will be called on the requesting page after remote returns result</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. The remote script must be able to assemble the returned data in a JS function call pattern, e.g.</span></strong></p>\n\n<pre>\n<code class=\"language-php\">$callback = $_GET[\'callback\'];\n$data = [\'hello\'=&gt;\'world\', \'mood\'=&gt;\'colorful\'];\necho \"$callback(\".json_encode($data).\")\";</code></pre>\n\n<p>After the calling, the remote script will return data as follows:</p>\n\n<pre>\n<code class=\"language-javascript\">world({\"hello\":\"world\",\"mood\":\"colorful\"})</code></pre>\n\n<p>The returned data in turn is identified by script tag and execute it as JS code, so the function<span style=\"background-color:rgb(255, 236, 0)\"> world() </span>is then called.</p>\n\n<p>After the function is called, the passed object is output to the browser console.</p>\n\n<p><strong><span style=\"color:#B22222\">3. Use jQuery to do the JSONP call</span></strong></p>\n\n<p>You can manually add the script calling remote to the page with script tags, and it is also easy to do so with only jQuery</p>\n\n<pre>\n<code class=\"language-javascript\">const jsonP = $.ajax({\n        url: \'http://192.168.0.12/jsonp.php\',\n        dataType: \'jsonp\',\n        method: \'GET\',\n        jsonpCallback: \'world\'\n      });\njsonP.done(function(data){\n        console.log(\"ajax jsonp done call: \" + data.mood);\n      })</code></pre>\n\n<p>jQuery will append callback &quot;callback=world&quot; automatically to the jsonp call, and when data returned from remote script:</p>\n\n<ul>\n	<li>First the function embed inside the returned data will be run&nbsp;</li>\n	<li><span style=\"background-color:#7AFF91\">Then the pure data assigned to the returned data will be run in the .done() handler</span></li>\n</ul>\n\n<p>For example, the JS callback function defined on page is like this</p>\n\n<pre>\n<code class=\"language-html\">&lt;script&gt;\n  function world(data){\n    console.log(\"world function call: \" + data.hello);\n  }\n&lt;/script&gt;</code></pre>\n\n<p>And the data returned is:</p>\n\n<pre>\n<code class=\"language-javascript\">world({\"hello\":\"world\",\"mood\":\"colorful\"})</code></pre>\n\n<p><span style=\"background-color:#FFEC00\">After data is returned, console will show following results in sequence:</span></p>\n\n<pre>\n<code>world function call: world\najax jsonp done call: colorful</code></pre>\n\n<p><strong><span style=\"color:#B22222\">4. If you do not want to define a callback function specifically, then you can just deal with pure data with .done() handler without giving any value to jsonpCallback parameter, e.g.</span></strong></p>\n\n<pre>\n<code class=\"language-javascript\">const jsonP = $.ajax({\n        url: \'http://192.168.0.12/jsonp.php\',\n        dataType: \'jsonp\'\n      }).done(function(data){\n        console.log(\"ajax jsonp done call: \" + data.mood);\n      })</code></pre>\n\n<p>The process is like this:</p>\n\n<ul>\n	<li>jQuery will create a random callback function and bind it to <span style=\"background-color:#FFEC00\">window object</span>,&nbsp;&nbsp;and attach the callback name&nbsp;to the jsonp call url, e.g.</li>\n</ul>\n\n<pre>\n<code>http://192.168.0.12/jsonp.php?callback=jQuery112404308845816575615_1502787671551&amp;_=1502787671552</code></pre>\n\n<ul>\n	<li>And data returned like this:</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">jQuery112404308845816575615_1502787671551({\"hello\":\"world\",\"mood\":\"colorful\"})</code></pre>\n\n<ul>\n	<li>This function does nothing, and then only the pure data is passed to ajax .done() handler, the console will show:</li>\n</ul>\n\n<pre>\n<code>ajax jsonp done call: colorful</code></pre>\n\n<p>&nbsp;</p>','2017-08-15 12:05:45',2),(322,'Nginx','Configuration','Set New Variable In $_SERVER Array','<p>Dislike Apache which uses .htaccess to set variable that can be saved in $_SERVER</p>\n\n<pre>\n<code class=\"language-apache\">SetEnv CI_ENV testing </code></pre>\n\n<p>Nginx does not use .htaccess file, you can do the same in Nginx conf file if you system uses php-fpm</p>\n\n<pre>\n<code class=\"language-nginx\">location ~*.php { \n   .....\n   fastcgi_param APPLICATION_ENV staging;\n   .....\n}</code></pre>','2017-08-16 22:24:50',2),(323,'Linux','Miscs','Inotify Reaches Limit','<p>What is <strong><span style=\"color:#B22222\">inotify</span></strong>:</p>\n\n<blockquote>\n<p>Inotify&nbsp;(inode notify) is a Linux kernel subsystem that acts to extend filesystems to notice changes to the filesystem, and report those changes to applications.</p>\n</blockquote>\n\n<p>Sometimes, you will receive waring to indicate that inotify limit is reached, e.g. using a git client like GitKraken. When this limit is reached, many services depending on inotify to watch changes of files will stop working as well, for example <span style=\"background-color:#FFEC00\">gulp or webpack</span>.</p>\n\n<p>You can check current limit with:</p>\n\n<pre>\n<code class=\"language-bash\">cat /proc/sys/fs/inotify/max_user_watches\n8192</code></pre>\n\n<p>You can increase the default value to meet you needs, e.g.&nbsp;</p>\n\n<pre>\n<code class=\"language-bash\">echo fs.inotify.max_user_watches=32768 | sudo tee -a /etc/sysctl.conf\n#or even higher if system memory is more than 4GB\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf\n</code></pre>\n\n<p>And after eding the sysctrl.conf, reload it to take effect</p>\n\n<pre>\n<code>sudo sysctl -p</code></pre>','2017-08-22 16:36:12',0),(324,'Statsit','Influencer','Manage Custom Tags Filtering','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Under db.influencr_sets collection, add &#39;tagFilters&#39; field to indicate custom tags to be used as filters for the selected influencer set, e.g.</span></strong></p>\n\n<pre>\n<code class=\"language-javascript\">db.influencr_sets.find({id: 132}, {_id:0, id:1, tagFilters:1}).pretty();\n{\n	\"id\" : 132,\n	\"tagFilters\" : {\n		\"Public\" : [\n			1,\n			2,\n			3,\n			4,\n			5,\n			6,\n			7,\n			8,\n			9\n		]\n	}\n}\n</code></pre>\n\n<p>- <span style=\"background-color:rgb(255, 236, 0)\">Public</span> means the ids of public filters visible for any user</p>\n\n<p>- If <span style=\"background-color:rgb(255, 236, 0)\">Private</span>&nbsp;field exists, that indicates ids of the private filters used by an specified user</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Under&nbsp;db.tagFilters collection, you will find all available tag filters, e.g.</span></strong></p>\n\n<pre>\n<code class=\"language-javascript\">db.tagFilters.find({id: 6}).pretty();\n{\n	\"_id\" : ObjectId(\"5923eb3fe5c2562f0833d105\"),\n	\"created_at\" : ISODate(\"2017-05-23T07:56:47.765Z\"),\n	\"id\" : 6,\n	\"label\" : \"role\",\n	\"name\" : \"Role\",\n	\"scope\" : \"FI\",\n	\"value\" : {\n		\"State\" : [\n			\"Minister\",\n			\"Parliament Member\"\n		]\n	}\n}\n</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. Under each document inside db.twitter collection, the tag values of each influencer are listed as follows</span></strong></p>\n\n<pre>\n<code class=\"language-javascript\">db.twitter.find({set: 132, handle: \'anna_maja\'}, {_id:0,tags:1}).pretty()\n{\n	\"tags\" : {\n		\"public\" : {\n			\"gender\" : \"Female\",\n			\"party\" : \"Suomen ruotsalainen kansanpuolue\",\n			\"role\" : \"Parliament Member\"\n		}\n	}\n}\n</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">4. Custom tag values for each influencer is imported as follows:</span></strong></p>\n\n<ul>\n	<li>Save data into /assets/json/</li>\n	<li>And inside importTagData() of Profile controller, add the path of the data</li>\n	<li>In browser, visiting /profiles/importtagdata to trigger the function to import data into mongodb</li>\n</ul>','2017-08-24 10:56:32',1),(326,'Statsit','Panel Scraping','Blog|Youtube|FB|Instagram For Influencers','<h3><span style=\"color:#B22222\"><strong>Facebook Page Scraping</strong></span></h3>\n\n<p><span style=\"color:#B22222\">1. Technical Detail</span></p>\n\n<ul>\n	<li>\n	<p>use APP Access Token to make API request</p>\n	</li>\n	<li>Public Pages &amp; Groups can be read, but normal user&#39;s own Facebook is not readable (you must have user-specific User Access Token granted by user).</li>\n</ul>','2017-09-07 23:36:34',0),(327,'HTML','DOM','Native Form Validation Object','<pre>\n<code class=\"language-html\">&lt;input id=\"foo\" type=\'text\' pattern = \"[0-9]{4}\" value=\'a\' required/&gt;\n&lt;script&gt;\nvar input = document.getElementById(\'foo\');\nvar a  = input.validity;\nif(a.typeMismatch){\n	input.setCustomValidity(\'Type Mismatch\');\n}else if(a.patternMismatch){\n	input.setCustomValidity(\'Pattern Mismatch\');\n}else{\n	input.setCustomValidity(\'Required\');\n}\n\nconsole.log(a, input.validationMessage);\n\n&lt;/script&gt;</code></pre>','2018-04-03 12:06:44',6),(328,'Linux','Commands','AWK','<p>From digitalocean:</p>\n\n<blockquote>\n<p>Awk is both a programming language and text processor that can be used to manipulate text data in very useful ways.</p>\n</blockquote>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">&nbsp;The basic format of an awk command is:</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">awk &#39;/search_pattern/ { action_to_take_on_matches; another_action; }&#39; file_to_parse</code></pre>\n\n<ul>\n	<li>You can omit either the search portion or the action portion from any awk command.</li>\n	<li>By default, <span style=\"background-color:rgb(122, 255, 145)\">the action taken if the &quot;action&quot; portion is not given is &quot;print&quot;.</span> This simply prints all lines that match.</li>\n	<li><span style=\"background-color:rgb(122, 255, 145)\">If the search portion is not given, awk performs the action listed on each line</span>.</li>\n	<li><span style=\"background-color:white\">If both are given, awk uses the search portion to decide if the current line reflects the pattern, and then performs the actions on matches.</span></li>\n	<li><span style=\"background-color:white\"><span style=\"background-color:rgb(255, 118, 131)\">But you must give at least search pattern or action, otherwise no output will be given</span>.</span></li>\n</ul>\n\n<p>There are also optional&nbsp;<span style=\"color:rgb(178, 34, 34)\"><strong><code>BEGIN</code></strong></span>&nbsp;and&nbsp;<span style=\"color:rgb(178, 34, 34)\"><strong><code>END</code></strong></span>&nbsp;blocks that can contain commands to execute before and after the file processing, respectively.</p>\n\n<pre>\n<code class=\"language-bash\">awk &#39;BEGIN { action; }\n/search/ { action; }\nEND { action; }&#39; input_file</code></pre>\n\n<p>For instance in /etc/passwd:</p>\n\n<pre>\n<code class=\"language-bash\">root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin</code></pre>\n\n<p>And you can filter the content with awk as follows:&nbsp;</p>\n\n<pre>\n<code class=\"language-bash\">sudo awk &#39;BEGIN { FS=&quot;:&quot;; print &quot;UserttUIDttGIDttHomettShelln--------------&quot;; }\n{print $1,&quot;tt&quot;,$3,&quot;tt&quot;,$4,&quot;tt&quot;,$6,&quot;tt&quot;,$7;}\nEND { print &quot;---------nFile Complete&quot; }&#39; /etc/passwd</code></pre>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">FS: specify the field separator, By default, it uses whitespace (spaces, tabs, etc.) to separate fields.</span></p>\n\n<p>And you will get:</p>\n\n<pre>\n<code class=\"language-bash\">User        UID     GID     Home        Shell\n--------------\nroot         0       0       /root       /bin/bash\ndaemon       1       1       /usr/sbin       /bin/sh\nbin          2       2       /bin        /bin/sh\nsys          3       3       /dev        /bin/sh\nsync         4       65534       /bin        /bin/sync\n. . .\n---------\nFile Complete</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">More examples:</span></strong></p>\n\n<p>The source text we will use is :</p>\n\n<pre>\n<code class=\"language-bash\">127.0.0.1	localhost\n127.0.1.1	mint-xfce\n192.168.1.106 ck.git.lab\n127.0.0.1	demos.io\n192.168.1.101 parent.io\n# Statsit\n69.160.245.108  statsit108\n69.160.245.112  statsit112\n69.160.245.117  statsit117\n54.208.142.59   statsit_website\n# PDX\n94.237.33.192 pdx\n94.237.33.192 pdxagent.com\n46.101.232.141 veronpalautuspaiva.fi\n# The following lines are desirable for IPv6 capable hosts\n::1     ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. Get all hosts related to &#39;statsit&#39;</span></p>\n\n<pre>\n<code class=\"language-bash\">awk &#39;/statsit/ {print}&#39; /etc/hosts \n# is equivalent to\nawk &#39;/statsit/ {print $0}&#39; /etc/hosts </code></pre>\n\n<pre>\n<code class=\"language-bash\">69.160.245.108  statsit108\n69.160.245.112  statsit112\n69.160.245.117  statsit117\n54.208.142.59   statsit_website</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. Show only IP address of the search above</span></p>\n\n<pre>\n<code class=\"language-bash\">awk &#39;/statsit/ {print $1}&#39; /etc/hosts</code></pre>\n\n<pre>\n<code>69.160.245.108\n69.160.245.112\n69.160.245.117\n54.208.142.59</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3. Search hosts related to &#39;statsit&#39; but only have ip starting with 69</span></p>\n\n<pre>\n<code class=\"language-bash\">awk &#39;/statsit/ &amp;&amp; $1 ~ /^69/ {print $1}&#39; /etc/hosts</code></pre>\n\n<pre>\n<code class=\"language-bash\">69.160.245.108\n69.160.245.112\n69.160.245.117</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4.&nbsp;Search hosts related to &#39;statsit&#39; but only have ip not starting with 69</span></p>\n\n<pre>\n<code class=\"language-bash\">awk &#39;/statsit/ &amp;&amp; $1 !~ /^69/ {print $1}&#39; /etc/hosts</code></pre>\n\n<pre>\n<code class=\"language-bash\">54.208.142.59</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">5. Search hosts with ip ending with 192</span></p>\n\n<pre>\n<code class=\"language-bash\">awk &#39;$1 ~ /192$/ {print $1}&#39; /etc/hosts</code></pre>\n\n<pre>\n<code class=\"language-bash\">94.237.33.192\n94.237.33.192</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">6. Search hosts with host name either related to &#39;git&#39; or &#39;pdx&#39;</span></p>\n\n<pre>\n<code class=\"language-bash\">awk &#39;/pdx/ || /git/ {print}&#39; /etc/hosts</code></pre>\n\n<pre>\n<code>192.168.1.106 ck.git.lab\n94.237.33.192 pdx\n94.237.33.192 pdxagent.com\n</code></pre>','2017-09-13 14:19:49',1),(329,'Statsit','Panel Scraping','Databases','<p><strong><span style=\"color:#B22222\">All databases involved into panel sample scraping over platforms other than Twitter</span></strong></p>\n\n<pre>\n<code class=\"language-sql\">/*\n * Panel Sample Scraping\n */\n\n-- 1. Tables inside each panel sample database\nCREATE TABLE panel_accounts(\nid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\naccount VARCHAR(100) NOT NULL,\ncreated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\nlast_scanned TIMESTAMP NULL DEFAULT NULL,\nUNIQUE INDEX acnt_nm (account)\n)\nDEFAULT CHARACTER SET = utf8\nCOLLATE = utf8_unicode_ci\n\nCREATE TABLE platform_user_accounts(\nid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\npanel_account_id INT UNSIGNED NOT NULL,\nsource TINYINT UNSIGNED NOT NULL,\nplatform_account VARCHAR(100) NOT NULL,\nlast_scraped TIMESTAMP NULL DEFAULT NULL,\nnext_scraped TIMESTAMP NULL DEFAULT NULL\n)\nDEFAULT CHARACTER SET = utf8\nCOLLATE = utf8_unicode_ci\n\nSELECT url FROM platform_user_accounts WHERE source = 12 AND blog_cms = \'UNKNOW\' OR blog_api_enabled = 0 INTO OUTFILE \'/home/statsit/invalid_blog_url_10912.csv\' FIELDS ENCLOSED BY \'\"\' TERMINATED BY \';\' ESCAPED BY \'\"\' LINES TERMINATED BY \'rn\';\n\n-- 2. Global table\nCREATE TABLE panel_scraping_list(\n  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,                             \n  slot_id INT UNSIGNED NOT NULL UNIQUE,\n  created_at DATETIME DEFAULT NOW(),\n  activeness TINYINT NOT NULL DEFAULT 0\n)\nDEFAULT CHARACTER SET = utf8\nCOLLATE = utf8_unicode_ci\n\nCREATE TABLE panel_scraping_enabled_platforms(\n  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,                            \n  slot_id INT UNSIGNED NOT NULL,\n  source INT UNSIGNED NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  last_scanned INT UNSIGNED NULL DEFAULT NULL,\n  frequency INT UNSIGNED DEFAULT 43200,\n  activeness TINYINT NOT NULL DEFAULT 0,\n  UNIQUE INDEX pn_pltf (slot_id, source),\n  FOREIGN KEY pn_id (slot_id)\n  REFERENCES  panel_scraping_list (slot_id)\n  ON DELETE CASCADE\n)\nDEFAULT CHARACTER SET = utf8\nCOLLATE = utf8_unicode_ci</code></pre>\n\n<p>&nbsp;</p>','2017-09-14 11:26:43',0),(330,'Statsit','Scraping & Processing','Geocode','<p>For platforms like <strong><span style=\"color:rgb(178, 34, 34)\">Twitter, Instagram and Youtube</span></strong>, geocode is used to limit the scope of matched content.</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Scraping Step</span></strong></p>\n\n<p>File &quot;/shared/statsit/medmon/common/geocode.php&quot; has a global $geocode variable which maps country code to geocode in format&nbsp;<span style=\"background-color:rgb(255, 236, 0)\">latitude/longitude/radius</span></p>\n\n<p>The geocode data is used when do the data scraping as a parameter of API call</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Processing Step</span></strong></p>\n\n<p>When &#39;<span style=\"color:rgb(178, 34, 34)\">Quality Mode</span>&#39; of Data Collection Priority is selected when creating a new keyword sample, a specific location filtering is triggered against all collected raw data.</p>\n\n<ul>\n	<li>Now this filtering is only available for <strong><span style=\"color:rgb(178, 34, 34)\">Twitter</span></strong></li>\n	<li>The file &quot;/shared/statsit/medmon/common/aux.geocodes.php&quot; is used for this feature</li>\n	<li>There is a list of pre-defined location-&gt;country map for each country, so&nbsp;location info of each post will be compared with the map for any matches, e.g. if there is a map &#39;Chicago =&gt; US&#39;, then a given location &#39;Chicago&#39; will return country code &#39;US&#39;&nbsp;</li>\n	<li>If no matches found for a given location, then the post will be unset and not going to be saved into database.</li>\n</ul>','2017-09-15 13:01:07',0),(331,'Statsit','Logs','Update Over Scraping & Processing (Production)','<p><strong><span style=\"color:rgb(178, 34, 34)\">2017-09-15</span></strong></p>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">&#39;Quality Mode</span>&#39; data collection fixed for United Kingdom:</p>\n\n<ul>\n	<li>add &#39;UK&#39; geocode to /shared/statsit/medmon/common/geocode.php</li>\n	<li>use &#39;UK&#39; instead of &#39;GB&#39; on /shared/public_html/apps/admin/slots/config.php to mark a sample as &#39;UK&#39; instead of &#39;GB&#39; when user selectes &#39;United Kingdom&#39; as the country parameter of the sample.</li>\n</ul>','2017-09-15 15:08:27',0),(332,'JavaScript','Interview','Closure','<p><span style=\"color:rgb(178, 34, 34)\"><strong>What is Closure in JavaScript:</strong></span></p>\n\n<ul>\n	<li>A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment).</li>\n	<li>In other words, a closure gives you access to an outer function&rsquo;s scope from an inner function.</li>\n	<li>In JavaScript, closures are created every time a function is created, at function creation time.</li>\n	<li>To use a closure, simply define a function inside another function and expose it. To expose a function, return it or pass it to another function.</li>\n	<li>The inner function will have access to the variables in the outer function scope, even after the outer function has returned.</li>\n</ul>\n\n<p>A simple example:</p>\n\n<pre>\n<code class=\"language-javascript\">let c = &#39;hello&#39;;\nlet world = () =&gt; {\n	console.log(c);\n}\nworld();</code></pre>\n\n<p>But in contrast for scripting language PHP, this is not possible</p>\n\n<pre>\n<code class=\"language-php\">$a = &#39;world&#39;;\nfunction hello(){\n    echo $a;\n}\n$wow = function(){\n    echo $a;\n};\nhello();// $a not defined\n$wow();// $a not defined</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Use Closure for Object Data Privacy</span></strong></p>\n\n<ul>\n	<li>In JavaScript, closures are the primary mechanism used to enable data privacy.</li>\n	<li>When you use closures for data privacy, the enclosed variables are only in scope within the containing (outer) function. You can&rsquo;t get at the data from an outside scope except through the object&rsquo;s <span style=\"background-color:rgb(255, 236, 0)\">privileged methods</span>.</li>\n	<li>In JavaScript, any exposed method defined within the closure scope is privileged.</li>\n</ul>\n\n<p>&nbsp;For example:</p>\n\n<pre>\n<code class=\"language-javascript\">const getSecret = (secret) =&gt; {\n  return {\n    get: () =&gt; secret\n  };\n};\nlet obj = getSecret(&#39;Hello World&#39;);\nconsole.log(obj.get());// &quot;Hello World&quot;</code></pre>','2017-09-17 22:11:08',2),(333,'JavaScript','Interview','Difference Between Class & Prototypal Inheritance','','2017-09-17 22:34:15',0),(334,'Apache','Basics','Enable SSL Support','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Make sure SSL module is enabled</span></strong></p>\n\n<p>Use following command to check loaded modules of Apache:</p>\n\n<pre>\n<code class=\"language-bash\">apachectl -M</code></pre>\n\n<p>If ssl_module is not found in the list, then enable it manually:</p>\n\n<pre>\n<code class=\"language-bash\"># enable apache ssl module\nsudo a2enmod ssl\n# restart apache to take effect\nsudo service apache2 restart</code></pre>\n\n<p><strong><span style=\"color:#B22222\">2. Configure the virtual host setting of the website which needs ssl support</span></strong></p>\n\n<p>Apache by default has a <span style=\"background-color:rgb(255, 236, 0)\">default-ssl.conf</span> file under <span style=\"color:rgb(178, 34, 34)\">/etc/apache2/sites-available</span> folder to help you easily trigger ssl support for default virtual host.</p>\n\n<pre>\n<code class=\"language-apache\">&lt;IfModule mod_ssl.c&gt;\n    &lt;VirtualHost _default_:443&gt;\n        ServerAdmin admin@example.com\n        ServerName your_domain.com\n        ServerAlias www.your_domain.com\n        DocumentRoot /var/www/html\n\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n        SSLEngine on\n        SSLCertificateFile	/etc/ssl/certs/ssl-cert-snakeoil.pem\n		SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key\n\n        &lt;FilesMatch \".(cgi|shtml|phtml|php)$\"&gt;\n                        SSLOptions +StdEnvVars\n        &lt;/FilesMatch&gt;\n        &lt;Directory /usr/lib/cgi-bin&gt;\n                        SSLOptions +StdEnvVars\n        &lt;/Directory&gt;\n        BrowserMatch \"MSIE [2-6]\" \n                        nokeepalive ssl-unclean-shutdown \n                        downgrade-1.0 force-response-1.0\n        BrowserMatch \"MSIE [17-9]\" ssl-unclean-shutdown\n\n    &lt;/VirtualHost&gt;\n&lt;/IfModule&gt;</code></pre>\n\n<p>If you want to enable other virtual hosts in different folders from default app folder, you can create ssl virtual host setting inside the site&#39;s own virtual host setting file inside <span style=\"background-color:rgb(255, 236, 0)\">/etc/apache2/sites-enabled/</span>:</p>\n\n<pre>\n<code class=\"language-apache\">&lt;VirtualHost *:443&gt;\n	ServerName extranet.pdx.fi\n\n	ServerAdmin kan@statsit.com\n	DocumentRoot /var/www/html2\n\n	ErrorLog ${APACHE_LOG_DIR}/extranet.pdx.fi.error.log\n	CustomLog ${APACHE_LOG_DIR}/extranet.pdx.fi.access.log combined\n\n	SSLEngine on\n	SSLCertificateFile      /etc/letsencrypt/live/extranet.pdx.fi/fullchain.pem\n        SSLCertificateKeyFile /etc/letsencrypt/live/extranet.pdx.fi/privkey.pem\n\n	&lt;FilesMatch \".(cgi|shtml|phtml|php)$\"&gt;\n          SSLOptions +StdEnvVars\n        &lt;/FilesMatch&gt;\n        &lt;Directory /usr/lib/cgi-bin&gt;\n          SSLOptions +StdEnvVars\n        &lt;/Directory&gt;\n\n	&lt;Directory /var/www/html2&gt;\n                Options -Indexes\n                AllowOverride All\n                Order allow,deny\n                allow from all\n	&lt;/Directory&gt;\n&lt;/VirtualHost&gt;\n</code></pre>','2017-09-25 11:12:29',1),(335,'API','Twitter','Extended Tweet','<p>Sometimes when a tweet is long enough that its retweet&#39;s size will above 140 characters, so the retweet text returned via REST API will be truncated by Twitter natively. In order to get the full text, we can use following parameter:</p>\n\n<pre>\n<code>tweet_mode=extended</code></pre>\n\n<p>With this parameter attached to the REST API request, following changes of returned data are expected:</p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">full_text&nbsp;replaces&nbsp;text</span></li>\n	<li><span style=\"color:rgb(178, 34, 34)\">truncated&nbsp;field is&nbsp;false</span></li>\n	<li>display_text_range field delineates different sections of body for mentions/tweets/entities</li>\n</ul>\n\n<p>Data without this parameter:</p>\n\n<pre>\n<code class=\"language-php\">[text] =&gt; WÃ¤rtsilÃ¤ to enhance the reliability of #worldslargest offshore #windfarm. #renewableenergy #windenergy #renewables â€¦ https://t.co/2gHNuk36OI\n[truncated] =&gt; 1</code></pre>\n\n<p>Data with this parameter</p>\n\n<pre>\n<code class=\"language-php\">[full_text] =&gt; WÃ¤rtsilÃ¤ to enhance the reliability of #worldslargest offshore #windfarm. #renewableenergy #windenergy #renewables https://t.co/prf31AFnLV https://t.co/hZJqgXdsWd\n[truncated] =&gt; 0\n[display_text_range] =&gt; Array\n    (\n      [0] =&gt; 0\n      [1] =&gt; 138\n    )</code></pre>','2017-10-01 19:05:40',0),(336,'WordPress','Installation','Change WordPress Address And Site Address','<p>After the home url and site url are changed for your installation, you can directly modify the database to apply the new url</p>\n\n<pre>\n<code class=\"language-sql\">select * from wp_options where option_name in (\'siteurl\', \'home\');\n+-----------+-------------+-------------------------+----------+\n| option_id | option_name | option_value            | autoload |\n+-----------+-------------+-------------------------+----------+\n|         2 | home        | https://extranet.pdx.fi | yes      |\n|         1 | siteurl     | https://extranet.pdx.fi | yes      |\n+-----------+-------------+-------------------------+----------+\n2 rows in set (0.00 sec)\n\nupdate wp_options set option_value = \'https://extranet.pdx.fi/pohjolarakennus\' where option_name in (\'siteurl\', \'home\');\n\nselect * from wp_options where option_name in (\'siteurl\', \'home\');                                    +-----------+-------------+-----------------------------------------+----------+\n| option_id | option_name | option_value                            | autoload |\n+-----------+-------------+-----------------------------------------+----------+\n|         2 | home        | https://extranet.pdx.fi/pohjolarakennus | yes      |\n|         1 | siteurl     | https://extranet.pdx.fi/pohjolarakennus | yes      |\n+-----------+-------------+-----------------------------------------+----------+\n2 rows in set (0.00 sec)\n</code></pre>','2017-10-11 20:33:32',0),(337,'Linux','Ubuntu','Start A Service At Startup','<p>If you ever need to reboot your server, or create a new server from an image, you&#39;ll want to make sure that all of your critical processes come back online with your freshly booted server.&nbsp; With CentOS/RHEL this is fairly easy, you would just use chckconfig, for Ubuntu you can use a process called update-rc.d.</p>\n\n<p>First you&#39;ll want to see what services are avialable for startup.&nbsp; You can do this by running:</p>\n\n<pre>\n<code class=\"language-bash\">service --status-all</code></pre>\n\n<p>The services that have a [+] - (service name) will start on boot.&nbsp; The ones with [-] - (service name) will not start on boot.&nbsp;Adding a service to Ubuntu or Debian is done with the&nbsp;update-rc.d&nbsp;command. You can specify which runlevels to start and stop the new service or accept the defaults. The&nbsp;init.d&nbsp;file will be added to the relevant&nbsp;rc.d&nbsp;startup folders.</p>\n\n<pre>\n<code class=\"language-bash\">update-rc.d SERVICENAME defaults</code></pre>\n\n<p>To remove a service from start on boot:</p>\n\n<pre>\n<code class=\"language-bash\">update-rc.d -fÂ  SERVICENAME remove</code></pre>','2017-11-04 22:33:07',3),(338,'Marimekko','Magento','Encryption Key','<p><strong><span style=\"color:#B22222\">Local studying environment</span></strong></p>\n\n<p><strong>25b2a2b0e3720926dba8cffa5dd8e559</strong></p>','2017-11-05 23:45:11',1),(339,'Mercurial','Initiation And Commit','Basic Usage','<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Initiate a new repository</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">hg init</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Add or forget files</span></strong></p>\n\n<pre>\n<code># Add all untracked files\nhg add\n# Forgetting all uncommitted changes\nhg revert</code></pre>\n\n<p><strong><span style=\"color:#B22222\">3. Check status of repository</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">hg status</code></pre>\n\n<p><strong><span style=\"color:#B22222\">4. Check URL of remote repository</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">hg paths</code></pre>\n\n<p><strong><span style=\"color:#B22222\">5. Add new file and commit changes</span></strong></p>\n\n<pre>\n<code class=\"language-bash\"># For newly created file, you need to add before committing\nhg add .hgignore\n\n# For changes against existing file, you can directly commit, dislike Git\nhg commit -m \'some message\'\n\n# Because hg has no concept of \'staged area\' like git, you need to specify the file to commit if you do not want to commit all changes from many files in a batch\nhg commit -m \'add hgignore\' .hgignore</code></pre>\n\n<p>&nbsp;</p>','2017-11-08 22:33:55',2),(340,'Mercurial','Modules','Hg Flow','<p><strong><span style=\"color:rgb(178, 34, 34)\">Configurate .hgrc of the current user to apply hg flow module globally</span></strong></p>\n\n<pre>\n<code class=\"language-ini\"># example user config (see &#39;hg help config&#39; for more info)\n[ui]\nusername = Kan Cong &lt;kan.cong@marimekko.com&gt;\n\n[extensions]\nflow = /Users/counterall/.hg_plugins/hgflow.py\nmq =\nrebase =\n\n[flow]\nautoshelve = yes</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">1. Apply hg flow to a repository</span></p>\n\n<pre>\n<code>hg flow init</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2. Open a new feature branch</span></p>\n\n<pre>\n<code class=\"language-bash\"># Create a new feature branch called &#39;test_theme&#39;\nhg flow feature start test_theme</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">3. Close currently active feature branch and merge it back to stable branch</span></p>\n\n<pre>\n<code class=\"language-bash\">hg flow feature finish</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">4. Close currently active branch without merging it back to stable</span></p>\n\n<pre>\n<code class=\"language-bash\">hg commit --close-branch -m &quot;close this branch&quot;</code></pre>','2018-10-17 12:30:32',7),(341,'Magento','MVC','Layout & Template (View)','<p>In Magento, layout and template are the actually components to assemble the view part of Magento&#39;s configuration-over-convention MVC framework.</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Layout is module-based</span></strong></p>\n\n<p>Each Magento module could have its own layout configuration in XML format saved under folder<span style=\"background-color:rgb(255, 236, 0)\"> /design/frontend/package_name/theme_name/layout/</span>.&nbsp;</p>\n\n<p>Each module&#39;s layout XML will be retrieved and combined as a master <span style=\"background-color:rgb(255, 236, 0)\">layout XML which is cached by Magento </span>to quickly apply to render the current page. Which also means you need to flush the cached content of Magento to make you layout update take effect.</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">2. Layout</span></strong></p>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2.1 Overview</span></p>\n\n<p>There are three types of layout in Magento:</p>\n\n<ul>\n	<li>Package layout, which is a XML that covers all layouts of the system with the chosen theme.</li>\n	<li>Page layout, which is a XML that covers only layouts of the current page requested by visitor</li>\n	<li>Handle layout, which lists the hierarchic handles used by the current page from beginning to the end.&nbsp;\n	<ul>\n		<li>Each handle seems like a name space of scope accessed by the current request.</li>\n		<li><span style=\"background-color:rgb(255, 236, 0)\">Each handle is used inside layout XML as the wrapper element of Block or Reference elements</span>, which means those nested blocks only works inside the scope defined by the handle.</li>\n		<li>If we visit a page like this:&nbsp;http://kandy.io/magento/helloworld/messages/greetings?showLayout=handles, you will have handles as below</li>\n	</ul>\n	</li>\n</ul>\n\n<pre>\n<code>default\nSTORE_default\nTHEME_frontend_rwd_default\nhelloworld_messages_greetings\ncustomer_logged_out</code></pre>\n\n<p>The basic pattern of a layout XML looks like below:</p>\n\n<pre>\n<code class=\"language-xml\">&lt;layout version=\"0.1.0\"&gt;\n    &lt;handle_name&gt;\n      &lt;block type=\'block_class_name\' name=\"block_name\" template=\"path/to/template/\" /&gt;\n      &lt;reference name=\'block_name\'&gt;&lt;/reference&gt;\n    &lt;/handle_name&gt;\n&lt;/layout&gt;</code></pre>\n\n<p>Layout XML&nbsp;consists of &quot;Block&quot;, &#39;Reference&#39; and &quot;Remove&quot; elements.</p>\n\n<ul>\n	<li>Block element specifies connection between a block php object and a template file</li>\n	<li>Reference element is a way to hook all XML of an existing block element to the place you want, and new blocks under the reference tag will be attached as new child blocks</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2.2 Block/Template pair</span></p>\n\n<p>Each block element specifiy:</p>\n\n<ul>\n	<li>a block PHP class (saved under <span style=\"background-color:rgb(255, 236, 0)\">/module_name/block </span>folder) which provides some logics&nbsp;used inside template file</li>\n	<li>the unique template file (in .phtml format which is&nbsp;actually general .php script with html mixed) used with the block class as its context, i.e. $this inside template file is the object of the block class.</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-xml\">&lt;layout version=\"0.1.0\"&gt;\n  &lt;!-- handle\'s name: helloworld_messages_greetings --&gt;\n  &lt;helloworld_messages_greetings&gt;\n    &lt;!-- block: \"register\" class of \"form\" block of module \"customer\" --&gt;\n    &lt;block type=\"customer/form_register\" output=\'toHtml\' name=\"customer_form_register\" template=\"customer/form/register.phtml\"/&gt;\n  &lt;/helloworld_messages_greetings&gt;\n&lt;/layout&gt;</code></pre>\n\n<ul>\n	<li>&#39;type&#39; tells Magento which block class to use, e.g. the block class is located in <span style=\"background-color:rgb(255, 236, 0)\">/app/code/core/customer/block/form/register.php</span>. The class name is &quot;<span style=\"background-color:rgb(255, 236, 0)\">Mage_Customer_Block_Form_Register</span>&quot;.</li>\n	<li>&#39;output&#39; attribute indicates that this block is supposed to output content to final view</li>\n	<li>&#39;name&#39; is an unique name given for this block, so for example, other block can reference this block via its name.</li>\n	<li>&#39;template&#39; shows the template file to use. For example &quot;<span style=\"background-color:rgb(255, 236, 0)\">app/design/frontend/package_name/theme_name/template/customer/form/register.phtml</span>&quot;</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2.3&nbsp;Reference tag</span></p>\n\n<p>If you need to use&nbsp;an existing block with customization, you can duplicate the block via &#39;reference&#39; element without the need to rewrite evething, e.g.</p>\n\n<pre>\n<code class=\"language-xml\">&lt;layout version=\"0.1.0\"&gt;\n    &lt;!-- layout of default handle --&gt;\n    &lt;default&gt;\n      &lt;block type=\"page/html\" name=\"root\" output=\"toHtml\" template=\"page/3columns.phtml\"&gt;\n    &lt;/default&gt;\n    &lt;!-- layout of helloworld_messages_greetings --&gt;\n    &lt;helloworld_messages_greetings&gt;\n        &lt;reference name=\'root\'&gt;\n          &lt;block type=\"page/new_type\" name=\'child_block_name\' template=\"path/to/template\"&gt;\n        &lt;/reference&gt;\n    &lt;/helloworld_messages_greetings&gt;  \n&lt;/layout&gt;</code></pre>\n\n<p>So layout of handle &quot;helloworld_messages_greetings&quot; is acutally:</p>\n\n<pre>\n<code class=\"language-xml\">&lt;helloworld_messages_greetings&gt;\n  &lt;block type=\"page/html\" name=\"root\" output=\"toHtml\" template=\"page/3columns.phtml\"&gt;\n    &lt;block type=\"page/new_type\" name=\'child_block_name\' template=\"path/to/template\"&gt;\n  &lt;/block&gt;\n&lt;/helloworld_messages_greetings&gt;  </code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2.4 Action tag</span></p>\n\n<p>Using the &lt;action /&gt; tag enables us to call public PHP methods of the block classes. For example you want&nbsp;to&nbsp;use a different template file for the same block</p>\n\n<pre>\n<code class=\"language-xml\">&lt;layout version=\"0.1.0\"&gt;\n    &lt;!-- layout of default handle --&gt;\n    &lt;default&gt;\n      &lt;block type=\"page/html\" name=\"root\" output=\"toHtml\" template=\"page/3columns.phtml\"&gt;\n    &lt;/default&gt;\n    &lt;!-- layout of helloworld_messages_greetings --&gt;\n    &lt;helloworld_messages_greetings&gt;\n        &lt;reference name=\'root\'&gt;\n          &lt;!-- set a different templat to use --&gt;\n          &lt;action method=\'setTemplate\'&gt;\n            &lt;!-- name of the tag does not matter --&gt;\n            &lt;new_template&gt;test/helloworld/simple_page.phtml&lt;/new_template&gt;\n          &lt;/action&gt;\n        &lt;/reference&gt;\n    &lt;/helloworld_messages_greetings&gt;  \n&lt;/layout&gt;\n</code></pre>\n\n<p>Which is equivalent to:</p>\n\n<pre>\n<code class=\"language-xml\">&lt;layout version=\"0.1.0\"&gt;\n    &lt;!-- layout of default handle --&gt;\n    &lt;default&gt;\n      &lt;block type=\"page/html\" name=\"root\" output=\"toHtml\" template=\"page/3columns.phtml\"&gt;\n    &lt;/default&gt;\n    &lt;!-- layout of helloworld_messages_greetings --&gt;\n    &lt;helloworld_messages_greetings&gt;\n      &lt;block type=\"page/html\" name=\"root\" output=\"toHtml\" template=\"test/helloworld/simple_page.phtml\"&gt;\n    &lt;/helloworld_messages_greetings&gt;  \n&lt;/layout&gt;\n</code></pre>\n\n<p>So when rendering page &quot;/helloworld/messages/greetings/&quot;, a different&nbsp;template file is used.</p>\n\n<p>You can also add JS and CSS scripts to the layout via action tag:</p>\n\n<pre>\n<code class=\"language-xml\">&lt;action method=\"addJs\"&gt;\n  &lt;script&gt;prototype/validation.js&lt;/script&gt;\n&lt;/action&gt;</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\">2.5 Update tag</span></p>\n\n<p>The &lt;update /&gt; tag allows you to include another Handle&#39;s tags. For example:</p>\n\n<pre>\n<code class=\"language-xml\">&lt;customer_account_index&gt;\n    &lt;!-- ... --&gt;\n    &lt;update handle=\"customer_account\"/&gt;\n    &lt;!-- ... --&gt;\n&lt;/customer_account_index&gt;</code></pre>\n\n<p>Which means layout of handle &quot;customer_account_index&quot; duplicatess the layout of handle &quot;customer_account&quot;.</p>','2017-11-08 11:48:39',3),(342,'Marimekko','Magento','Installation Tweaks','<p><strong><span style=\"color:rgb(178, 34, 34)\">Domain change</span></strong></p>\n\n<p>If you install Magento instance in a new server with old Magento Database dumped and restored to the new server, and if the domain name changes, you need to do some database update before being able to access to the installation properly.</p>\n\n<p>Do the following search:</p>\n\n<pre>\n<code class=\"language-sql\">SELECT DISTINCT path, value FROM `core_config_data` WHERE path like \"%web/%secure/%url%\";\n+-----------------------------+-----------------------------+\n| path                        | value                       |\n+-----------------------------+-----------------------------+\n| web/unsecure/base_url       | http://kan_magento.dev/     |\n| web/secure/base_url         | http://kan_magento.dev/     |\n| web/unsecure/base_link_url  | {{unsecure_base_url}}       |\n| web/unsecure/base_skin_url  | {{unsecure_base_url}}skin/  |\n| web/unsecure/base_media_url | {{unsecure_base_url}}media/ |\n| web/unsecure/base_js_url    | {{unsecure_base_url}}js/    |\n| web/secure/base_link_url    | {{secure_base_url}}         |\n| web/secure/base_skin_url    | {{secure_base_url}}skin/    |\n| web/secure/base_media_url   | {{secure_base_url}}media/   |\n| web/secure/base_js_url      | {{secure_base_url}}js/      |\n+-----------------------------+-----------------------------+</code></pre>\n\n<p>So every base url is based on &quot;secure_base_url&quot; and &quot;unsecure_base_url&quot;:</p>\n\n<ul>\n	<li>Locate&nbsp;table named &quot;core_config_data&quot; and look for all rows with &quot;path&quot; field like &quot;web/secure/base_url&quot; or &quot;web/unsecure/base_url&quot;.</li>\n	<li>Update value for these matching rows with your new domain url like &quot;http://domain_name/path/to/app/folder/&quot;. The ending &quot;/&quot; is important.</li>\n	<li>Empty everything under &quot;/magento_installation/var/cache/&quot; and &quot;/magento_installation/var/session/&quot;</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Theme Symlink</span></strong></p>\n\n<p>By default, due to security risks, Magento does not allow to use theme symblink, so the website might show you an empty page if you use an symlinked theme. You can update database to enable symlinked theme:</p>\n\n<ul>\n	<li>Locate table named &quot;core_config_data&quot; and search for row with &#39;path&#39; column equals to &quot;dev/template/allow_symlink&quot;</li>\n	<li>If the row exists, make sure its value is &#39;1&#39;</li>\n	<li>If no matched row found, then create manually</li>\n</ul>\n\n<pre>\n<code class=\"language-sql\">-- Row exists\nUPDATE core_config_data SET value = \'1\' WHERE path = \'dev/template/allow_symlink\';\n\n-- Row does not exist\nINSERT INTO core_config_data (config_id, scope, scope_id, path, value) VALUES (NULL , \'default\', \'0\', \'dev/template/allow_symlink\', \'1\');</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Database configuration in marimekko-dev/htdocs/app/etc/loca.xml</span></strong></p>\n\n<p>If the error report shows you have problem accessing the database, so most probably it is due to the connection mis-configuration.</p>\n\n<pre>\n<code class=\"language-xml\">&lt;connection&gt;\n    &lt;host&gt;&lt;![CDATA[localhost]]&gt;&lt;/host&gt;\n    &lt;username&gt;&lt;![CDATA[root]]&gt;&lt;/username&gt;\n    &lt;password&gt;&lt;![CDATA[mj23kb8i3]]&gt;&lt;/password&gt;\n    &lt;dbname&gt;&lt;![CDATA[marimekko-dev]]&gt;&lt;/dbname&gt;\n    &lt;initStatements&gt;&lt;![CDATA[SET NAMES utf8]]&gt;&lt;/initStatements&gt;\n    &lt;model&gt;&lt;![CDATA[mysql4]]&gt;&lt;/model&gt;\n    &lt;type&gt;&lt;![CDATA[pdo_mysql]]&gt;&lt;/type&gt;\n    &lt;pdoType/&gt;\n    &lt;active&gt;1&lt;/active&gt;\n&lt;/connection&gt;\n\n#Make sure no quotes inside CDATA brackets, e.g. it is wrong to put it like \"localhost\" but just localhost</code></pre>\n\n<p><strong><span style=\"color:#B22222\">Save session locally as files instead of being saved into db</span></strong></p>\n\n<p>open app/etc/local.xml</p>\n\n<pre>\n<code class=\"language-xml\">&lt;session_save&gt;&lt;![CDATA[files]]&gt;&lt;/session_save&gt;\n&lt;session_save_path&gt;&lt;![CDATA[/tmp/session]]&gt;&lt;/session_save_path&gt;</code></pre>\n\n<p>&nbsp;</p>','2018-05-02 12:42:57',11),(343,'Magento','MVC','How Back-end Works','<p>Let&#39;s use an example to show the work-flow that a&nbsp;category page of products is loaded at backend by Magento with the url like <span style=\"background-color:#7AFF91\">&quot;catalog/category/view/id/241&quot;</span></p>\n\n<ol>\n	<li>With the given URL, the &quot;category&quot; controller&nbsp;Mage_Catalog_CategoryController of core module &quot;Catalog&quot; will be instantiated. The path of src file is /core/Mage/Catalog/category/controllers/CategoryController.php</li>\n	<li>Then &quot;view&quot; function viewAction() will be called with &quot;id=241&quot; as the passed parameter, which means category id is 241.</li>\n	<li>Check if the given category with ID 241 exists or not. If not, return &quot;Not Found&quot; page with http code 404</li>\n	<li>&nbsp;</li>\n</ol>','2017-11-13 14:11:05',0),(344,'Magento','Module','Create A New Module','<p><strong><span style=\"color:#B22222\">Three steps need to be followed:</span></strong></p>\n\n<p>1. Create a new module under /app/core/local/package_name/module_name/ with the following sub-directories:</p>\n\n<ul>\n	<li>Block: block classes</li>\n	<li>Helper: helper classes</li>\n	<li>etc: configuration xml of the module</li>\n	<li>controllers: controller classes</li>\n	<li>model: model classes</li>\n	<li>sql</li>\n</ul>\n\n<p>2. Add configuration for this new module for example as follows</p>\n\n<pre>\n<code class=\"language-xml\">&lt;config&gt;    \n    \n    &lt;modules&gt;\n        &lt;Test_Weblog&gt;\n            &lt;version&gt;0.1.0&lt;/version&gt;\n        &lt;/Test_Weblog&gt;\n    &lt;/modules&gt;\n\n    &lt;frontend&gt;\n        &lt;!-- Router --&gt;\n        &lt;routers&gt;\n            &lt;weblog&gt;\n                &lt;use&gt;standard&lt;/use&gt;\n                &lt;args&gt;\n                    &lt;module&gt;Test_Weblog&lt;/module&gt;\n                    &lt;frontName&gt;weblog&lt;/frontName&gt;\n                &lt;/args&gt;\n            &lt;/weblog&gt;\n        &lt;/routers&gt;  \n    &lt;/frontend&gt;\n\n&lt;/config&gt;</code></pre>\n\n<p>3. Add configuration file to /app/etc/modules/Test_Weblog.xml to let Magento know the existence of this Test_Weblog module. For instance:</p>\n\n<pre>\n<code class=\"language-xml\">&lt;config&gt;\n    &lt;modules&gt;\n        &lt;Test_Weblog&gt;\n            &lt;active&gt;true&lt;/active&gt;\n            &lt;codePool&gt;local&lt;/codePool&gt;\n        &lt;/Test_Weblog&gt;\n    &lt;/modules&gt;\n&lt;/config&gt;\n</code></pre>\n\n<p>If configured correctly, this module will be visible in the available module list&nbsp;under &quot;ADVANCED/Advanced&quot; menu on Magento admin panel</p>','2017-11-13 14:35:30',1),(345,'Magento','MVC','How To Create Model To Talk With DB','<p>How Model component of MVC works in Magento is quite different from the Model of CodeIgniter. The Model component is not a single class file covering all database CRUD operations.</p>\n\n<p>The hierachy of Magento&#39;s Model is as follows:</p>\n\n<ul>\n	<li><span style=\"color:rgb(178, 34, 34)\">Model&nbsp;class</span>: a class file under /package_name/module_name/Model/model_name.php, which will instantiate model resource class inside to talk with database.\n\n	<ul>\n		<li><span style=\"color:rgb(178, 34, 34)\">Model resource class</span>: a class file under /package_name/model_name/Model/Resource/resource_name.php, which implements the db operation for a single model\n\n		<ul>\n			<li><span style=\"color:rgb(178, 34, 34)\">Model resource collection class</span>: a class file under&nbsp; /package_name/model_name/Model/Resource/Collection/resource_collection_name.php, which implements the db operation for a collection of models.</li>\n		</ul>\n		</li>\n	</ul>\n	</li>\n</ul>\n\n<p>How this hierachy actually works:</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">1. Configure model in the module&#39;s own config.xml, for example:</span></strong></p>\n\n<pre>\n<code class=\"language-xml\">&lt;config&gt;\n    &lt;!-- ... ---&gt;\n    &lt;!-- Seems really important to make it inside global tag to override default setting--&gt;\n    &lt;!-- if not, Mage_Weblog_Model will be used as prefix to search related model --&gt;\n    &lt;global&gt;\n        &lt;models&gt;\n            &lt;weblog&gt;\n                &lt;class&gt;Test_Weblog_Model&lt;/class&gt;\n                &lt;!--\n                need to create our own resource, can\'t just\n                use core_resource\n                --&gt;\n                &lt;!-- name of the resource model tag --&gt;\n                &lt;resourceModel&gt;weblog_resource&lt;/resourceModel&gt;\n            &lt;/weblog&gt;\n            \n            &lt;!-- define resource model --&gt;\n            &lt;weblog_resource&gt;\n                &lt;class&gt;Test_Weblog_Model_Resource&lt;/class&gt;\n                &lt;!-- Configure resource entities, i.e. database tables --&gt;\n                &lt;entities&gt;\n                    &lt;blogpost&gt;\n                        &lt;!-- When Test_Weblog_Model_Resource_Blogpost is instantiated, db table \"blog_posts\" is retrieved --&gt;\n                        &lt;table&gt;blog_posts&lt;/table&gt;\n                    &lt;/blogpost&gt;\n                &lt;/entities&gt;\n            &lt;/weblog_resource&gt;\n\n        &lt;/models&gt;\n    &lt;/global&gt;\n\n    &lt;!-- ... ---&gt;    \n&lt;/config&gt;</code></pre>\n\n<ul>\n	<li>&quot;models/weblog/class&quot; tag defines the prefix of all model related classes used by this module &quot;Test_Weblog&quot;.</li>\n	<li>&quot;models/weblog/resourceModel&quot; tag&nbsp;defines the name of tag which defines the detail of the resource models used by the module &#39;Test_Weblog&#39;.</li>\n	<li>&quot;models/weblog_resource/&quot; tag covers all resource models related configuration</li>\n	<li>&quot;models/weblog_resource/class&quot; tag defines the prefix used by all resource models related classes</li>\n	<li>&quot;models/weblog_resource/entities&quot; tag defines the database table name used by resource models respectively</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. Create Model class and Resource Model class files</strong></span></p>\n\n<p>Create class file <span style=\"background-color:rgb(255, 236, 0)\">&quot;/Test/Weblog/Model/Blogpost.php&quot;</span> for model &quot;Blogpost&quot; like this:</p>\n\n<pre>\n<code class=\"language-php\">class Test_Weblog_Model_Blogpost extends Mage_Core_Model_Abstract\n{\n    protected function _construct()\n    {\n        $this-&gt;_init(\'weblog/blogpost\');\n    }   \n}</code></pre>\n\n<p>Create class file <span style=\"background-color:rgb(255, 236, 0)\">&quot;/Test/Weblog/Model/Resource/Blogpost.php&quot;</span>&nbsp;for resource model &quot;Blogpost&quot; like this:</p>\n\n<pre>\n<code class=\"language-php\">class Test_Weblog_Model_Resource_Blogpost extends Mage_Core_Model_Resource_Db_Abstract{\n  protected function _construct()\n  {\n      // arg1 is model name space, arg2 is the unique ID on the related table\n      $this-&gt;_init(\'weblog/blogpost\', \'blogpost_id\');\n  }\n}</code></pre>\n\n<p>You can see the naming convention used in these class files and the parent class they inherit.</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">3. How Model is triggered</span></strong></p>\n\n<p>Let us check the controller class which initiate the whole process:</p>\n\n<pre>\n<code class=\"language-php\">class Test_Weblog_IndexController extends Mage_Core_Controller_Front_Action {\n    public function testModelAction() { \n      $params = $this-&gt;getRequest()-&gt;getParams();\n      // an object of Model class Test_Weblog_Model_Blogpost\n      $blogpost = Mage::getModel(\'weblog/blogpost\');\n      echo(\"Loading the blogpost with an ID of \".$params[\'id\']);\n      $blogpost-&gt;load($params[\'id\']);\n      $data = $blogpost-&gt;getData();    \n    }\n}</code></pre>\n\n<ul>\n	<li>Mage::getModel() will instantiate class &quot;Test_Weblog_Model_Blogpost&quot; and assign it to $blogpost\n	<ul>\n		<li>First it will instantiate class &quot;Mage_Core_Model_Config&quot; which deals with all configuration related data</li>\n		<li>And run <span style=\"background-color:rgb(255, 236, 0)\">$config-&gt;getModelInstance(&#39;weblog/blogpost&#39;)</span> to interprete the model class name and instantiate it</li>\n		<li>Finally return the model object back to $blogpost variable</li>\n	</ul>\n	</li>\n	<li>When $blogpost-&gt;load() is executed, it will load the resource model and do the database talk and assign the result as a property of the $blogpost object:\n	<ul>\n		<li>First it runs $blogpost-&gt;_getResource() which will then call Mage::getResourceSingleton(&quot;weblog/blogpost&quot;) which run <span style=\"background-color:rgb(255, 236, 0)\">$config-&gt;getResourceModelInstance(&#39;weblog/blogpost&#39;)</span> to interprete the resource model class name and instantiate the resource model class.</li>\n		<li>Then runs $resourceModel-&gt;load() to actually get data from DB. And save data key-value&nbsp;array to $blogpost-&gt;_data property</li>\n	</ul>\n	</li>\n	<li>Finally run $blogpost-&gt;getData() to retreive the data and assign to $data variable</li>\n</ul>\n\n<p>&nbsp;</p>','2017-12-26 12:25:17',0),(346,'CSS','Position','Text-align With \"float\" Or \"inline-block\"','<p>Inside a wrapper element with text-align attribute given</p>\n\n<ul>\n	<li>if a child element is floated, its content will be excluded from the parent context where text-align is applied</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">text-align: left</span></strong></p>\n\n<p><img alt=\"\" src=\"../../../assets/img/text-align-left-float.png\" style=\"height:103px; margin-bottom:5px; width:303px\" /></p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">text-align: center</span></strong></p>\n\n<p><img alt=\"\" src=\"../../../assets/img/text-align-center-float.png\" style=\"height:104px; margin-bottom:5px; width:303px\" /></p>\n\n<ul>\n	<li>if a child element is displayed with as &#39;inline-block&#39;, its content will be part of the parent context where text-align is applied.</li>\n</ul>\n\n<p><strong><span style=\"color:#B22222\">text-align: left</span></strong></p>\n\n<p><img alt=\"\" src=\"../../../assets/img/text-align-left-inline-block.png\" /></p>\n\n<p><strong><span style=\"color:#B22222\">text-align: center</span></strong></p>\n\n<p><img alt=\"\" src=\"../../../assets/img/text-align-center-inline-block.png\" style=\"height:103px; width:303px\" /></p>\n\n<pre>\n<code class=\"language-html\">&lt;div class=&#39;wrapper&#39;&gt;\n  &lt;div class=&#39;a&#39;&gt;inline-block&lt;/div&gt;\n  &lt;div class=&#39;c&#39;&gt;center&lt;/div&gt;\n  &lt;div class=&#39;b&#39;&gt;inline-block&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;style&gt;\n\n \n  .wrapper{\n    width: 300px;\n    height: 100px;\n    background: lightgray;\n    font-size: 0;\n    text-align: center;\n  }\n\n  .wrapper &gt; div{\n    height: 100%;\n    color: red;\n    font-size: 14px;\n    position: relative;\n  }\n  \n  .wrapper &gt; div &gt; div{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  .a{\n    background: lightblue;\n/*     float: left; */\n    width: 60px;\n  }\n\n  .b{\n    background: lightgreen;\n/*     float: right; */\n    width: 140px;\n  }\n\n  .a,.b{\n    display: inline-block;\n  }\n\n  .c{\n    display: inline-block;\n    background: lightyellow;\n    min-width: 40px;\n  }\n\n\n&lt;/style&gt;</code></pre>\n\n<p>&nbsp;</p>','2018-01-18 18:58:35',0),(347,'PHP','Class & Object','Access Level Of Redeclaration','<p><strong><span style=\"color:rgb(178, 34, 34)\">When redeclaring a parent method or property (excluding private ones of parent), the access level of the redeclaration must be the same or weaker, i.e.:</span></strong></p>\n\n<ul>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">Parent: Public -&gt; Child: Public</span></strong></li>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">Parent: Protected -&gt; Child : Protected or Public</span></strong>&nbsp;</li>\n</ul>\n\n<pre>\n<code class=\"language-php\">class p {\n    \n    protected $proV = &quot;protected parent&quot;;\n    \n    public function show(){\n        $this-&gt;pro();\n    }\n    \n    protected function pro(){\n       echo $this-&gt;proV;\n    }\n}\n\nclass c extends p{\n    \n    protected $proV = &quot;protected child&quot;; // private $prov will leads to error\n    public function pro(){ // private pro() will leads to error\n        echo $this-&gt;proV;\n    }\n}\n\n\n$a = new c();\n\n$a-&gt;show();</code></pre>','2018-02-02 11:22:36',1),(348,'PHP','Misc','Xdebug Installation','<p>Following steps below to install xdebug module.</p>\n\n<p><span style=\"background-color:white\"><strong><span style=\"color:rgb(178, 34, 34)\">Linux (Ubuntu)</span></strong></span></p>\n\n<p>First install the php-xdebug module via apt tool</p>\n\n<pre>\n<code class=\"language-bash\">sudo apt install php-xdebug\n\n# check if xdebug module successfully installed to registered to PHP\nphp -m</code></pre>\n\n<p>Then open your php.ini configuration file, you can output phpinfo() to find the location, for example&nbsp; &quot;<span style=\"background-color:rgb(255, 236, 0)\">/etc/php/7.0/apache2/php.ini</span>&quot;. Add the following line to the end of the file:</p>\n\n<pre>\n<code class=\"language-ini\">[xdebug]\nzend_extension=\"/usr/lib/php/20151012/xdebug.so\"</code></pre>\n\n<p>Then add following lines to the xdebug.ini configuration file &quot;<span style=\"background-color:rgb(255, 236, 0)\">/etc/php/7.0/mods-available/xdebug.ini</span>&quot;</p>\n\n<pre>\n<code class=\"language-ini\">xdebug.remote_enable=1\nxdebug.remote_log=\"/var/log/xdebug.log\"\nxdebug.remote_host=127.0.0.1\nxdebug.remote_handler=dbgp\nxdebug.remote_port=9000\nxdebug.show_error_trace=1</code></pre>\n\n<p>Finally restart Apache server to make Xdebug ready to use with</p>\n\n<pre>\n<code class=\"language-bash\">sudo service apache2 restart</code></pre>\n\n<p>Recheck phpinfo() to verify if Xdebug module is identified by PHP or not.&nbsp;</p>','2018-02-07 21:46:12',12),(349,'MySql','Configuration','Remote Access','<p>Go through two points to enable remote mysql database access</p>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">1. mysql.conf</span></strong></p>\n\n<p>For instance in ubuntu 16.04LTS, open&nbsp;/etc/mysql/mysql.conf.d/mysqld.cnf</p>\n\n<pre>\n<code class=\"language-apache\"># Instead of skip-networking the default is now to listen only on\n# localhost which is more compatible and is not less secure.\nbind-address          = 127.0.0.1</code></pre>\n\n<p>comment this bind-address line to enable access from remote.</p>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>2. Create mysql user</strong></span></p>\n\n<pre>\n<code class=\"language-sql\">CREATE USER \'root\'@\'%\' IDENTIFIED BY \'password\';\nGRANT ALL ON *.* TO \'root\'@\'%\';\nFLUSH PRIVILEGES;</code></pre>','2018-02-25 20:05:03',1),(350,'Vue.js','JQuery Plugin','Selelct2','<p><strong><span style=\"color:#B22222\">select2 plugin works like this:</span></strong></p>\n\n<ul>\n	<li>Hide original &lt;select&gt; element which apply select2</li>\n	<li>Create a new set of UI elements to simulate the select dropdown with more features enabled</li>\n	<li>When different option is chosen inside rendered element, <span style=\"background-color:#FFEC00\">select2 will update the original &lt;select&gt; element, but of course, it acheives so via jQuery syntax like</span></li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">$(\'#select\').val(\'val\');</code></pre>\n\n<p><strong><span style=\"color:#B22222\">However this jQuery manipulated value change won&#39;t be identified by&nbsp;Vue app.</span></strong></p>\n\n<pre>\n<code class=\"language-html\">&lt;div id=\'test\'&gt;\n  &lt;select name=\"\" id=\"sel\" @change=\'doSmth\' v-model=\'sltval\'&gt;\n    &lt;option value=\"\"&gt;Null&lt;/option&gt;\n    &lt;option value=\"1\"&gt;One&lt;/option&gt;\n    &lt;option value=\"2\"&gt;Two&lt;/option&gt;\n    &lt;option value=\"3\"&gt;Three&lt;/option&gt;\n  &lt;/select&gt;\n&lt;/div&gt; \n\n&lt;script&gt;\n    var app = new Vue({\n      el: \"#test\",\n      data: {\n        sltval: \"\"\n      },\n      methods: {\n        doSmth: function(){\n          console.log(\"Vue is catching something!\");\n        }\n      }\n    });\n    $(\'#btn\').click(function(){\n      $(\'#sel\').val(\"3\").trigger(\'change\');\n    });\n    /*Triggering jQuery change event won\'t trigger doSmth() of Vue instance */\n&lt;/script&gt;</code></pre>\n\n<p>Therefore the solution is to make the select element itself a Vue component and trigger the change event inside the component.</p>\n\n<pre>\n<code class=\"language-html\">&lt;div id=\'app\'&gt;\n    &lt;mari-select2 v-model=\"cityChosen\" :options=\"cityList\" @change=\"switchList\"&gt;&lt;/mari-select2&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    Vue.component(\'mari-select2\', {\n        props: [\'options\', \'value\'],\n        template: \'&lt;select&gt;\n        &lt;slot&gt;&lt;/slot&gt;\n        &lt;/select&gt;\',\n        mounted: function () {\n            var vm = this\n            $(this.$el)\n                // init select2\n                .select2({\n                    data: this.options,\n                    placeholder: \'Valitse kaupunki\',\n                    width: \"element\",\n                    theme: \"marimekko\"\n                })\n                // emit event on change, actually used to pass new select value to cityChosen defined in v-model=\'cityChosen\'\n                .on(\'change\', function () {\n                    vm.$emit(\'input\', this.value);\n                    vm.$emit(\'change\', this.value);\n                })\n        },\n        watch: {\n            value: function (value) {\n                // update value\n                $(this.$el).val(value)\n            },\n            options: function (options) {\n                // update options\n                $(this.$el).empty().select2({\n                    data: options,\n                    placeholder: \'Valitse kaupunki\',\n                    width: \"element\",\n                    theme: \"marimekko\"\n                })\n            }\n        },\n        destroyed: function () {\n            $(this.$el).off().select2(\'destroy\')\n        }\n    });\n\n    var inventoryApp = new Vue({\n        el: \"#app\",\n        data: {\n            cityList: false,\n            cityChosen: \"\",\n        },\n        methods: {\n            switchList: function(city) {\n              this.cityData = this.countryData[city] ? this.countryData[city] : false;\n            }\n        }\n\n&lt;/script&gt;</code></pre>\n\n<p>&nbsp;</p>','2018-03-06 15:36:04',4),(351,'Vue.js','Input Bindings','Basics','<p><span style=\"color:#B22222\"><strong>In vue, we can do input bindings like this.</strong></span></p>\n\n<pre>\n<code class=\"language-html\">&lt;div id=\'app\'&gt;\n  &lt;input type=\"text\" v-model=\'message\'&gt;\n  &lt;h1&gt;{{message}}&lt;/h1&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\nvar app = new Vue({\n  el: \"#app\",\n  data: {\n    message: \"hello\"\n  }\n})\n&lt;/script&gt;</code></pre>\n\n<ul>\n	<li>&#39;message&#39; and real-time input value are binded together.</li>\n</ul>\n\n<pre>\n<code class=\"language-html\">&lt;input type=\"text\" v-model=\'message\'&gt;\n&lt;!-- is the syntax sugar of --&gt;\n&lt;input\n  v-bind:value=\"something\"\n  v-on:input=\"something = $event.target.value\"&gt;</code></pre>\n\n<p>More detail you can check <a href=\"https://vuejs.org/v2/guide/components.html#Form-Input-Components-using-Custom-Events\">doc</a></p>','2018-03-15 10:47:06',5),(352,'HTML','Misc','Site Loading Speed Optimization','<div>\n<p>All the tips are for&nbsp;<strong>mobile view only</strong>&nbsp;but not desktop as Google claimed &quot;Majority of internet traffic is from mobile now globally&quot;.</p>\n</div>\n\n<div>\n<p><strong>Recommended targets:</strong></p>\n</div>\n\n<div>\n<ul>\n	<li>Make &quot;speed&quot; a KPI&nbsp;</li>\n	<li>Page weight target is 1MB, currently our site is around 3MB fully-loaded</li>\n	<li>Do not use sliders ever (based on Google&#39;s research, over 90% click will happen on the first slide)</li>\n</ul>\n\n<p><strong>Image Optimization Tips:</strong></p>\n</div>\n\n<div>\n<ul>\n	<li>Usage of &quot;srcset&quot; tag&nbsp;to let browser choose image with suitable resolution based on the current screen size.</li>\n	<li>Image compress&nbsp;</li>\n	<li>Lazy-load images, basically means to use JavaScript to&nbsp;load images only as they enter (or are about to enter) the viewport or a scrollable area</li>\n</ul>\n\n<p><strong>CSS Optimization Tips:</strong></p>\n\n<ul>\n	<li>The concept of &ldquo;Critical CSS&rdquo; which basically means to first load minimum set of blocking CSS that we need to show the first screen of the page to the user. And load rest of the stylesheet after that, i.e. rendering the page progressively.</li>\n</ul>\n\n<p><strong>JavaScript Optimization Tips:</strong></p>\n\n<ul>\n	<li>If possible, put scripts to the footer part of the page instead of the head part to allow browser to parse the html page before loading the JavaScript files.</li>\n	<li>If possible, try to load the scripts asynchronized either in the mode of &ldquo;async&rdquo; or &ldquo;deferred&rdquo; based on our needs</li>\n</ul>\n\n<p>Tool to estimate the speed of our website and compare with other websites online:&nbsp;<a href=\"https://www.webpagetest.org/\">https://www.webpagetest.org/</a></p>\n</div>','2018-03-07 11:24:36',1),(353,'Magento','Configuration','Fetch Store Config','<p><strong><span style=\"color:rgb(178, 34, 34)\">You can use following static function of Mage class to fetch a specific store configuration value:</span></strong></p>\n\n<pre>\n<code class=\"language-php\">$val = Mage::getStoreConfig(\"storeinventory/settings/toggle\");</code></pre>\n\n<ul>\n	<li>&quot;storeinventory&quot; is the <span style=\"background-color:rgb(255, 236, 0)\">section</span> name</li>\n	<li>&quot;settings&quot; is the <span style=\"background-color:rgb(255, 236, 0)\">group</span> name</li>\n	<li>&quot;toggle&quot; is the <span style=\"background-color:rgb(255, 236, 0)\">field</span> name</li>\n</ul>\n\n<p>So the path is &quot;section/group/field&quot;.</p>\n\n<p><span style=\"color:#B22222\"><strong>The function can take 2nd parameter which indicates the id of an specific store.</strong></span></p>\n\n<pre>\n<code class=\"language-php\">$show = Mage::getStoreConfig($path, $storeId);</code></pre>\n\n<p>If the 2nd parameter is not given, the store which is currently being visited will be used.</p>','2018-03-14 08:46:21',5),(354,'JavaScript','Object Properties','\"This\" Context Inside An Object','','2018-03-27 06:30:24',1),(355,'Mercurial','Initiation And Commit','Merge Conflicts Via Vimdiff','<p>Put the lines below in&nbsp;.hg/hgrc&nbsp;file of a repository:</p>\n\n<pre>\n<code class=\"language-ini\">[ui]\nmerge = vimdiff\n\n[merge-tools]\nvimdiff.executable = vim\nvimdiff.args = -d $base $local $output $other +close +close</code></pre>\n\n<p>If there are conflicting changes to be resolved, mercurial will open&nbsp;vim&nbsp;in&nbsp;diff&nbsp;mode with two windows.</p>\n\n<ul>\n	<li>Left window will show contents of a local file.</li>\n	<li>Right window will show contents of a file being pulled.</li>\n	<li>CTL+W, CTL+W will switch left and right windows</li>\n</ul>\n\n<p>I usually work in the left window stepping through colored blocks which highlight the conflicts between the two files. When stepping through these blocks I use the two commands below:</p>\n\n<ul>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">:diffget: </span></strong>this command changes the block of code in local file to match corresponding block in pulled file.</li>\n	<li><strong><span style=\"color:rgb(178, 34, 34)\">:diffput</span></strong>: this command tells mercurial to use block of code in local file for the final version</li>\n</ul>\n\n<p>Each time you <span style=\"background-color:#FFEC00\">navigate the cursor below the colored block of code</span> and use one of the above commands, the conflict is resolved and coloring disappears. Repeat this until there are no more conflicts and then quit&nbsp;vim&nbsp;with<br />\n: xa<br />\nIf something goes terribly wrong during merge use<br />\n: cq<br />\nTo see a list of files to be resolved:<br />\nhg resolve -l</p>','2018-06-28 14:30:27',14),(356,'Magento','Module','Module Configuration','<p><strong><span style=\"color:rgb(178, 34, 34)\">It&rsquo;s worth repeating the two types of configuration files in play here. Files in</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">app/etc/modules/*.xml</code></pre>\n\n<p>are for&nbsp;declaring&nbsp;Magento modules. A file here tells Magento to look for a module.</p>\n\n<p>Files in</p>\n\n<pre>\n<code class=\"language-bash\">app/code/[code pool]/Packagename/Modulename/etc/config.xml</code></pre>\n\n<p>are the files that contain the actual configuration information for a module.</p>\n\n<p><span style=\"color:#B22222\"><strong>Main steps to load configuration of modules</strong></span></p>\n\n<pre>\n<code class=\"language-php\">protected function _initModules(){\n  if (!$this-&gt;_config-&gt;loadModulesCache()) {\n    $this-&gt;_config-&gt;loadModules();\n    if ($this-&gt;_config-&gt;isLocalConfigLoaded() &amp;&amp; !$this-&gt;_shouldSkipProcessModulesUpdates()) {\n      Varien_Profiler::start(\'mage::app::init::apply_db_schema_updates\');\n      Mage_Core_Model_Resource_Setup::applyAllUpdates();\n      Varien_Profiler::stop(\'mage::app::init::apply_db_schema_updates\');\n    }\n    $this-&gt;_config-&gt;loadDb();\n    $this-&gt;_config-&gt;saveCache();\n  }\n  return $this;\n}</code></pre>\n\n<p>The process is triggered by $this-&gt;_config_loadModules() above in <span style=\"background-color:#FFEC00\">/app/code/core/Mage/Core/Model/App.php</span>.</p>\n\n<ol>\n	<li>All modules declared under /app/etc/modules/*.xml will be collected</li>\n	<li>Based on the dependencies of each module, all modules will be reordered based on the rule &quot;Within the scope of all valid modules, if a module is a dependency of more modules, it will rank higher (index 0 is the highest, usually it is module Mage_Core) in the final ordered module array&quot;</li>\n	<li>Then all module-specific config.xml&nbsp;will be loaded one by one and extend the global configuration XML object $this-&gt;_config-&gt;_xml ($this is instance of Mage_Core_Model_App class)&nbsp;with each of them respectively</li>\n	<li>Load&nbsp;/app/etc/modules/local.xml (where database connection is defined) to prevent any module&#39;s configuration from wrongly overridding&nbsp;the configuration inside this file.</li>\n</ol>','2018-03-22 13:54:06',3),(357,'PHP','Class & Object','Pass Or Assign An Object','<pre>\n<code class=\"language-php\">class A { \n    function __construct(){ \n        $this-&gt;v = 8; \n    } \n    function set($s){ \n        $this-&gt;v = $s; \n    } \n} \nfunction passObj($obj){ \n    $obj-&gt;v = 23; \n} \nfunction assignObj($obj){ \n    $obj = new A(); \n    echo $obj-&gt;v . \"&lt;br&gt;\"; \n    return $obj;\n} \n$b = new A(); \necho $b-&gt;v . \"&lt;br&gt;\"; \n$b-&gt;set(24); \necho $b-&gt;v . \"&lt;br&gt;\"; \npassObj($b); \necho $b-&gt;v . \"&lt;br&gt;\"; \n$obj2 = assignObj($b); \necho $b-&gt;v . \"&lt;br&gt;\"; \n$c = $b;\nvar_dump([$b, $c, $obj2]);//[23, 23, 8]</code></pre>\n\n<p>Two points about passing obj as parameters or assign it to another variable</p>\n\n<ul>\n	<li>Pointer of the PHP Obj(address in memory) is passed or assigned, which means a reference of the original Obj.</li>\n	<li>Any time &quot;new Class()&quot; happens, pointer is decoupled. For example the $obj2 above.</li>\n</ul>','2018-03-27 06:31:39',1),(358,'Marimekko','Magento','How Product Availability Is Shown On Product Page','<p><strong><span style=\"color:rgb(178, 34, 34)\">On product page which is not sold out fully, e.g. some sizes at least are still available.</span></strong></p>\n\n<p>Meta data of all sizes are saved inside element &quot;.product-data-mine&quot; as below:</p>\n\n<pre>\n<code class=\"language-html\">&lt;div class=\"product-data-mine\" \n     data-attributeids=\"[141]\" \n     data-messagemoreoptions=\"You must specify all product options before adding it to the cart\" \n     data-confproductid=\"27845\" \n     data-lookup=\"{}\"&gt;\n&lt;/div&gt;</code></pre>\n\n<ul>\n	<li><span style=\"background-color:rgb(255, 236, 0)\">attributeID</span>&nbsp;141 indicates the &quot;Size&quot; attribute of product in Magento.&nbsp;</li>\n	<li><span style=\"background-color:rgb(255, 236, 0)\">confproductid</span>&nbsp;is the product id of the parent product model, for example an iPhone 7 product line. And each parent product can have product variant like iPhone 7 64GB Rose Gold or iPhone 7 64GB Black which are two different products managed in Magento.</li>\n	<li><span style=\"background-color:rgb(255, 236, 0)\">lookup</span> is the meta data of each size, it will have format like this</li>\n</ul>\n\n<pre>\n<code class=\"language-javascript\">{\n  220: {\n    id: 34196,\n    parent_attribute_code: \"size\",\n    price_numeric: 110,\n    qty: 0,\n    size: \"34\",\n    stock_status: 0\n  }\n}</code></pre>\n\n<ul>\n	<li>220 is value of the attribute &quot;Size&quot; which has attribute ID 141 as mentioned above. Value 220 indicates size 34 in Magento.</li>\n	<li>&quot;id&quot; is the unique product id of each product variant saved in Magento, for example, for the same shoe model, &quot;size XS color red&quot;, &quot;size L color red&quot;, and &quot;size L color blue&quot; will have their&nbsp;unique product ID respectively. This id can be used, for example, to track which exact product(model, size, color) an user want to subscribe email notification when it is back to sell again.</li>\n	<li>&quot;qty&quot; indicates the number left for the current product variant.</li>\n</ul>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>How size buttons are rendered</strong></span></p>\n\n<p>The &quot;lookup&quot; data bind to element with class &quot;product-data-mine&quot; is used to decide how to render the size buttons. A size button element is similar to this as follows</p>\n\n<pre>\n<code class=\"language-html\">&lt;button \n  class=\"flat-button attribute-button-text 27845_jpi_attr_141\" \n  id=\"27845_jpi_option_141-223\" \n  type=\"button\" \n  data-productid=\"27845\" \n  data-attributeid=\"141\" \n  data-optionid=\"223\"&gt;\n  40\n&lt;/button&gt;</code></pre>\n\n<ul>\n	<li>After document is ready, all buttons will be set as &quot;disabled&quot;&nbsp;first</li>\n	<li>Each size button is&nbsp;selected by its id which has the format <span style=\"background-color:rgb(122, 255, 145)\">parentProductID_jpi_option_attributeID-attributeValue</span></li>\n	<li>The &quot;data-optionid&quot; attribute is used to locate the product data inside the &quot;lookup&quot; object. If qty is 0, then leave the button as it is and remove the class &quot;attribute-selected&quot; if any, if not, remove the &quot;disabled&quot; attribute from the current button to make it valid again.</li>\n</ul>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">What happens when a size button is clicked</span></strong></p>\n\n<p>The size value is saved and updated in an hidden input field when a size button is clicked, it looks like this:</p>\n\n<pre>\n<code class=\"language-html\">&lt;input \n  id=\"27845_jpi_hidden_attr_141\" \n  name=\"super_attribute[141]\" \n  type=\"hidden\" \n  value=\"223\"\n&gt;</code></pre>\n\n<p>&quot;value&quot; 223 is the size attribute value for size attribute 141. 223 maps to real-world size 40.</p>\n\n<p>Once a size button is clicked:</p>\n\n<ul>\n	<li>The input value above will be updated.</li>\n	<li>&quot;attribute-selected&quot; class will be switched from the old one to the size button chosen currently.</li>\n	<li>Then all buttons will be disabled first and re-enabled based on stock level as explained in last section.</li>\n</ul>','2018-04-04 09:54:00',2),(359,'HTML','DOM','Window.event','<p>One can access the current event through&nbsp;<span style=\"color:#B22222\">window.event.</span> Just using&nbsp;<span style=\"color:#B22222\">event</span>&nbsp;is implicitly accessing&nbsp;<span style=\"color:#B22222\">window.event</span>. But window.event is not supported in Firefox.</p>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-html\">&lt;button onclick=\'clickme(event)\'&gt;Click me&lt;/button&gt;\n\n&lt;script&gt;\n function clickme(evt){\n   console.log(evt === event);// \"true\" in Chrome, but raise \'event is not defined\' error in FF\n }\n&lt;/script&gt;</code></pre>\n\n<p>&nbsp;</p>','2018-04-04 13:17:46',1),(360,'Linux','Miscs','PHP-FPM Executing Old Code After Symlink Deploy','<p>If you are deploying your PHP projects using a tool such as Deployer, Capistrano or Rocketeer, you might have noticed that your site seems &#39;stuck&#39; on the old version after a deploy.</p>\n\n<p>To understand why this happens, we need to take a look at the deployment strategy used by these tools. They work by managing a particular directory structure:</p>\n\n<ul>\n	<li>A releases directory with versioned subdirectories. This is where your source code lives.</li>\n	<li>A current directory, which is a symlink to the currently active version. This is where you point the docroot of the webserver to.</li>\n	<li>A shared directory which stores files unrelated to your source code (eg. uploaded images).</li>\n</ul>\n\n<pre>\n<code class=\"language-apache\">| var\n|-- www\n  |-- current -&gt; /var/www/releases/2\n  |-- releases\n  |  |-- 1\n  |  |-- 2\n  |-- shared</code></pre>\n\n<p>If you now want to deploy a new version of your site, you would upload it to a new directory:&nbsp;<span style=\"color:#B22222\"><strong>releases/3</strong></span>.</p>\n\n<pre>\n<code>| var\n|-- www\n  |-- current -&gt; /var/www/releases/2\n  |-- releases\n  |  |-- 1\n  |  |-- 2\n  |  |-- 3\n  |-- shared</code></pre>\n\n<p>After all code has been uploaded, the current symlink can be updated to point to the new version. The advantage of this strategy is that this switch happens instantly. You don&#39;t end up in a situation where only half your files have been updated to the new version while the deploy is running.</p>\n\n<pre>\n<code>| var\n|-- www\n  |-- current -&gt; /var/www/releases/3\n  |-- releases\n  |  |-- 1\n  |  |-- 2\n  |  |-- 3\n  |-- shared</code></pre>\n\n<p>At this point, you might notice your users are still being served from&nbsp;<span style=\"color:#B22222\"><strong>releases/2</strong></span>. Or, more specifically, static files are being served from&nbsp;<span style=\"color:#B22222\"><strong>releases/3</strong></span>, but PHP scripts are still being executed from&nbsp;<span style=\"color:#B22222\"><strong>releases/2</strong></span>.</p>\n\n<p><strong><span style=\"background-color:#FFEC00\">This happens because PHP-FPM caches the resolved symlink for a period of time.</span></strong> Luckily, this situation can be easily remedied by reloading the PHP-FPM service. The exact command depends on your operating system, but for those using systemd it would be:&nbsp;</p>\n\n<pre>\n<code class=\"language-bash\">sudo service php7.0-fpm restart</code></pre>','2018-04-05 12:04:31',1),(361,'Linux','Scripts','Add Alias Running Multiple Commands','<p><strong><span style=\"color:rgb(178, 34, 34)\">In bash</span></strong></p>\n\n<pre>\n<code class=\"language-bash\">alias multi-commd=\'cd /home/user; mkdir new-dir\'\n\nmulti-commd(){\n  cd /home/user\n  mkdir new-dir\n}</code></pre>\n\n<p><span style=\"color:rgb(178, 34, 34)\"><strong>If you use zsh, then a bit different</strong></span></p>\n\n<pre>\n<code class=\"language-bash\">function multi-commd(){\n  cd /home/user\n  mkdir new-dir\n}</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">To prevent double verification of &quot;rm *&quot; in zsh</span></strong></p>\n\n<pre>\n<code class=\"language-bash\"># Insert this to .zshrc\nsetopt rm_star_silent</code></pre>','2018-04-22 11:53:23',1),(362,'Magento','Product Model','Work With Product Data','<p>After you instantiate a new product instance of calss <strong><span style=\"color:#B22222\">Mage_Catalog_Model_Product </span></strong>as follows in your template</p>\n\n<pre>\n<code class=\"language-php\">//$this is an object of Mage_Catalog_Model_Product model class\n$_product = $this-&gt;getProduct();</code></pre>\n\n<p>Then you can easily fetch and update the product attribute.</p>\n\n<p><span style=\"color:#B22222\"><strong>1. Get specific attribute</strong></span></p>\n\n<pre>\n<code class=\"language-php\">$attr = $_product-&gt;getData($key);\n//or\n$attr = $_product-&gt;_data($key);</code></pre>\n\n<ul>\n	<li>getData() is a wrapper function to search $_product-&gt;_data array which saves attributes of an given product. This function is inherited from <strong><span style=\"color:#B22222\">Varien_Object class</span></strong> which is the super master class</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"color:#B22222\">2. Set specific attribute</span></strong></p>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"color:#B22222\">3. Main product related tables</span></strong></p>\n\n<ul>\n	<li>&#39;<span style=\"color:#B22222\">catalog_product_flat_{storeID}</span>&#39;: each row of this table saves all metadata of a given product in an given store identified with storeID</li>\n	<li><span style=\"color:#B22222\">&#39;catalog_category_product&#39;</span>: each row saves the mapping of an product ID to an category ID, so we can filter out all category IDs assigned to an product.</li>\n</ul>','2018-04-11 08:02:08',0),(363,'Marimekko','Magento','Product Helper','<p>Vaimo provides a product helper to ease the process of interacting with product data. The helper class is <strong><span style=\"color:rgb(178, 34, 34)\">Vaimo_Marimekko_Helper_Product</span></strong>.</p>\n\n<pre>\n<code class=\"language-php\">$_productHelper = Mage::helper(\'marimekko/product\');</code></pre>\n\n<p>Some handy use cases:</p>\n\n<p>1. Get category IDs of a product.</p>\n\n<pre>\n<code class=\"language-php\">// implode all category IDs as a string, $_product is an instance of Mage_Catalog_Model_Product class\n$idStr = $_productHelper-&gt;getCategoryIdsAsString($_product);\n\n//Under the hood, it actually does\n$idStr = implode(\",\", $product-&gt;getCategoryIds());</code></pre>\n\n<p>&nbsp;</p>','2018-04-11 08:20:14',1),(364,'Marimekko','Magento','Email Template','<h3><span style=\"color:rgb(178, 34, 34)\">Test locally</span></h3>\n\n<p>The master email templates are saved in database and can be found and edited interactively through <strong><span style=\"color:rgb(178, 34, 34)\">Admin -&gt; System -&gt; Transactionl Emails</span></strong> menu. The table saving all these templates is &quot;<strong><span style=\"color:rgb(178, 34, 34)\">core_email_template</span></strong>&quot;.</p>\n\n<p>In order to easily verify the changes to the template easily and locally, we can output the email content body to the local file which has all html and styles embedded already.</p>\n\n<p>The <strong><span style=\"color:rgb(178, 34, 34)\">send()</span></strong>&nbsp;function inside&nbsp;class <strong><span style=\"color:rgb(178, 34, 34)\">Mage_Core_Model_Email_Template (in Mage/Core but not in magento-enterprise module folder)</span></strong> is used to send email, and we can locate the raw email output and write it to a local html file to check the changes you make over the email templates.</p>\n\n<pre>\n<code class=\"language-php\">// final email body content is prepared here, $variables are used to implement the data-binding inside template file.\n$text = $this-&gt;getProcessedTemplate($variables, true);\n        \n// For testing purpose locally\nfile_put_contents(\"/Users/counterall/Desktop/fe-only/mari-fe-component/email-order-output.html\", $text); die();</code></pre>\n\n<p><span style=\"background-color:rgb(255, 236, 0)\">Remeber to skip the first if condition in the send() function</span> which will by default skip the email sending in local env.</p>\n\n<h3>&nbsp;</h3>\n\n<h3><span style=\"color:rgb(178, 34, 34)\">Configure email template</span></h3>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">Admin -&gt; System -&gt; Sales</span></strong> <strong><span style=\"color:rgb(178, 34, 34)\">Emails</span></strong> gives you the options to set email templates for different sections.</p>','2018-09-16 18:26:19',14),(365,'CSS','Email Template','Position Tweaks','<p>In some use cases, e.g. html template used for email purpose, lots of css properties(position, float, transform, flex, etc.) are not allowed in Gmail, Outlook and other main email clients or web apps. Check <a href=\"https://www.campaignmonitor.com/css/\">here</a> for detail.&nbsp;</p>\n\n<p><span style=\"color:#B22222\"><strong>1. How to place child element the bottom of parent element</strong></span></p>\n\n<pre>\n<code class=\"language-html\">&lt;div class=\'parent\'&gt;\n  &lt;div class=\'child\'&gt;Bottom&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;style&gt;\n .parent {\n   width: 100px;\n   height: 100px;\n   line-height: 100px;\n   border: 1px solid black;\n }\n\n .child{\n   line-height: initial;\n   display: inline-block;\n   border: 1px solid red;\n   vertical-align: bottom;\n }\n&lt;/style&gt;</code></pre>\n\n<p>How it works:</p>\n\n<ul>\n	<li>Parent element defines the line-height to be identical to its height, <span style=\"color:#B22222\">which means the entire height of the parent element is the line where the child will resides</span>. This is the key here, since &quot;vertical-align&quot; will align a child element itself vertically inside this <span style=\"background-color:#FFEC00\">&quot;line&quot;</span>.&nbsp; So if no same-as-height line-height is defined in parent, the child element will resides the line which is as high as its own height, thus the vertical-align won&#39;t take effect in this case.</li>\n	<li>Child element restores the original line-height of itself, and set &quot;vertical-align: bottom&quot; to make itself display at bottom of the line it resides, i.e. the parent element.</li>\n</ul>','2018-04-13 11:50:50',0),(366,'Marimekko','Magento','Decide Product Type On Product Page','<p>How to decide which type of a product we are visiting from the code perspective?</p>\n\n<p>We can find some clue from template &quot;theme_marimekko/app/design/frontend/carbon/marimekko/template/catalog/product/view/options/wrapper/bottom.phtml&quot; which is used to template the &quot;<strong><span style=\"color:#B22222\">product-options-bottom</span></strong>&quot; element on page.</p>\n\n<pre>\n<code class=\"language-php\">$productHelper = Mage::helper(\'marimekko/product\');\n$product = Mage::registry(\'current_product\');\n$productType = $productHelper-&gt;getProductSoldByType($product); \n$onesizeProduct = Mage::helper(\'marimekko\')-&gt;isOnesizeProduct($product);\n$qtySelectorHidden = !($productType || $onesizeProduct);</code></pre>\n\n<p>Three scenarios here:</p>\n\n<p><strong><span style=\"color:#B22222\">1. For normal sizable&nbsp;product like cloth</span></strong></p>\n\n<ul>\n	<li>$productType is null</li>\n	<li>$onesizeProduct is false</li>\n</ul>\n\n<p><strong><span style=\"color:#B22222\">2. For one-size product like home product, e.g. a cup</span></strong></p>\n\n<ul>\n	<li>$productType is null</li>\n	<li>$onesizeProduct is true</li>\n</ul>\n\n<p><strong><span style=\"color:#B22222\">3. For products sold in meters, for example, fabrics</span></strong></p>\n\n<ul>\n	<li>$productType is &quot;meters&quot;</li>\n	<li>$onesizeProduct is true</li>\n</ul>\n\n<p>So, eventually, <span style=\"background-color:#FFEC00\">$qtySelectorHidden is true only for sizable product</span> which can be bought 1 piece each time, so quantity selector is hidden.</p>','2018-04-17 12:24:51',1),(367,'Magento','Configuration','Get Store Meta Data','<p>Following snippets can be used to fetch meta data of the currently visited store</p>\n\n<pre>\n<code class=\"language-php\">// Gets the current store object of class Mage_Core_Model_Store\n$store = Mage::app()-&gt;getStore();\n// Gets the current store\'s id, e.g. 1, 2, 3, 4\n$storeId = $store-&gt;getStoreId();\n// Gets the current store\'s code, e.g. fi_fi, au_en\n$storeCode = $store-&gt;getCode();\n// Gets the current store\'s base url, e.g. https://www.marimekko.com/fi_fi\n$baseUrl = $store-&gt;getBaseUrl();</code></pre>','2018-04-19 09:32:07',2),(368,'JavaScript','Date','Date.UTC()','<p><span style=\"color:#B22222\">Date.UTC() returns the miliseconds between given date and mid night of Jan 1st, 1970 (i.e. 1970.01.01 00:00 UTC) according to UTC.</span></p>\n\n<p>Date.UTC(year, month, day, hour, min, sec, millisect)</p>\n\n<ul>\n	<li><span style=\"color:#B22222\">year</span>: four-digit year, e.g. 2013</li>\n	<li><span style=\"color:#B22222\">month</span>: 0-11, so 2 means March, -1 means last December, 12 means next Januray</li>\n	<li><strong><span style=\"color:#B22222\">day</span></strong>: 1-31, if number is larger than the biggest day of a given month, for example, for Januray, 32nd means 1st of Feb</li>\n	<li><span style=\"color:#B22222\">hour</span>: 0-23, so 22&nbsp;means 23pm. -1 means last hour of previous day. 24 means first hour of next day</li>\n	<li><span style=\"color:#B22222\">sec</span>: 0-59</li>\n	<li><span style=\"color:#B22222\">millisec</span>: 0-999</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-javascript\">Date.UTC(2018, 03, 23, 22, 0);\n//1524520800000 April 24th, 23:00, 2018, UTC time</code></pre>\n\n<p>We can create data object by using UTC time as follows</p>\n\n<pre>\n<code class=\"language-javascript\">//The local time zone is GMT+2 and GMT+3 with daylight saving time enabled\n\nnew Date(Date.UTC(2018, 01, 13, 22, 0));\n//Wed Feb 14 2018 00:00:00 GMT+0200 (EET)\n\nnew Date(Date.UTC(2018, 03, 23, 22, 0));\n// Tue Apr 24 2018 01:00:00 GMT+0300 (EEST)\n// Daylight saving time is used in April</code></pre>\n\n<p>&nbsp;</p>','2018-04-20 07:07:48',0),(369,'Magento','MVC','Override Default Class','<p>When you need to have new functions for an existing&nbsp;class, e.g. the classes defined in Core package, you should not modify the Core package directly but create you own package, extend the class you want to override and do the extending.</p>\n\n<p>For example, we have a Core class located in core package with path &quot;<span style=\"background-color:rgb(255, 236, 0)\">app/code/core/Mage/Sales/Block/Order/Email/Items/Order/Default.php</span>&quot;, and the class looks like&nbsp;</p>\n\n<pre>\n<code class=\"language-php\">class Mage_Sales_Block_Order_Email_Items_Order_Default extends Mage_Core_Block_Template</code></pre>\n\n<p>And system will know to locate <span style=\"color:rgb(178, 34, 34)\">Sales related block classes</span>&nbsp;based on the configuration&nbsp;defined in the config.xml located in &quot;/app/code/core/Mage/Sales/etc/config.xml&quot;</p>\n\n<pre>\n<code class=\"language-xml\">&lt;global&gt;\n  &lt;blocks&gt;\n    &lt;sales&gt;\n      &lt;class&gt;Mage_Sales_Block&lt;/class&gt;\n    &lt;/sales&gt;\n  &lt;/blocks&gt;\n&lt;/global&gt;\n</code></pre>\n\n<p>So system will scan related sales related block classes from &quot;core/Mage/Sales/Block/&quot;.</p>\n\n<p>Let us assume that we need to override the class &quot;Mage_Sales_Block_Order_Email_Items_Order_Default&quot; located in the core sales module &quot;<span style=\"background-color:rgb(255, 236, 0)\">app/code/core/Mage/Sales/Block/Order/Email/Items/Order/Default.php</span>&quot; in our own package &quot;<span style=\"background-color:rgb(255, 236, 0)\">app/code/local/Vaimo/Marimekko/Sales/Block/Order/Email/Items/Order/Default.php</span>&quot; with package name Vaimo_marimekko&nbsp;how we can tell system to use the one in our package instead of the Core one? The solution is to edit the configuration of our own package to achieve so.</p>\n\n<p>The configuration&nbsp;is located in &quot;app/code/local/Vaimo/Marimekko/etc/config.xml&quot;:</p>\n\n<pre>\n<code class=\"language-xml\">&lt;global&gt;\n  &lt;blocks&gt;\n    &lt;sales&gt;\n      &lt;rewrite&gt;\n        &lt;order_email_items_order_default&gt;Vaimo_Marimekko_Block_Sales_Order_Email_Items_Order_Default&lt;/order_email_items_order_default&gt;\n      &lt;/rewrite&gt;\n    &lt;/sales&gt;\n  &lt;/blocks&gt;\n&lt;/global&gt;\n</code></pre>\n\n<ul>\n	<li>The prefix-name of all block classes inside this Vaimo_marimekko module is &quot;Vaimo_Marimekko_Block&quot;</li>\n	<li>The prefix-name of all block classes inside our Sales module section is &quot;Vaimo_Marimekko_Block_Sales&quot;</li>\n	<li>The prefix-name of all block classes inside core Sales module is &quot;Mage_Sales_Block&quot;</li>\n	<li>The tag wrapping the overriding class is exactly the core class name without the core class prefix, which is &quot;order_email_items_order_default&quot;</li>\n	<li>Inside the tag, we give system the class name to override the default one.</li>\n</ul>\n\n<p>The new class will look like this:</p>\n\n<pre>\n<code class=\"language-php\">class Vaimo_Marimekko_Block_Sales_Order_Email_Items_Order_Default extends Mage_Sales_Block_Order_Email_Items_Order_Default {\n    \n    /**\n     * Return product badge if found any\n     */\n    public function getProductBadge(&amp;$catIDs) {}\n}</code></pre>','2018-08-10 12:41:11',2),(370,'CSS','Snippets','Make A Element A Button','<pre>\n<code class=\"language-css\">a.btn {\n  display: inline-block;\n  text-decoration: none;\n  cursor: pointer;\n  \n  &amp;:hover,\n  &amp;:focus {\n    text-decoration: none;\n    outline: none; //in case some browser like chrome by default gives a blue outline when a \"a\" element is focused or hovered\n    margin-bottom: 0;\n  }\n}</code></pre>\n\n<p>&nbsp;</p>','2018-04-25 13:11:33',0),(371,'PHP','Image Processing','Create A Base64 Image','<p>With the path of the original image given, we can create a base-64 encoded data to embed the image into the html document itself, so you do not need to worry that the url of original image will not work someday.</p>\n\n<pre>\n<code class=\"language-php\">&lt;?php \n$path = \"https://www.marimekko.com/media/catalog/product/cache/4/small_image/420x/040ec09b1e35df139433887a97daa66f/0/4/046343-068_10_1522560069.jpg\";\n$ext = pathinfo($path, PATHINFO_EXTENSION);\n$data = file_get_contents($path);\n$base64src = base64_encode($data);\n\n?&gt;\n\n&lt;img src=\"data:image/&lt;?php echo $ext ?&gt;;base64,&lt;?php echo $base64src; ?&gt;\"&gt;\n</code></pre>\n\n<p>&nbsp;</p>','2018-04-30 08:07:56',0),(372,'PHP','Image Processing','Integrate Image To Another','<p>For example, we want to insert one logo to an existing image</p>\n\n<pre>\n<code class=\"language-php\">&lt;?php\n\n// // Create image instances\n$src = imagecreatefrompng(\'https://www.marimekko.com/media/wysiwyg/PI_SM_Logo_RGB.png\');\n$dest = imagecreatefromjpeg(\"https://www.marimekko.com/media/catalog/product/cache/4/small_image/420x/040ec09b1e35df139433887a97daa66f/0/4/046343-068_10_1522560069.jpg\");\n\ndefine ( \'IMAGE_FLIP_HORIZONTAL\', 1 );\ndefine ( \'IMAGE_FLIP_VERTICAL\', 2 );\ndefine ( \'IMAGE_FLIP_BOTH\', 3 );\n\nfunction ImageFlips ( &amp;$imgsrc, &amp;$imgdest, $imgdestHeightOnHTML, $srcWrapperHeightOnHTML, $mode )\n{\n\n    $srcOrigW = imagesx ( $imgsrc );\n    $srcOrigH = imagesy ( $imgsrc );\n    $destOrigW = imagesx( $imgdest );\n    $destOrigH = imagesy( $imgdest );\n\n    $src_x = 0;\n    $src_y = 0;\n    $src_width = $srcOrigW;\n    $src_height = $srcOrigH;\n\n    switch ( (int) $mode )\n    {\n\n        case IMAGE_FLIP_HORIZONTAL:\n            $src_y      =    $srcOrigH;\n            $src_height =    -$srcOrigH;\n        break;\n\n        case IMAGE_FLIP_VERTICAL:\n            $src_x      =    $srcOrigW;\n            $src_width  =    -$srcOrigW;\n        break;\n\n        case IMAGE_FLIP_BOTH:\n            $src_x      =    $srcOrigW;\n            $src_y      =    $srcOrigH;\n            $src_width  =    -$srcOrigW;\n            $src_height =    -$srcOrigH;\n        break;\n\n    }\n\n    $times = $destOrigH / $imgdestHeightOnHTML;\n    $srcWrapperWidthOnHTML = $srcOrigW * $srcWrapperHeightOnHTML / $srcOrigH;\n    $srcWrapperHeight = $times * $srcWrapperHeightOnHTML;\n    $srcWrapperWidth = $times * $srcWrapperWidthOnHTML;\n\n    header(\'Content-Type: image/jpeg\');\n\n    imagecopyresampled ( $imgdest, $imgsrc, 0, 0, $src_x, $src_y, $srcWrapperWidth, $srcWrapperHeight, $src_width, $src_height );\n    imagejpeg($imgdest);\n\n    imagedestroy($imgdest);\n    imagedestroy($imgsrc);\n}\n\nImageFlips($src, $dest, 250, 35, 0);\n\n\n</code></pre>\n\n<p>&nbsp;</p>','2018-04-30 09:47:11',0),(373,'CSS','Snippets','Overflow Table Horizontally','<p>When screen width is much smaller than the content of a table, for example, in mobile, we can make table itself scrollable horizontally (overflow-x: scroll).</p>\n\n<p>Some key points here:</p>\n\n<ul>\n	<li><span style=\"background-color:rgb(255, 236, 0)\">overflow css property only works for block element</span></li>\n	<li>make the wrapper of the table to hide all overflow content</li>\n	<li>enable table to have overflow content</li>\n</ul>\n\n<pre>\n<code class=\"language-html\">&lt;div class=&#39;wrapper&#39;&gt;\n  &lt;table&gt;&lt;/table&gt;\n&lt;/div&gt;\n\n&lt;style&gt;\n  .wrapper{\n    overflow: hidden;\n  }\n\n  table{\n&nbsp;   #overflow only works for block element \n&nbsp;   display: block;\n    overflow-x: scroll;\n  }\n&lt;/style&gt;</code></pre>','2018-05-29 05:34:03',0),(374,'IOS','Safari','Make Overflow Element Scroll Smoothly','<blockquote>\n<p>Web pages on iOS by default have a &quot;momentum&quot; style scrolling where a flick of the finger sends the web page scrolling and it keeps going until eventually slowing down and stopping as if friction is slowing it down.</p>\n</blockquote>\n\n<p>For the element enabling &quot;overflow: scroll&quot; property, in order to make the scrolling on it smoothly in the momentum style, we can have following tweak to your stylesheet for mobile view</p>\n\n<pre>\n<code class=\"language-css\">.module {\n  width: 300px;\n  height: 200px;\n\n  overflow-y: scroll; /* has to be scroll, not auto */\n  -webkit-overflow-scrolling: touch;\n}</code></pre>','2018-06-04 12:02:51',0),(375,'HTML','Web Performance','Google Speed Hackathon Wrap-up','<p>All the tips are for&nbsp;<strong>mobile view only</strong>&nbsp;but not desktop as Google claimed &quot;Majority of internet traffic is from mobile now globally&quot;.</p>\n\n<p><strong>Recommended targets:</strong></p>\n\n<ul>\n	<li>Make &quot;speed&quot; a KPI&nbsp;</li>\n	<li>Page weight target is 1MB, currently our site is around 3MB fully-loaded</li>\n	<li>Do not use sliders ever (based on Google&#39;s research, over 90% click will happen on the first slide)</li>\n</ul>\n\n<p>The speed optimization covers three parts: image, stylesheet and JavaScript. Based on a simple test over our production site, seems the most important target to be optimized is image, some numbers got from Chrome can justify:</p>\n\n<ul>\n	<li>Front page including everything: 165 requests, 2.7MB transferred</li>\n	<li>Front page including only images: 92/165 requests, 1.8MB transferred</li>\n</ul>\n\n<p><strong>Image Optimization Tips:</strong></p>\n\n<ul>\n	<li>Usage of &quot;srcset&quot; tag&nbsp;to let browser choose image with suitable resolution based on the current screen size.</li>\n	<li>Image compress</li>\n	<li>Lazy-load images, basically means to use JavaScript to&nbsp;load images only as they enter (or are about to enter) the viewport or a scrollable area</li>\n</ul>\n\n<p><strong>CSS Optimization Tips:</strong></p>\n\n<ul>\n	<li>The concept of &ldquo;Critical CSS&rdquo; which basically means to first load minimum set of blocking CSS that we need to show the first screen of the page to the user. And load rest of the stylesheet after that, i.e. rendering the page progressively.</li>\n</ul>\n\n<p><strong>JavaScript Optimization Tips:</strong></p>\n\n<ul>\n	<li>If possible, put scripts to the footer part of the page instead of the head part to allow browser to parse the html page before loading the JavaScript files.</li>\n	<li>If possible, try to load the scripts asynchronized either in the mode of &ldquo;async&rdquo; or &ldquo;deferred&rdquo; based on our needs</li>\n</ul>\n\n<p>Tool to estimate the speed of our website and compare with other websites online:&nbsp;<a href=\"https://www.webpagetest.org/\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.webpagetest.org/</a></p>\n\n<p><strong>Some interesting test results against front-page of our Finnish site (especially the life-cycle of the front-page loading)</strong>&nbsp;via the tool above are attached in this email, the test is based on a simulated network with 1.6Mbps speed (3G fast) which is recommended by Google to give us more accurate loading speed results globally in reality.</p>','2018-06-04 12:09:54',0),(376,'Vue.js','Vue Component','Basics','<p>Besides native DOM elements like &lt;p&gt; or &lt;div&gt;, Vuejs can create its own element which is called a <strong><span style=\"color:#B22222\">Vue Component</span></strong>. For example:</p>\n\n<pre>\n<code class=\"language-html\">&lt;div&gt;\n  &lt;hello-vue&gt;&lt;/hello-vue&gt;\n&lt;/div&gt;</code></pre>\n\n<p>Because it is a non-existing element in default DOM, we need to set properties and methods for Vue Component explicitely to use it.</p>\n\n<pre>\n<code class=\"language-javascript\">Vue.component(\"hello-vue\", {\n  props:[\'message\'],\n  template: \"#hello-vue\",\n  updated: function(){\n  },\n  mounted: function () {\n  }\n});</code></pre>\n\n<ul>\n	<li><span style=\"color:#B22222\">props</span>, as its name implies, defines the properties of this component</li>\n	<li><span style=\"color:#B22222\">template</span> defines the html structure applied to this component, you can either define all needed html as the value of this &quot;template&quot; property, or separately define it inside a &lt;script&gt; tag which its ID defined as the value of &quot;template&quot; property, e.g.</li>\n</ul>\n\n<pre>\n<code class=\"language-html\">&lt;script type=\"text/x-template\" id=\"hello-vue\"&gt;\n  // so hello-vue.message will be rendered here\n  &lt;h1&gt;{{message}}&lt;/h1&gt;\n&lt;/script&gt;</code></pre>\n\n<ul>\n	<li><span style=\"color:#B22222\">updated</span> and <span style=\"color:#B22222\">mounted</span>&nbsp;properties define call-back functions to be run when this component is updated or mounted to DOM</li>\n</ul>','2018-06-11 08:42:34',3),(377,'Marimekko','Magento','Product Info','<p>SKU = Product ID - Color ID. For example:&nbsp;067999-100</p>','2018-06-11 12:27:56',0),(378,'Vue.js','Life Hooks','Updated','','2018-07-10 08:48:30',1),(379,'Vue.js','Component','Component Inheritance','<h3><strong><span style=\"color:#B22222\">1. Component filling in &lt;slot&gt; of another&nbsp;component is not technically the child component of that component wrapping it.&nbsp;</span></strong></h3>\n\n<ul>\n	<li>\n	<p>The filled component shares the same parent as the component having the &lt;slot&gt; defined</p>\n	</li>\n</ul>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-html\">&lt;!-- Component 1 --&gt;\n&lt;script type=\"text/x-template\" id=\"component-wrapper\"&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Hello {{name}}&lt;/h1&gt; \n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/script&gt;\n\n&lt;!-- Component 2 --&gt;\n&lt;script type=\"text/x-template\" id=\"component-insider\"&gt;\n  &lt;div&gt;\n    &lt;h1&gt;you are awesome {{name}}&lt;/h1&gt; \n  &lt;/div&gt;\n&lt;/script&gt;\n\n&lt;component-wrapper :name=\'parentName\'&gt;\n  &lt;component-insider :name=\'parentName\'&gt;&lt;/component-insider&gt;\n&lt;/component-wrapper&gt;\n</code></pre>\n\n<h3><strong><span style=\"color:#B22222\">2. Component directly added to the&nbsp;template of another component will be the child component of the wrapper element</span></strong></h3>\n\n<p>For example:</p>\n\n<pre>\n<code class=\"language-html\">&lt;!-- Component 1 --&gt;\n&lt;script type=\"text/x-template\" id=\"component-wrapper\"&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Hello {{name}}&lt;/h1&gt; \n    &lt;component-insider name=\'name\'&gt;&lt;/component-insider&gt;\n  &lt;/div&gt;\n&lt;/script&gt;\n\n&lt;!-- Component 2 --&gt;\n&lt;script type=\"text/x-template\" id=\"component-insider\"&gt;\n  &lt;div&gt;\n    &lt;h1&gt;you are awesome {{name}}&lt;/h1&gt; \n  &lt;/div&gt;\n&lt;/script&gt;\n\n&lt;component-wrapper :name=\'parentName\'&gt;\n&lt;/component-wrapper&gt;\n</code></pre>\n\n<p>&nbsp;</p>','2018-07-13 09:39:27',2),(380,'Vue.js','Vue Component','Reactivity Of Property','<h3><strong><span style=\"color:rgb(178, 34, 34)\">&quot;data&quot; properties</span></strong></h3>\n\n<p>In order to make data properties to be reactive, you need to pass data property an object or array which is passed as reference in JS. Passing property with a simple value from another object won&#39;t make the data property reactive if this property value changes, for example:</p>\n\n<pre>\n<code class=\"language-javascript\">Vue.component(\'store-general-overlay\', {\n  data: function() {\n    return {\n      val1: statesStore,\n      val2: statesStore.hello,\n    };\n  }\n});\n\nconst statesStore = {\n  hello: \'world\'\n}\n\nstatesStore.hello = \'colourful\';</code></pre>\n\n<ul>\n	<li>Once the component is instantiated, the data property looks like:&nbsp;</li>\n</ul>\n\n<pre>\n<code class=\"language-json\">{\n  val1: {hello: \'world\'},\n  val2: \'world\'\n}\n\n</code></pre>\n\n<ul>\n	<li>But the value of hello is updated, the data property looks like:&nbsp;</li>\n</ul>\n\n<pre>\n<code class=\"language-json\">{\n  val1: {hello: \'colorful\'},\n  val2: \'world\'\n}</code></pre>\n\n<p>&nbsp;</p>','2018-07-23 12:00:02',0),(381,'Vue.js','Component','Instantiate Process','<h3><strong><span style=\"color:#B22222\">Properties</span></strong></h3>\n\n<p>Vue component can have mainly three types of properties: <span style=\"background-color:#FFEC00\">props, data properties, and computed properties</span></p>\n\n<p>The sequence of the instantiation of properties is <span style=\"background-color:#FFEC00\">props =&gt; data properties =&gt; computed properties</span></p>\n\n<p>So you have to be careful the dependency relations betweens these three types of properties, for example, the following declaration would be problematic:</p>\n\n<pre>\n<code class=\"language-javascript\">Vue.component(\'component\', {\n  props: [\'prop1\'],\n  data: function() {\n    return {\n      val1: this.val2\n    };\n  },\n  computed: function() {\n    return {\n      val2: this.prop1 + \' wola!\' \n    };\n  },\n});\n</code></pre>\n\n<p>Properties &quot;prop1&quot; and &quot;val2&quot; will be defined correctly, <span style=\"background-color:#FFEC00\">but property &quot;val1&quot; will be undefined</span> because data property will be instantiated before computed property &quot;val2&quot;.</p>','2018-07-23 11:50:20',3),(382,'Magento','Session','Session Cookie','<p>Shopping cart of a specific user is attached to an unique user session identified via cookie key &quot;frontend&quot;</p>','2018-08-01 11:01:17',0),(383,'Marimekko','Magento','Giftcard','<p><strong><span style=\"color:rgb(178, 34, 34)\">Bypass giftcard balance checking locally</span></strong></p>\n\n<pre>\n<code class=\"language-php\">class Vaimo_UnicomGiftcard_Model_Api\n{\n\n    /**\n     * Return balance and expiration date for give card.\n     *\n     * @param $key\n     * @param $pin\n     *\n     * @return Vaimo_UnicomGiftcard_Model_Data_Balance\n     */\n    public function getBalance($key, $pin)\n    {\n        //Ask balance for card through treasure information\n        $treasuryInformation = $this-&gt;getTreasuryInformation();\n        $balanceForCard = $treasuryInformation-&gt;getBalanceForCard($key, $pin);\n        $balanceForCard = 50;\n        $expirationDateForCard = \"2018-12-11T12:59:46.630+02:00\";\n        // try {\n        //     //Ask expiration date for card through treasury management\n        //     $treasuryManagement = $this-&gt;getTreasuryManagement();\n        //     $expirationDateForCard = $treasuryManagement-&gt;getCardExpirationDate($key);\n        // } catch (Exception $e) {\n        //     Mage::logException($e);\n        // }\n\n        /** @var Vaimo_UnicomGiftcard_Model_Data_Balance $balance */\n        $balance = Mage::getModel(\'unicom_giftcard/data_balance\');\n        $balance-&gt;setValue($balanceForCard);\n        $balance-&gt;setExpiration($expirationDateForCard);\n        return $balance;\n    }\n}</code></pre>\n\n<p><strong><span style=\"color:rgb(178, 34, 34)\">How Magento saves giftcard data into cart attached to a customer session</span></strong></p>\n\n<p><span style=\"background-color:rgb(122, 255, 145)\">1. The POST request &quot;checkout/klarna/addUnicom/&quot; with giftcard number and pin code as parameters, then giftcard data will be saved in to table sales_flat_quote in following pattern:</span></p>\n\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"margin-bottom:5px; width:500px\">\n	<tbody>\n		<tr>\n			<td>gift_cards</td>\n			<td>gift_cards_amount</td>\n			<td>base_gift_cards_amount</td>\n			<td>gift_cards_amount_used</td>\n			<td>base_gift_cards_amount_used</td>\n		</tr>\n		<tr>\n			<td>a:1:{i:0;a:4:{s:1:&quot;i&quot;;s:2:&quot;66&quot;;s:1:&quot;c&quot;;s:19:&quot;6087780000000000627&quot;;s:1:&quot;a&quot;;d:279.5;s:2:&quot;ba&quot;;s:12:&quot;279.50000000&quot;;}}</td>\n			<td style=\"text-align:center\">279.5000</td>\n			<td style=\"text-align:center\">279.5000</td>\n			<td style=\"text-align:center\">&nbsp;47.8400</td>\n			<td style=\"text-align:center\">&nbsp;47.8400</td>\n		</tr>\n	</tbody>\n</table>\n\n<ul>\n	<li>gift_cards: the metadata of giftcard, e.g. cardID(which is the unique id in table enterprise_giftcardaccount), card number, card balance.</li>\n	<li>base_gift_cards_amount_used: how much will be redeemed when buying the current product in cart</li>\n</ul>\n\n<p><span style=\"background-color:rgb(122, 255, 145)\">2. The POST request &quot;checkout/klarna/removeGiftCard&quot; with giftcard number as the only parameter, then giftcard data will be emptied in the quote</span></p>\n\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"margin-bottom:5px; width:500px\">\n	<tbody>\n		<tr>\n			<td>gift_cards</td>\n			<td>gift_cards_amount</td>\n			<td>base_gift_cards_amount</td>\n			<td>gift_cards_amount_used</td>\n			<td>base_gift_cards_amount_used</td>\n		</tr>\n		<tr>\n			<td>a:0:{}</td>\n			<td style=\"text-align:center\">0.0000</td>\n			<td style=\"text-align:center\">0.0000</td>\n			<td style=\"text-align:center\">0.0000</td>\n			<td style=\"text-align:center\">&nbsp;0.0000</td>\n		</tr>\n	</tbody>\n</table>','2018-10-08 13:43:51',10),(384,'Magento','Store','Get Metadata Of Store','<p>Use following snippets to get metadata of current store</p>\n\n<pre>\n<code class=\"language-php\">$currentStore = Mage::app()-&gt;getStore(); // store object\n$storeCode = $currentStore-&gt;getCode(); // \"fi_fi\", \"se_en\"\n$countryCode = strtoupper(explode(\"_\", $storeCode)[0]); // \"FI\", \"SE\"\n$currency = $currentStore-&gt;getCurrentCurrencyCode(); // \"EUR\", \"SEK\"\n$currencySymbol = Mage::app()-&gt;getLocale()-&gt;currency($currency)-&gt;getSymbol(); // \"â‚¬\", null\n</code></pre>','2018-08-10 05:39:58',1),(385,'Marimekko','Magento','Bypass CRM Validation','<p><strong><span style=\"color:rgb(178, 34, 34)\">To successfully login in local installation, CRM validation has to be skipped in the code level.</span></strong></p>\n\n<p>File path: /app/code/local/Vaimo/Marimekko/controllers/Customer/AccountController.php</p>\n\n<pre>\n<code class=\"language-php\">// Hide this CMS block of snippets to bypass CMS validation from function Vaimo_Marimekko_Customer_AccountController::loginajaxAction()\n\n$crmObserver = Mage::getModel(\'Marimekko_Crm_Model_Observer\');\n$observerData = new Varien_Object();\n$observerData-&gt;setData(\'controller_action\', $this);\n$observerData-&gt;setData(\'dont_exit\', true);\n$crmObserver-&gt;preLogin($observerData);</code></pre>','2018-08-12 07:52:48',1),(386,'Linux','Ubuntu','PPA Removal','<p>Show all PPA</p>\n\n<pre>\n<code class=\"language-bash\">sudo ls /etc/apt/sources.list.d\n//atlassian-hipchat4.list  google-chrome.list  official-package-repositories.list  sogoupinyin.list  vscode.list</code></pre>\n\n<p>Then remove the list file you want</p>','2018-08-12 19:53:41',0),(387,'Linux','Miscs','SSL Certificate','<p>Converting PKCS#12 certificate into PEM using OpenSSL</p>\n\n<pre>\n<code class=\"language-bash\"> openssl pkcs12 -in Marimekko_TEST_uAAS_External_Client.p12 -out unicom.pem -clcerts -nokeys -passin \'pass:PiA4CF10z\'</code></pre>\n\n<p>&nbsp;</p>','2018-08-15 06:52:49',2),(388,'Magento','Configuration','Turn On Debug Mode','<p>In index.php</p>\n\n<pre>\n<code class=\"language-php\">if (isset($_SERVER[\'MAGE_IS_DEVELOPER_MODE\'])) {\n    Mage::setIsDeveloperMode(true);\n    ini_set(\'display_errors\', 1);\n}</code></pre>','2018-08-30 13:59:00',0),(389,'Linux','Commands','Change Default Shell','<p>Use following command to check the current shell used for terminal</p>\n\n<pre>\n<code class=\"language-bash\">echo $SHELL</code></pre>\n\n<p>And this one to change default login shell</p>\n\n<pre>\n<code class=\"language-bash\">chsh</code></pre>\n\n<p>&nbsp;</p>','2018-09-14 08:27:57',0),(390,'Magento','Block','CMS Block In Phtml','<p>Sometimes you want to include content of CMS block as part of your template file, so you can define some dynamic content inside CMS block without modifying the template code.</p>\n\n<p>Two ways to do so:</p>\n\n<p><strong><span style=\"color:#B22222\">1. Add CMS block into local.xml (recommendated way)</span></strong></p>\n\n<pre>\n<code class=\"language-xml\">&lt;block type=\"core/template\" name=\'global_customer_redirect_popup\' template=\'persistent/customer/redirect/global-user-site-switcher.phtml\'&gt;\n  &lt;block type=\"cms/block\" name=\"ip_door_mat_popop_cover_img\"&gt;\n    &lt;action method=\"setBlockId\"&gt;\n      &lt;block_id&gt;ip_door_mat_popop_cover_img&lt;/block_id&gt;\n    &lt;/action&gt;\n  &lt;/block&gt;\n&lt;/block&gt;</code></pre>\n\n<ul>\n	<li>&lt;block_id&gt; uses the identifier of the CMS block you used when create it</li>\n</ul>\n\n<p>Then in your .phtml template, you can retreive this CMS content easily by</p>\n\n<pre>\n<code class=\"language-php\">echo $this-&gt;getChildHtml(\'ip_door_mat_popop_cover_img\');</code></pre>\n\n<p>2. Modify layout on-the-fly (without its defination&nbsp;in local.xml beforehand) to create the CMS block when you want to get content of this CMS</p>\n\n<pre>\n<code class=\"language-php\">echo $this-&gt;getLayout()-&gt;createBlock(\'cms/block\')-&gt;setBlockId(\'block_identifier\')-&gt;toHtml();</code></pre>\n\n<p>&nbsp;</p>','2018-10-10 13:42:30',0);
/*!40000 ALTER TABLE `notes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `temp`
--

DROP TABLE IF EXISTS `temp`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `temp` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `category` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `sub_cat` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `title` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `content` text COLLATE utf8_unicode_ci NOT NULL,
  `datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `visits` int(10) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `unique_note` (`category`,`sub_cat`,`title`),
  KEY `cat_sub_cats` (`category`,`sub_cat`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `temp`
--

LOCK TABLES `temp` WRITE;
/*!40000 ALTER TABLE `temp` DISABLE KEYS */;
/*!40000 ALTER TABLE `temp` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-08-21 18:27:14
